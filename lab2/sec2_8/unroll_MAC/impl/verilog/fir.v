// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.651000,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=110,HLS_SYN_LUT=454,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
wire   [31:0] shift_reg_q0;
reg   [3:0] shift_reg_address1;
reg    shift_reg_ce1;
reg    shift_reg_we1;
wire   [31:0] shift_reg_q1;
reg  signed [31:0] reg_118;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [3:0] i_fu_128_p2;
reg   [3:0] i_reg_217;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_122_p2;
reg  signed [31:0] shift_reg_load_1_reg_227;
wire   [31:0] add_ln25_fu_150_p2;
reg   [31:0] add_ln25_reg_232;
reg   [3:0] i_0_reg_100;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln18_fu_134_p1;
wire   [63:0] zext_ln18_1_fu_139_p1;
wire    ap_CS_fsm_state6;
wire  signed [31:0] grp_fu_112_p0;
wire   [31:0] mul_ln25_1_fu_144_p2;
wire   [31:0] grp_fu_112_p2;
wire  signed [31:0] mul_ln25_5_fu_167_p0;
wire  signed [31:0] mul_ln25_6_fu_173_p0;
wire   [31:0] mul_ln25_fu_156_p2;
wire   [31:0] mul_ln25_3_fu_161_p2;
wire   [31:0] mul_ln25_5_fu_167_p2;
wire   [31:0] mul_ln25_6_fu_173_p2;
wire   [31:0] add_ln25_3_fu_189_p2;
wire   [31:0] add_ln25_2_fu_183_p2;
wire   [31:0] add_ln25_4_fu_195_p2;
wire   [31:0] add_ln25_1_fu_178_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(x),
    .q0(shift_reg_q0),
    .address1(shift_reg_address1),
    .ce1(shift_reg_ce1),
    .we1(shift_reg_we1),
    .d1(shift_reg_q0),
    .q1(shift_reg_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_100 <= i_reg_217;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_100 <= 4'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln25_reg_232 <= add_ln25_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_217 <= i_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_118 <= shift_reg_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_load_1_reg_227 <= shift_reg_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address0 = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = 4'd6;
    end else if (((icmp_ln17_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = 4'd10;
    end else if (((icmp_ln17_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_address0 = zext_ln18_fu_134_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address1 = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address1 = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address1 = zext_ln18_1_fu_139_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_address1 = 4'd8;
    end else begin
        shift_reg_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln17_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln17_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_ce1 = 1'b1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_we1 = 1'b1;
    end else begin
        shift_reg_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_178_p2 = (add_ln25_reg_232 + mul_ln25_fu_156_p2);

assign add_ln25_2_fu_183_p2 = (mul_ln25_3_fu_161_p2 + grp_fu_112_p2);

assign add_ln25_3_fu_189_p2 = (mul_ln25_5_fu_167_p2 + mul_ln25_6_fu_173_p2);

assign add_ln25_4_fu_195_p2 = (add_ln25_3_fu_189_p2 + add_ln25_2_fu_183_p2);

assign add_ln25_fu_150_p2 = (mul_ln25_1_fu_144_p2 + grp_fu_112_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_112_p0 = shift_reg_q0;

assign grp_fu_112_p2 = ($signed(grp_fu_112_p0) * $signed('h139));

assign i_fu_128_p2 = ($signed(i_0_reg_100) + $signed(4'd15));

assign icmp_ln17_fu_122_p2 = ((i_0_reg_100 == 4'd0) ? 1'b1 : 1'b0);

assign mul_ln25_1_fu_144_p2 = ($signed(reg_118) * $signed(-'h5B));

assign mul_ln25_3_fu_161_p2 = ($signed(reg_118) * $signed('h1F4));

assign mul_ln25_5_fu_167_p0 = shift_reg_q1;

assign mul_ln25_5_fu_167_p2 = ($signed(mul_ln25_5_fu_167_p0) * $signed(-'h5B));

assign mul_ln25_6_fu_173_p0 = x;

assign mul_ln25_6_fu_173_p2 = ($signed(mul_ln25_6_fu_173_p0) * $signed('h35));

assign mul_ln25_fu_156_p2 = ($signed(shift_reg_load_1_reg_227) * $signed('h35));

assign y = (add_ln25_4_fu_195_p2 + add_ln25_1_fu_178_p2);

assign zext_ln18_1_fu_139_p1 = i_0_reg_100;

assign zext_ln18_fu_134_p1 = i_fu_128_p2;

endmodule //fir
