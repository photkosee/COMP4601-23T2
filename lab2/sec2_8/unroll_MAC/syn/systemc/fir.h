// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_shift_reg.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_in< sc_lv<32> > x;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_shift_reg* shift_reg_U;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_logic > shift_reg_we0;
    sc_signal< sc_lv<32> > shift_reg_q0;
    sc_signal< sc_lv<4> > shift_reg_address1;
    sc_signal< sc_logic > shift_reg_ce1;
    sc_signal< sc_logic > shift_reg_we1;
    sc_signal< sc_lv<32> > shift_reg_q1;
    sc_signal< sc_lv<32> > reg_118;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > i_fu_128_p2;
    sc_signal< sc_lv<4> > i_reg_217;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln17_fu_122_p2;
    sc_signal< sc_lv<32> > shift_reg_load_1_reg_227;
    sc_signal< sc_lv<32> > add_ln25_fu_150_p2;
    sc_signal< sc_lv<32> > add_ln25_reg_232;
    sc_signal< sc_lv<4> > i_0_reg_100;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln18_fu_134_p1;
    sc_signal< sc_lv<64> > zext_ln18_1_fu_139_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > grp_fu_112_p0;
    sc_signal< sc_lv<32> > mul_ln25_1_fu_144_p2;
    sc_signal< sc_lv<32> > grp_fu_112_p2;
    sc_signal< sc_lv<32> > mul_ln25_5_fu_167_p0;
    sc_signal< sc_lv<32> > mul_ln25_6_fu_173_p0;
    sc_signal< sc_lv<32> > mul_ln25_fu_156_p2;
    sc_signal< sc_lv<32> > mul_ln25_3_fu_161_p2;
    sc_signal< sc_lv<32> > mul_ln25_5_fu_167_p2;
    sc_signal< sc_lv<32> > mul_ln25_6_fu_173_p2;
    sc_signal< sc_lv<32> > add_ln25_3_fu_189_p2;
    sc_signal< sc_lv<32> > add_ln25_2_fu_183_p2;
    sc_signal< sc_lv<32> > add_ln25_4_fu_195_p2;
    sc_signal< sc_lv<32> > add_ln25_1_fu_178_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_139;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_FFFFFFA5;
    static const sc_lv<32> ap_const_lv32_35;
    static const sc_lv<32> ap_const_lv32_1F4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln25_1_fu_178_p2();
    void thread_add_ln25_2_fu_183_p2();
    void thread_add_ln25_3_fu_189_p2();
    void thread_add_ln25_4_fu_195_p2();
    void thread_add_ln25_fu_150_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_112_p0();
    void thread_grp_fu_112_p2();
    void thread_i_fu_128_p2();
    void thread_icmp_ln17_fu_122_p2();
    void thread_mul_ln25_1_fu_144_p2();
    void thread_mul_ln25_3_fu_161_p2();
    void thread_mul_ln25_5_fu_167_p0();
    void thread_mul_ln25_5_fu_167_p2();
    void thread_mul_ln25_6_fu_173_p0();
    void thread_mul_ln25_6_fu_173_p2();
    void thread_mul_ln25_fu_156_p2();
    void thread_shift_reg_address0();
    void thread_shift_reg_address1();
    void thread_shift_reg_ce0();
    void thread_shift_reg_ce1();
    void thread_shift_reg_we0();
    void thread_shift_reg_we1();
    void thread_y();
    void thread_y_ap_vld();
    void thread_zext_ln18_1_fu_139_p1();
    void thread_zext_ln18_fu_134_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
