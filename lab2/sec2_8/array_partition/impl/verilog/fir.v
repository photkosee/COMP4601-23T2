// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=727,HLS_SYN_LUT=167,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] shift_reg_9;
reg   [31:0] shift_reg_8;
reg   [31:0] shift_reg_7;
reg   [31:0] shift_reg_6;
reg   [31:0] shift_reg_5;
reg   [31:0] shift_reg_4;
reg   [31:0] shift_reg_3;
reg   [31:0] shift_reg_2;
reg   [31:0] shift_reg_1;
reg   [31:0] shift_reg_0;
wire   [3:0] c1_address0;
reg    c1_ce0;
wire   [9:0] c1_q0;
reg   [31:0] shift_reg_9_load_reg_301;
reg   [31:0] shift_reg_8_load_reg_306;
reg   [31:0] shift_reg_7_load_reg_311;
reg   [31:0] shift_reg_6_load_reg_316;
reg   [31:0] shift_reg_5_load_reg_321;
reg   [31:0] shift_reg_4_load_reg_326;
reg   [31:0] shift_reg_3_load_reg_331;
reg   [31:0] shift_reg_2_load_reg_336;
reg   [31:0] shift_reg_1_load_reg_341;
reg   [31:0] shift_reg_0_load_reg_346;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_257_p3;
wire   [4:0] i_fu_274_p2;
reg   [4:0] i_reg_362;
wire   [31:0] acc_fu_290_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] acc_0_reg_102;
reg  signed [4:0] i_1_reg_115;
reg  signed [31:0] UnifiedRetVal_i_reg_126;
wire   [3:0] trunc_ln25_fu_270_p1;
wire   [63:0] zext_ln25_fu_265_p1;
wire  signed [31:0] sext_ln24_fu_253_p1;
wire  signed [9:0] mul_ln25_fu_284_p0;
wire   [31:0] mul_ln25_fu_284_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_condition_212;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 shift_reg_9 = 32'd0;
#0 shift_reg_8 = 32'd0;
#0 shift_reg_7 = 32'd0;
#0 shift_reg_6 = 32'd0;
#0 shift_reg_5 = 32'd0;
#0 shift_reg_4 = 32'd0;
#0 shift_reg_3 = 32'd0;
#0 shift_reg_2 = 32'd0;
#0 shift_reg_1 = 32'd0;
#0 shift_reg_0 = 32'd0;
end

fir_c1 #(
    .DataWidth( 10 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c1_address0),
    .ce0(c1_ce0),
    .q0(c1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_257_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((trunc_ln25_fu_270_p1 == 4'd0)) begin
            UnifiedRetVal_i_reg_126 <= x;
        end else if ((1'b1 == ap_condition_212)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_9_load_reg_301;
        end else if ((trunc_ln25_fu_270_p1 == 4'd9)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_8_load_reg_306;
        end else if ((trunc_ln25_fu_270_p1 == 4'd8)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_7_load_reg_311;
        end else if ((trunc_ln25_fu_270_p1 == 4'd7)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_6_load_reg_316;
        end else if ((trunc_ln25_fu_270_p1 == 4'd6)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_5_load_reg_321;
        end else if ((trunc_ln25_fu_270_p1 == 4'd5)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_4_load_reg_326;
        end else if ((trunc_ln25_fu_270_p1 == 4'd4)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_3_load_reg_331;
        end else if ((trunc_ln25_fu_270_p1 == 4'd3)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_2_load_reg_336;
        end else if ((trunc_ln25_fu_270_p1 == 4'd2)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_1_load_reg_341;
        end else if ((trunc_ln25_fu_270_p1 == 4'd1)) begin
            UnifiedRetVal_i_reg_126 <= shift_reg_0_load_reg_346;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_0_reg_102 <= acc_fu_290_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        acc_0_reg_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_115 <= i_reg_362;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_reg_115 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_257_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_362 <= i_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_0 <= x;
        shift_reg_0_load_reg_346 <= shift_reg_0;
        shift_reg_1 <= shift_reg_0;
        shift_reg_1_load_reg_341 <= shift_reg_1;
        shift_reg_2 <= shift_reg_1;
        shift_reg_2_load_reg_336 <= shift_reg_2;
        shift_reg_3 <= shift_reg_2;
        shift_reg_3_load_reg_331 <= shift_reg_3;
        shift_reg_4 <= shift_reg_3;
        shift_reg_4_load_reg_326 <= shift_reg_4;
        shift_reg_5 <= shift_reg_4;
        shift_reg_5_load_reg_321 <= shift_reg_5;
        shift_reg_6 <= shift_reg_5;
        shift_reg_6_load_reg_316 <= shift_reg_6;
        shift_reg_7 <= shift_reg_6;
        shift_reg_7_load_reg_311 <= shift_reg_7;
        shift_reg_8 <= shift_reg_7;
        shift_reg_8_load_reg_306 <= shift_reg_8;
        shift_reg_9 <= shift_reg_8;
        shift_reg_9_load_reg_301 <= shift_reg_9;
    end
end

always @ (*) begin
    if (((tmp_fu_257_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_257_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c1_ce0 = 1'b1;
    end else begin
        c1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_257_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_257_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_290_p2 = (mul_ln25_fu_284_p2 + acc_0_reg_102);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_condition_212 = (~(trunc_ln25_fu_270_p1 == 4'd1) & ~(trunc_ln25_fu_270_p1 == 4'd0) & ~(trunc_ln25_fu_270_p1 == 4'd9) & ~(trunc_ln25_fu_270_p1 == 4'd8) & ~(trunc_ln25_fu_270_p1 == 4'd7) & ~(trunc_ln25_fu_270_p1 == 4'd6) & ~(trunc_ln25_fu_270_p1 == 4'd5) & ~(trunc_ln25_fu_270_p1 == 4'd4) & ~(trunc_ln25_fu_270_p1 == 4'd3) & ~(trunc_ln25_fu_270_p1 == 4'd2));
end

assign c1_address0 = zext_ln25_fu_265_p1;

assign i_fu_274_p2 = ($signed(i_1_reg_115) + $signed(5'd31));

assign mul_ln25_fu_284_p0 = c1_q0;

assign mul_ln25_fu_284_p2 = ($signed(mul_ln25_fu_284_p0) * $signed(UnifiedRetVal_i_reg_126));

assign sext_ln24_fu_253_p1 = i_1_reg_115;

assign tmp_fu_257_p3 = i_1_reg_115[32'd4];

assign trunc_ln25_fu_270_p1 = i_1_reg_115[3:0];

assign y = acc_0_reg_102;

assign zext_ln25_fu_265_p1 = $unsigned(sext_ln24_fu_253_p1);

endmodule //fir
