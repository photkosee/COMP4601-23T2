// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_c1.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_in< sc_lv<32> > x;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_c1* c1_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > shift_reg_9;
    sc_signal< sc_lv<32> > shift_reg_8;
    sc_signal< sc_lv<32> > shift_reg_7;
    sc_signal< sc_lv<32> > shift_reg_6;
    sc_signal< sc_lv<32> > shift_reg_5;
    sc_signal< sc_lv<32> > shift_reg_4;
    sc_signal< sc_lv<32> > shift_reg_3;
    sc_signal< sc_lv<32> > shift_reg_2;
    sc_signal< sc_lv<32> > shift_reg_1;
    sc_signal< sc_lv<32> > shift_reg_0;
    sc_signal< sc_lv<4> > c1_address0;
    sc_signal< sc_logic > c1_ce0;
    sc_signal< sc_lv<10> > c1_q0;
    sc_signal< sc_lv<32> > shift_reg_9_load_reg_301;
    sc_signal< sc_lv<32> > shift_reg_8_load_reg_306;
    sc_signal< sc_lv<32> > shift_reg_7_load_reg_311;
    sc_signal< sc_lv<32> > shift_reg_6_load_reg_316;
    sc_signal< sc_lv<32> > shift_reg_5_load_reg_321;
    sc_signal< sc_lv<32> > shift_reg_4_load_reg_326;
    sc_signal< sc_lv<32> > shift_reg_3_load_reg_331;
    sc_signal< sc_lv<32> > shift_reg_2_load_reg_336;
    sc_signal< sc_lv<32> > shift_reg_1_load_reg_341;
    sc_signal< sc_lv<32> > shift_reg_0_load_reg_346;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_257_p3;
    sc_signal< sc_lv<5> > i_fu_274_p2;
    sc_signal< sc_lv<5> > i_reg_362;
    sc_signal< sc_lv<32> > acc_fu_290_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > acc_0_reg_102;
    sc_signal< sc_lv<5> > i_1_reg_115;
    sc_signal< sc_lv<32> > UnifiedRetVal_i_reg_126;
    sc_signal< sc_lv<4> > trunc_ln25_fu_270_p1;
    sc_signal< sc_lv<64> > zext_ln25_fu_265_p1;
    sc_signal< sc_lv<32> > sext_ln24_fu_253_p1;
    sc_signal< sc_lv<10> > mul_ln25_fu_284_p0;
    sc_signal< sc_lv<32> > mul_ln25_fu_284_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_condition_212;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_fu_290_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_condition_212();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c1_address0();
    void thread_c1_ce0();
    void thread_i_fu_274_p2();
    void thread_mul_ln25_fu_284_p0();
    void thread_mul_ln25_fu_284_p2();
    void thread_sext_ln24_fu_253_p1();
    void thread_tmp_fu_257_p3();
    void thread_trunc_ln25_fu_270_p1();
    void thread_y();
    void thread_y_ap_vld();
    void thread_zext_ln25_fu_265_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
