-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=727,HLS_SYN_LUT=167,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal c1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c1_ce0 : STD_LOGIC;
    signal c1_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal shift_reg_9_load_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_8_load_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_7_load_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_6_load_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_5_load_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_4_load_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_3_load_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_2_load_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_1_load_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_0_load_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_362 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal acc_0_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal UnifiedRetVal_i_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_fu_270_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln25_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln24_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_fu_284_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln25_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_212 : BOOLEAN;

    component fir_c1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    c1_U : component fir_c1
    generic map (
        DataWidth => 10,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c1_address0,
        ce0 => c1_ce0,
        q0 => c1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    UnifiedRetVal_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_257_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                if ((trunc_ln25_fu_270_p1 = ap_const_lv4_0)) then 
                    UnifiedRetVal_i_reg_126 <= x;
                elsif ((ap_const_boolean_1 = ap_condition_212)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_9_load_reg_301;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_9)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_8_load_reg_306;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_8)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_7_load_reg_311;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_7)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_6_load_reg_316;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_6)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_5_load_reg_321;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_5)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_4_load_reg_326;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_4)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_3_load_reg_331;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_3)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_2_load_reg_336;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_2)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_1_load_reg_341;
                elsif ((trunc_ln25_fu_270_p1 = ap_const_lv4_1)) then 
                    UnifiedRetVal_i_reg_126 <= shift_reg_0_load_reg_346;
                end if;
            end if; 
        end if;
    end process;

    acc_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                acc_0_reg_102 <= acc_fu_290_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                acc_0_reg_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_1_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_115 <= i_reg_362;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_1_reg_115 <= ap_const_lv5_A;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_257_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_362 <= i_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                shift_reg_0 <= x;
                shift_reg_0_load_reg_346 <= shift_reg_0;
                shift_reg_1 <= shift_reg_0;
                shift_reg_1_load_reg_341 <= shift_reg_1;
                shift_reg_2 <= shift_reg_1;
                shift_reg_2_load_reg_336 <= shift_reg_2;
                shift_reg_3 <= shift_reg_2;
                shift_reg_3_load_reg_331 <= shift_reg_3;
                shift_reg_4 <= shift_reg_3;
                shift_reg_4_load_reg_326 <= shift_reg_4;
                shift_reg_5 <= shift_reg_4;
                shift_reg_5_load_reg_321 <= shift_reg_5;
                shift_reg_6 <= shift_reg_5;
                shift_reg_6_load_reg_316 <= shift_reg_6;
                shift_reg_7 <= shift_reg_6;
                shift_reg_7_load_reg_311 <= shift_reg_7;
                shift_reg_8 <= shift_reg_7;
                shift_reg_8_load_reg_306 <= shift_reg_8;
                shift_reg_9 <= shift_reg_8;
                shift_reg_9_load_reg_301 <= shift_reg_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_257_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_257_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    acc_fu_290_p2 <= std_logic_vector(unsigned(mul_ln25_fu_284_p2) + unsigned(acc_0_reg_102));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_condition_212_assign_proc : process(trunc_ln25_fu_270_p1)
    begin
                ap_condition_212 <= (not((trunc_ln25_fu_270_p1 = ap_const_lv4_1)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_0)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_9)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_8)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_7)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_6)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_5)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_4)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_3)) and not((trunc_ln25_fu_270_p1 = ap_const_lv4_2)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_257_p3)
    begin
        if (((tmp_fu_257_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_257_p3)
    begin
        if (((tmp_fu_257_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c1_address0 <= zext_ln25_fu_265_p1(4 - 1 downto 0);

    c1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c1_ce0 <= ap_const_logic_1;
        else 
            c1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_274_p2 <= std_logic_vector(signed(i_1_reg_115) + signed(ap_const_lv5_1F));
    mul_ln25_fu_284_p0 <= c1_q0;
    mul_ln25_fu_284_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln25_fu_284_p0) * signed(UnifiedRetVal_i_reg_126))), 32));
        sext_ln24_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_1_reg_115),32));

    tmp_fu_257_p3 <= i_1_reg_115(4 downto 4);
    trunc_ln25_fu_270_p1 <= i_1_reg_115(4 - 1 downto 0);
    y <= acc_0_reg_102;

    y_ap_vld_assign_proc : process(ap_CS_fsm_state2, tmp_fu_257_p3)
    begin
        if (((tmp_fu_257_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln25_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln24_fu_253_p1),64));
end behav;
