// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=320,HLS_SYN_LUT=313,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg   [3:0] shift_reg_address1;
reg    shift_reg_ce1;
reg    shift_reg_we1;
reg   [31:0] shift_reg_d1;
wire   [31:0] shift_reg_q1;
wire   [3:0] c1_address0;
reg    c1_ce0;
wire   [9:0] c1_q0;
reg   [31:0] reg_148;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
reg   [31:0] reg_153;
reg   [31:0] shift_reg_load_2_reg_198;
wire    ap_CS_fsm_state3;
reg   [31:0] shift_reg_load_3_reg_203;
reg   [31:0] shift_reg_load_4_reg_208;
wire    ap_CS_fsm_state4;
reg   [31:0] shift_reg_load_5_reg_213;
reg   [31:0] shift_reg_load_6_reg_218;
wire    ap_CS_fsm_state5;
reg   [31:0] shift_reg_load_7_reg_223;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_fu_162_p3;
wire   [4:0] i_fu_176_p2;
reg   [4:0] i_reg_241;
wire   [31:0] acc_fu_192_p2;
wire    ap_CS_fsm_state12;
reg   [31:0] acc_0_reg_124;
wire    ap_CS_fsm_state10;
reg  signed [4:0] i_1_reg_137;
wire   [63:0] zext_ln25_fu_170_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire  signed [31:0] sext_ln24_fu_158_p1;
wire  signed [31:0] mul_ln25_fu_186_p0;
wire  signed [9:0] mul_ln25_fu_186_p1;
wire   [31:0] mul_ln25_fu_186_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0),
    .address1(shift_reg_address1),
    .ce1(shift_reg_ce1),
    .we1(shift_reg_we1),
    .d1(shift_reg_d1),
    .q1(shift_reg_q1)
);

fir_c1 #(
    .DataWidth( 10 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c1_address0),
    .ce0(c1_ce0),
    .q0(c1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_0_reg_124 <= acc_fu_192_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_0_reg_124 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_1_reg_137 <= i_reg_241;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_137 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_162_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_reg_241 <= i_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_148 <= shift_reg_q0;
        reg_153 <= shift_reg_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_load_2_reg_198 <= shift_reg_q0;
        shift_reg_load_3_reg_203 <= shift_reg_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_load_4_reg_208 <= shift_reg_q0;
        shift_reg_load_5_reg_213 <= shift_reg_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_load_6_reg_218 <= shift_reg_q0;
        shift_reg_load_7_reg_223 <= shift_reg_q1;
    end
end

always @ (*) begin
    if (((tmp_fu_162_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_162_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c1_ce0 = 1'b1;
    end else begin
        c1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        shift_reg_address0 = zext_ln25_fu_170_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        shift_reg_address0 = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_reg_address0 = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_address0 = 4'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_address0 = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_address0 = 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address0 = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_address0 = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shift_reg_address0 = 4'd9;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        shift_reg_address1 = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_reg_address1 = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_address1 = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_address1 = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_address1 = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address1 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address1 = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address1 = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_address1 = 4'd6;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shift_reg_address1 = 4'd8;
    end else begin
        shift_reg_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shift_reg_ce1 = 1'b1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_reg_d0 = shift_reg_load_6_reg_218;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_d0 = shift_reg_load_4_reg_208;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_d0 = shift_reg_load_2_reg_198;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        shift_reg_d0 = reg_148;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_reg_d1 = shift_reg_load_7_reg_223;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_d1 = shift_reg_load_5_reg_213;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_d1 = shift_reg_load_3_reg_203;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        shift_reg_d1 = reg_153;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_d1 = x;
    end else begin
        shift_reg_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10))) begin
        shift_reg_we1 = 1'b1;
    end else begin
        shift_reg_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_162_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_fu_162_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_192_p2 = (mul_ln25_fu_186_p2 + acc_0_reg_124);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c1_address0 = zext_ln25_fu_170_p1;

assign i_fu_176_p2 = ($signed(i_1_reg_137) + $signed(5'd31));

assign mul_ln25_fu_186_p0 = shift_reg_q0;

assign mul_ln25_fu_186_p1 = c1_q0;

assign mul_ln25_fu_186_p2 = ($signed(mul_ln25_fu_186_p0) * $signed(mul_ln25_fu_186_p1));

assign sext_ln24_fu_158_p1 = i_1_reg_137;

assign tmp_fu_162_p3 = i_1_reg_137[32'd4];

assign y = acc_0_reg_124;

assign zext_ln25_fu_170_p1 = $unsigned(sext_ln24_fu_158_p1);

endmodule //fir
