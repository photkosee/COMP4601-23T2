-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=43,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=118,HLS_SYN_LUT=360,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_ce1 : STD_LOGIC;
    signal shift_reg_we1 : STD_LOGIC;
    signal shift_reg_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c1_ce0 : STD_LOGIC;
    signal c1_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_0_cast_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_0_cast_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln17_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_addr_reg_331 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln17_1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_1_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_addr_4_reg_341 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln17_2_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_2_reg_346 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_addr_5_reg_350 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln18_3_fu_262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_3_reg_359 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln17_3_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_295_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_382 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_0_reg_143 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal acc_0_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_1_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_1_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_2_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_3_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_4_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln18_fu_189_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_1_fu_210_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln18_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_2_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln18_1_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_fu_246_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_4_fu_250_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln18_2_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln24_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_fu_305_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln25_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component fir_shift_reg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_c1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    shift_reg_U : component fir_shift_reg
    generic map (
        DataWidth => 32,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        q0 => shift_reg_q0,
        address1 => shift_reg_address1,
        ce1 => shift_reg_ce1,
        we1 => shift_reg_we1,
        d1 => shift_reg_d1,
        q1 => shift_reg_q1);

    c1_U : component fir_c1
    generic map (
        DataWidth => 10,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c1_address0,
        ce0 => c1_ce0,
        q0 => c1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                acc_0_reg_155 <= acc_fu_311_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                acc_0_reg_155 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_0_reg_143 <= add_ln18_3_reg_359;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_0_reg_143 <= ap_const_lv5_A;
            end if; 
        end if;
    end process;

    i_1_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_168 <= i_reg_382;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_168 <= ap_const_lv5_A;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_2_reg_346 = ap_const_lv1_1) and (icmp_ln17_1_reg_337 = ap_const_lv1_1) and (icmp_ln17_3_fu_256_p2 = ap_const_lv1_1) and (icmp_ln17_reg_327 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln18_3_reg_359 <= add_ln18_3_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_0_0_cast_reg_322 <= i_0_0_cast_fu_179_p1;
                icmp_ln17_reg_327 <= icmp_ln17_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_fu_281_p3 = ap_const_lv1_0))) then
                i_reg_382 <= i_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln17_1_reg_337 <= icmp_ln17_1_fu_200_p2;
                shift_reg_addr_reg_331 <= zext_ln18_fu_195_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_1_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln17_2_reg_346 <= icmp_ln17_2_fu_225_p2;
                shift_reg_addr_4_reg_341 <= zext_ln18_2_fu_220_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_2_reg_346 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                shift_reg_addr_5_reg_350 <= zext_ln18_3_fu_241_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_183_p2, icmp_ln17_reg_327, icmp_ln17_1_reg_337, ap_CS_fsm_state3, icmp_ln17_2_reg_346, ap_CS_fsm_state5, icmp_ln17_3_fu_256_p2, ap_CS_fsm_state8, tmp_fu_281_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln17_1_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln17_reg_327 = ap_const_lv1_0) or ((icmp_ln17_1_reg_337 = ap_const_lv1_0) or ((icmp_ln17_2_reg_346 = ap_const_lv1_0) or (icmp_ln17_3_fu_256_p2 = ap_const_lv1_0)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_fu_281_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    acc_fu_311_p2 <= std_logic_vector(unsigned(mul_ln25_fu_305_p2) + unsigned(acc_0_reg_155));
    add_ln18_1_fu_210_p2 <= std_logic_vector(signed(i_0_0_reg_143) + signed(ap_const_lv5_1E));
    add_ln18_2_fu_231_p2 <= std_logic_vector(signed(ap_const_lv5_1D) + signed(i_0_0_reg_143));
    add_ln18_3_fu_262_p2 <= std_logic_vector(signed(i_0_0_reg_143) + signed(ap_const_lv5_1C));
    add_ln18_4_fu_250_p2 <= std_logic_vector(signed(ap_const_lv4_D) + signed(trunc_ln18_fu_246_p1));
    add_ln18_fu_189_p2 <= std_logic_vector(signed(i_0_0_reg_143) + signed(ap_const_lv5_1F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state8, tmp_fu_281_p3)
    begin
        if (((tmp_fu_281_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, tmp_fu_281_p3)
    begin
        if (((tmp_fu_281_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c1_address0 <= zext_ln25_fu_289_p1(4 - 1 downto 0);

    c1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c1_ce0 <= ap_const_logic_1;
        else 
            c1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        i_0_0_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_0_reg_143),32));

    i_fu_295_p2 <= std_logic_vector(signed(i_1_reg_168) + signed(ap_const_lv5_1F));
    icmp_ln17_1_fu_200_p2 <= "1" when (signed(add_ln18_fu_189_p2) > signed(ap_const_lv5_0)) else "0";
    icmp_ln17_2_fu_225_p2 <= "1" when (signed(add_ln18_1_fu_210_p2) > signed(ap_const_lv5_0)) else "0";
    icmp_ln17_3_fu_256_p2 <= "1" when (signed(add_ln18_4_fu_250_p2) > signed(ap_const_lv4_0)) else "0";
    icmp_ln17_fu_183_p2 <= "1" when (signed(i_0_0_reg_143) > signed(ap_const_lv5_0)) else "0";
    mul_ln25_fu_305_p0 <= shift_reg_q1;
    mul_ln25_fu_305_p1 <= c1_q0;
    mul_ln25_fu_305_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln25_fu_305_p0) * signed(mul_ln25_fu_305_p1))), 32));
        sext_ln18_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_2_fu_231_p2),32));

        sext_ln18_2_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_3_fu_262_p2),32));

        sext_ln18_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_1_fu_210_p2),32));

        sext_ln24_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_1_reg_168),32));


    shift_reg_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, zext_ln18_fu_195_p1, zext_ln18_1_fu_206_p1, zext_ln18_3_fu_241_p1, zext_ln18_4_fu_272_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            shift_reg_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_address0 <= zext_ln18_4_fu_272_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_address0 <= zext_ln18_3_fu_241_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_address0 <= zext_ln18_1_fu_206_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shift_reg_address0 <= zext_ln18_fu_195_p1(4 - 1 downto 0);
        else 
            shift_reg_address0 <= "XXXX";
        end if; 
    end process;


    shift_reg_address1_assign_proc : process(shift_reg_addr_reg_331, shift_reg_addr_4_reg_341, ap_CS_fsm_state3, shift_reg_addr_5_reg_350, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, zext_ln18_2_fu_220_p1, zext_ln25_fu_289_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            shift_reg_address1 <= zext_ln25_fu_289_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_address1 <= shift_reg_addr_5_reg_350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_address1 <= shift_reg_addr_4_reg_341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_address1 <= shift_reg_addr_reg_331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_address1 <= zext_ln18_2_fu_220_p1(4 - 1 downto 0);
        else 
            shift_reg_address1 <= "XXXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            shift_reg_ce1 <= ap_const_logic_1;
        else 
            shift_reg_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_d0_assign_proc : process(x, shift_reg_q0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            shift_reg_d0 <= x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            shift_reg_d0 <= shift_reg_q0;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_d1_assign_proc : process(shift_reg_q0, shift_reg_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            shift_reg_d1 <= shift_reg_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shift_reg_d1 <= shift_reg_q1;
        else 
            shift_reg_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            shift_reg_we0 <= ap_const_logic_1;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_we1_assign_proc : process(icmp_ln17_reg_327, icmp_ln17_1_reg_337, icmp_ln17_2_reg_346, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln17_2_reg_346 = ap_const_lv1_1) and (icmp_ln17_1_reg_337 = ap_const_lv1_1) and (icmp_ln17_reg_327 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            shift_reg_we1 <= ap_const_logic_1;
        else 
            shift_reg_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_281_p3 <= i_1_reg_168(4 downto 4);
    trunc_ln18_fu_246_p1 <= i_0_0_reg_143(4 - 1 downto 0);
    y <= acc_0_reg_155;

    y_ap_vld_assign_proc : process(ap_CS_fsm_state8, tmp_fu_281_p3)
    begin
        if (((tmp_fu_281_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln18_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_cast_reg_322),64));
    zext_ln18_2_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_fu_216_p1),64));
    zext_ln18_3_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_237_p1),64));
    zext_ln18_4_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_2_fu_268_p1),64));
    zext_ln18_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_189_p2),64));
    zext_ln25_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln24_fu_277_p1),64));
end behav;
