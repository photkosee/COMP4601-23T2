// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=43,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=118,HLS_SYN_LUT=360,HLS_VERSION=2020_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg   [3:0] shift_reg_address1;
reg    shift_reg_ce1;
reg    shift_reg_we1;
reg   [31:0] shift_reg_d1;
wire   [31:0] shift_reg_q1;
wire   [3:0] c1_address0;
reg    c1_ce0;
wire   [9:0] c1_q0;
wire  signed [31:0] i_0_0_cast_fu_179_p1;
reg  signed [31:0] i_0_0_cast_reg_322;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_183_p2;
reg   [0:0] icmp_ln17_reg_327;
reg   [3:0] shift_reg_addr_reg_331;
wire   [0:0] icmp_ln17_1_fu_200_p2;
reg   [0:0] icmp_ln17_1_reg_337;
reg   [3:0] shift_reg_addr_4_reg_341;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln17_2_fu_225_p2;
reg   [0:0] icmp_ln17_2_reg_346;
reg   [3:0] shift_reg_addr_5_reg_350;
wire    ap_CS_fsm_state4;
wire  signed [4:0] add_ln18_3_fu_262_p2;
reg  signed [4:0] add_ln18_3_reg_359;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln17_3_fu_256_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_fu_281_p3;
wire   [4:0] i_fu_295_p2;
reg   [4:0] i_reg_382;
wire   [31:0] acc_fu_311_p2;
wire    ap_CS_fsm_state9;
reg  signed [4:0] i_0_0_reg_143;
wire    ap_CS_fsm_state6;
reg   [31:0] acc_0_reg_155;
wire    ap_CS_fsm_state7;
reg  signed [4:0] i_1_reg_168;
wire   [63:0] zext_ln18_fu_195_p1;
wire   [63:0] zext_ln18_1_fu_206_p1;
wire   [63:0] zext_ln18_2_fu_220_p1;
wire   [63:0] zext_ln18_3_fu_241_p1;
wire   [63:0] zext_ln18_4_fu_272_p1;
wire   [63:0] zext_ln25_fu_289_p1;
wire   [4:0] add_ln18_fu_189_p2;
wire  signed [4:0] add_ln18_1_fu_210_p2;
wire  signed [31:0] sext_ln18_fu_216_p1;
wire   [4:0] add_ln18_2_fu_231_p2;
wire  signed [31:0] sext_ln18_1_fu_237_p1;
wire   [3:0] trunc_ln18_fu_246_p1;
wire   [3:0] add_ln18_4_fu_250_p2;
wire  signed [31:0] sext_ln18_2_fu_268_p1;
wire  signed [31:0] sext_ln24_fu_277_p1;
wire  signed [31:0] mul_ln25_fu_305_p0;
wire  signed [9:0] mul_ln25_fu_305_p1;
wire   [31:0] mul_ln25_fu_305_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0),
    .address1(shift_reg_address1),
    .ce1(shift_reg_ce1),
    .we1(shift_reg_we1),
    .d1(shift_reg_d1),
    .q1(shift_reg_q1)
);

fir_c1 #(
    .DataWidth( 10 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c1_address0),
    .ce0(c1_ce0),
    .q0(c1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_0_reg_155 <= acc_fu_311_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_0_reg_155 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_0_reg_143 <= add_ln18_3_reg_359;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_0_reg_143 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_168 <= i_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_168 <= 5'd10;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_2_reg_346 == 1'd1) & (icmp_ln17_1_reg_337 == 1'd1) & (icmp_ln17_3_fu_256_p2 == 1'd1) & (icmp_ln17_reg_327 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln18_3_reg_359 <= add_ln18_3_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_0_cast_reg_322 <= i_0_0_cast_fu_179_p1;
        icmp_ln17_reg_327 <= icmp_ln17_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_fu_281_p3 == 1'd0))) begin
        i_reg_382 <= i_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln17_1_reg_337 <= icmp_ln17_1_fu_200_p2;
        shift_reg_addr_reg_331 <= zext_ln18_fu_195_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_1_reg_337 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln17_2_reg_346 <= icmp_ln17_2_fu_225_p2;
        shift_reg_addr_4_reg_341 <= zext_ln18_2_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_2_reg_346 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_reg_addr_5_reg_350 <= zext_ln18_3_fu_241_p1;
    end
end

always @ (*) begin
    if (((tmp_fu_281_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_281_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c1_ce0 = 1'b1;
    end else begin
        c1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address0 = zext_ln18_4_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address0 = zext_ln18_3_fu_241_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address0 = zext_ln18_1_fu_206_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_address0 = zext_ln18_fu_195_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shift_reg_address1 = zext_ln25_fu_289_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_address1 = shift_reg_addr_5_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address1 = shift_reg_addr_4_reg_341;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_address1 = shift_reg_addr_reg_331;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_address1 = zext_ln18_2_fu_220_p1;
    end else begin
        shift_reg_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        shift_reg_ce1 = 1'b1;
    end else begin
        shift_reg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_reg_d0 = x;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_d0 = shift_reg_q0;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_d1 = shift_reg_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_d1 = shift_reg_q1;
    end else begin
        shift_reg_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln17_2_reg_346 == 1'd1) & (icmp_ln17_1_reg_337 == 1'd1) & (icmp_ln17_reg_327 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        shift_reg_we1 = 1'b1;
    end else begin
        shift_reg_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_281_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_1_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln17_reg_327 == 1'd0) | ((icmp_ln17_1_reg_337 == 1'd0) | ((icmp_ln17_2_reg_346 == 1'd0) | (icmp_ln17_3_fu_256_p2 == 1'd0)))))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_fu_281_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_311_p2 = (mul_ln25_fu_305_p2 + acc_0_reg_155);

assign add_ln18_1_fu_210_p2 = ($signed(i_0_0_reg_143) + $signed(5'd30));

assign add_ln18_2_fu_231_p2 = ($signed(5'd29) + $signed(i_0_0_reg_143));

assign add_ln18_3_fu_262_p2 = ($signed(i_0_0_reg_143) + $signed(5'd28));

assign add_ln18_4_fu_250_p2 = ($signed(4'd13) + $signed(trunc_ln18_fu_246_p1));

assign add_ln18_fu_189_p2 = ($signed(i_0_0_reg_143) + $signed(5'd31));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c1_address0 = zext_ln25_fu_289_p1;

assign i_0_0_cast_fu_179_p1 = i_0_0_reg_143;

assign i_fu_295_p2 = ($signed(i_1_reg_168) + $signed(5'd31));

assign icmp_ln17_1_fu_200_p2 = (($signed(add_ln18_fu_189_p2) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign icmp_ln17_2_fu_225_p2 = (($signed(add_ln18_1_fu_210_p2) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign icmp_ln17_3_fu_256_p2 = (($signed(add_ln18_4_fu_250_p2) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_183_p2 = (($signed(i_0_0_reg_143) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign mul_ln25_fu_305_p0 = shift_reg_q1;

assign mul_ln25_fu_305_p1 = c1_q0;

assign mul_ln25_fu_305_p2 = ($signed(mul_ln25_fu_305_p0) * $signed(mul_ln25_fu_305_p1));

assign sext_ln18_1_fu_237_p1 = $signed(add_ln18_2_fu_231_p2);

assign sext_ln18_2_fu_268_p1 = add_ln18_3_fu_262_p2;

assign sext_ln18_fu_216_p1 = add_ln18_1_fu_210_p2;

assign sext_ln24_fu_277_p1 = i_1_reg_168;

assign tmp_fu_281_p3 = i_1_reg_168[32'd4];

assign trunc_ln18_fu_246_p1 = i_0_0_reg_143[3:0];

assign y = acc_0_reg_155;

assign zext_ln18_1_fu_206_p1 = $unsigned(i_0_0_cast_reg_322);

assign zext_ln18_2_fu_220_p1 = $unsigned(sext_ln18_fu_216_p1);

assign zext_ln18_3_fu_241_p1 = $unsigned(sext_ln18_1_fu_237_p1);

assign zext_ln18_4_fu_272_p1 = $unsigned(sext_ln18_2_fu_268_p1);

assign zext_ln18_fu_195_p1 = add_ln18_fu_189_p2;

assign zext_ln25_fu_289_p1 = $unsigned(sext_ln24_fu_277_p1);

endmodule //fir
