// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cordic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cordic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cordic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> cordic::ap_ST_fsm_state1 = "1";
const sc_lv<3> cordic::ap_ST_fsm_state2 = "10";
const sc_lv<3> cordic::ap_ST_fsm_state3 = "100";
const sc_lv<32> cordic::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cordic::ap_const_lv32_1 = "1";
const sc_lv<1> cordic::ap_const_lv1_0 = "0";
const sc_lv<32> cordic::ap_const_lv32_2 = "10";
const sc_lv<12> cordic::ap_const_lv12_0 = "000000000000";
const sc_lv<12> cordic::ap_const_lv12_26D = "1001101101";
const sc_lv<6> cordic::ap_const_lv6_0 = "000000";
const sc_lv<1> cordic::ap_const_lv1_1 = "1";
const sc_lv<6> cordic::ap_const_lv6_20 = "100000";
const sc_lv<32> cordic::ap_const_lv32_B = "1011";
const sc_lv<5> cordic::ap_const_lv5_1 = "1";
const sc_lv<6> cordic::ap_const_lv6_2 = "10";
const bool cordic::ap_const_boolean_1 = true;

cordic::cordic(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cordic_phase_V_U = new cordic_cordic_phabkb("cordic_phase_V_U");
    cordic_phase_V_U->clk(ap_clk);
    cordic_phase_V_U->reset(ap_rst);
    cordic_phase_V_U->address0(cordic_phase_V_address0);
    cordic_phase_V_U->ce0(cordic_phase_V_ce0);
    cordic_phase_V_U->q0(cordic_phase_V_q0);
    cordic_phase_V_U->address1(cordic_phase_V_address1);
    cordic_phase_V_U->ce1(cordic_phase_V_ce1);
    cordic_phase_V_U->q1(cordic_phase_V_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln17_fu_224_p2);
    sensitive << ( sh_assign_0_reg_123 );

    SC_METHOD(thread_add_ln703_1_fu_304_p2);
    sensitive << ( select_ln1496_2_fu_246_p3 );
    sensitive << ( zext_ln1265_1_fu_284_p1 );

    SC_METHOD(thread_add_ln703_2_fu_181_p2);
    sensitive << ( p_Val2_0_reg_111 );
    sensitive << ( ashr_ln1333_1_fu_150_p2 );

    SC_METHOD(thread_add_ln703_3_fu_240_p2);
    sensitive << ( theta_V_buf_0_0_reg_89 );
    sensitive << ( zext_ln1265_fu_230_p1 );

    SC_METHOD(thread_add_ln703_4_fu_279_p2);
    sensitive << ( select_ln1496_reg_352 );
    sensitive << ( ashr_ln1333_2_fu_256_p2 );

    SC_METHOD(thread_add_ln703_5_fu_294_p2);
    sensitive << ( select_ln1496_1_reg_359 );
    sensitive << ( ashr_ln1333_3_fu_261_p2 );

    SC_METHOD(thread_add_ln703_fu_170_p2);
    sensitive << ( p_Val2_2_0_reg_99 );
    sensitive << ( ashr_ln1333_fu_144_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_138_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_138_p2 );

    SC_METHOD(thread_ashr_ln1333_1_fu_150_p2);
    sensitive << ( p_Val2_2_0_reg_99 );
    sensitive << ( sh_assign_0_cast2_fu_134_p1 );

    SC_METHOD(thread_ashr_ln1333_2_fu_256_p2);
    sensitive << ( select_ln1496_1_reg_359 );
    sensitive << ( zext_ln17_fu_253_p1 );

    SC_METHOD(thread_ashr_ln1333_3_fu_261_p2);
    sensitive << ( select_ln1496_reg_352 );
    sensitive << ( zext_ln17_fu_253_p1 );

    SC_METHOD(thread_ashr_ln1333_fu_144_p2);
    sensitive << ( p_Val2_0_reg_111 );
    sensitive << ( sh_assign_0_cast2_fu_134_p1 );

    SC_METHOD(thread_c_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_138_p2 );
    sensitive << ( p_Val2_0_reg_111 );

    SC_METHOD(thread_c_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_138_p2 );

    SC_METHOD(thread_cordic_phase_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln30_fu_176_p1 );

    SC_METHOD(thread_cordic_phase_V_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln30_1_fu_219_p1 );

    SC_METHOD(thread_cordic_phase_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_cordic_phase_V_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_empty_2_fu_209_p1);
    sensitive << ( sh_assign_0_reg_123 );

    SC_METHOD(thread_icmp_ln17_fu_138_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sh_assign_0_reg_123 );

    SC_METHOD(thread_or_ln17_fu_213_p2);
    sensitive << ( empty_2_fu_209_p1 );

    SC_METHOD(thread_s_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_138_p2 );
    sensitive << ( p_Val2_2_0_reg_99 );

    SC_METHOD(thread_s_V_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_138_p2 );

    SC_METHOD(thread_select_ln1496_1_fu_201_p3);
    sensitive << ( tmp_fu_156_p3 );
    sensitive << ( add_ln703_2_fu_181_p2 );
    sensitive << ( sub_ln703_fu_164_p2 );

    SC_METHOD(thread_select_ln1496_2_fu_246_p3);
    sensitive << ( tmp_reg_342 );
    sensitive << ( add_ln703_3_fu_240_p2 );
    sensitive << ( sub_ln703_2_fu_234_p2 );

    SC_METHOD(thread_select_ln1496_3_fu_310_p3);
    sensitive << ( tmp_1_fu_266_p3 );
    sensitive << ( sub_ln703_5_fu_299_p2 );
    sensitive << ( add_ln703_4_fu_279_p2 );

    SC_METHOD(thread_select_ln1496_4_fu_318_p3);
    sensitive << ( tmp_1_fu_266_p3 );
    sensitive << ( add_ln703_5_fu_294_p2 );
    sensitive << ( sub_ln703_4_fu_274_p2 );

    SC_METHOD(thread_select_ln1496_5_fu_326_p3);
    sensitive << ( tmp_1_fu_266_p3 );
    sensitive << ( add_ln703_1_fu_304_p2 );
    sensitive << ( sub_ln703_1_fu_288_p2 );

    SC_METHOD(thread_select_ln1496_fu_193_p3);
    sensitive << ( tmp_fu_156_p3 );
    sensitive << ( sub_ln703_3_fu_187_p2 );
    sensitive << ( add_ln703_fu_170_p2 );

    SC_METHOD(thread_sh_assign_0_cast2_fu_134_p1);
    sensitive << ( sh_assign_0_reg_123 );

    SC_METHOD(thread_sub_ln703_1_fu_288_p2);
    sensitive << ( select_ln1496_2_fu_246_p3 );
    sensitive << ( zext_ln1265_1_fu_284_p1 );

    SC_METHOD(thread_sub_ln703_2_fu_234_p2);
    sensitive << ( theta_V_buf_0_0_reg_89 );
    sensitive << ( zext_ln1265_fu_230_p1 );

    SC_METHOD(thread_sub_ln703_3_fu_187_p2);
    sensitive << ( p_Val2_2_0_reg_99 );
    sensitive << ( ashr_ln1333_fu_144_p2 );

    SC_METHOD(thread_sub_ln703_4_fu_274_p2);
    sensitive << ( select_ln1496_1_reg_359 );
    sensitive << ( ashr_ln1333_3_fu_261_p2 );

    SC_METHOD(thread_sub_ln703_5_fu_299_p2);
    sensitive << ( select_ln1496_reg_352 );
    sensitive << ( ashr_ln1333_2_fu_256_p2 );

    SC_METHOD(thread_sub_ln703_fu_164_p2);
    sensitive << ( p_Val2_0_reg_111 );
    sensitive << ( ashr_ln1333_1_fu_150_p2 );

    SC_METHOD(thread_tmp_1_fu_266_p3);
    sensitive << ( select_ln1496_2_fu_246_p3 );

    SC_METHOD(thread_tmp_fu_156_p3);
    sensitive << ( theta_V_buf_0_0_reg_89 );

    SC_METHOD(thread_zext_ln1265_1_fu_284_p1);
    sensitive << ( cordic_phase_V_q1 );

    SC_METHOD(thread_zext_ln1265_fu_230_p1);
    sensitive << ( cordic_phase_V_q0 );

    SC_METHOD(thread_zext_ln17_fu_253_p1);
    sensitive << ( or_ln17_reg_366 );

    SC_METHOD(thread_zext_ln30_1_fu_219_p1);
    sensitive << ( or_ln17_fu_213_p2 );

    SC_METHOD(thread_zext_ln30_fu_176_p1);
    sensitive << ( sh_assign_0_reg_123 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln17_fu_138_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cordic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, theta_V, "(port)theta_V");
    sc_trace(mVcdFile, s_V, "(port)s_V");
    sc_trace(mVcdFile, s_V_ap_vld, "(port)s_V_ap_vld");
    sc_trace(mVcdFile, c_V, "(port)c_V");
    sc_trace(mVcdFile, c_V_ap_vld, "(port)c_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cordic_phase_V_address0, "cordic_phase_V_address0");
    sc_trace(mVcdFile, cordic_phase_V_ce0, "cordic_phase_V_ce0");
    sc_trace(mVcdFile, cordic_phase_V_q0, "cordic_phase_V_q0");
    sc_trace(mVcdFile, cordic_phase_V_address1, "cordic_phase_V_address1");
    sc_trace(mVcdFile, cordic_phase_V_ce1, "cordic_phase_V_ce1");
    sc_trace(mVcdFile, cordic_phase_V_q1, "cordic_phase_V_q1");
    sc_trace(mVcdFile, tmp_fu_156_p3, "tmp_fu_156_p3");
    sc_trace(mVcdFile, tmp_reg_342, "tmp_reg_342");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln17_fu_138_p2, "icmp_ln17_fu_138_p2");
    sc_trace(mVcdFile, select_ln1496_fu_193_p3, "select_ln1496_fu_193_p3");
    sc_trace(mVcdFile, select_ln1496_reg_352, "select_ln1496_reg_352");
    sc_trace(mVcdFile, select_ln1496_1_fu_201_p3, "select_ln1496_1_fu_201_p3");
    sc_trace(mVcdFile, select_ln1496_1_reg_359, "select_ln1496_1_reg_359");
    sc_trace(mVcdFile, or_ln17_fu_213_p2, "or_ln17_fu_213_p2");
    sc_trace(mVcdFile, or_ln17_reg_366, "or_ln17_reg_366");
    sc_trace(mVcdFile, add_ln17_fu_224_p2, "add_ln17_fu_224_p2");
    sc_trace(mVcdFile, add_ln17_reg_376, "add_ln17_reg_376");
    sc_trace(mVcdFile, select_ln1496_3_fu_310_p3, "select_ln1496_3_fu_310_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, select_ln1496_4_fu_318_p3, "select_ln1496_4_fu_318_p3");
    sc_trace(mVcdFile, select_ln1496_5_fu_326_p3, "select_ln1496_5_fu_326_p3");
    sc_trace(mVcdFile, theta_V_buf_0_0_reg_89, "theta_V_buf_0_0_reg_89");
    sc_trace(mVcdFile, p_Val2_2_0_reg_99, "p_Val2_2_0_reg_99");
    sc_trace(mVcdFile, p_Val2_0_reg_111, "p_Val2_0_reg_111");
    sc_trace(mVcdFile, sh_assign_0_reg_123, "sh_assign_0_reg_123");
    sc_trace(mVcdFile, zext_ln30_fu_176_p1, "zext_ln30_fu_176_p1");
    sc_trace(mVcdFile, zext_ln30_1_fu_219_p1, "zext_ln30_1_fu_219_p1");
    sc_trace(mVcdFile, sh_assign_0_cast2_fu_134_p1, "sh_assign_0_cast2_fu_134_p1");
    sc_trace(mVcdFile, ashr_ln1333_1_fu_150_p2, "ashr_ln1333_1_fu_150_p2");
    sc_trace(mVcdFile, ashr_ln1333_fu_144_p2, "ashr_ln1333_fu_144_p2");
    sc_trace(mVcdFile, sub_ln703_3_fu_187_p2, "sub_ln703_3_fu_187_p2");
    sc_trace(mVcdFile, add_ln703_fu_170_p2, "add_ln703_fu_170_p2");
    sc_trace(mVcdFile, add_ln703_2_fu_181_p2, "add_ln703_2_fu_181_p2");
    sc_trace(mVcdFile, sub_ln703_fu_164_p2, "sub_ln703_fu_164_p2");
    sc_trace(mVcdFile, empty_2_fu_209_p1, "empty_2_fu_209_p1");
    sc_trace(mVcdFile, zext_ln1265_fu_230_p1, "zext_ln1265_fu_230_p1");
    sc_trace(mVcdFile, add_ln703_3_fu_240_p2, "add_ln703_3_fu_240_p2");
    sc_trace(mVcdFile, sub_ln703_2_fu_234_p2, "sub_ln703_2_fu_234_p2");
    sc_trace(mVcdFile, zext_ln17_fu_253_p1, "zext_ln17_fu_253_p1");
    sc_trace(mVcdFile, select_ln1496_2_fu_246_p3, "select_ln1496_2_fu_246_p3");
    sc_trace(mVcdFile, ashr_ln1333_3_fu_261_p2, "ashr_ln1333_3_fu_261_p2");
    sc_trace(mVcdFile, ashr_ln1333_2_fu_256_p2, "ashr_ln1333_2_fu_256_p2");
    sc_trace(mVcdFile, zext_ln1265_1_fu_284_p1, "zext_ln1265_1_fu_284_p1");
    sc_trace(mVcdFile, tmp_1_fu_266_p3, "tmp_1_fu_266_p3");
    sc_trace(mVcdFile, sub_ln703_5_fu_299_p2, "sub_ln703_5_fu_299_p2");
    sc_trace(mVcdFile, add_ln703_4_fu_279_p2, "add_ln703_4_fu_279_p2");
    sc_trace(mVcdFile, add_ln703_5_fu_294_p2, "add_ln703_5_fu_294_p2");
    sc_trace(mVcdFile, sub_ln703_4_fu_274_p2, "sub_ln703_4_fu_274_p2");
    sc_trace(mVcdFile, add_ln703_1_fu_304_p2, "add_ln703_1_fu_304_p2");
    sc_trace(mVcdFile, sub_ln703_1_fu_288_p2, "sub_ln703_1_fu_288_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("cordic.hdltvin.dat");
    mHdltvoutHandle.open("cordic.hdltvout.dat");
}

cordic::~cordic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cordic_phase_V_U;
}

void cordic::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_Val2_0_reg_111 = select_ln1496_4_fu_318_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_0_reg_111 = ap_const_lv12_26D;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_Val2_2_0_reg_99 = select_ln1496_3_fu_310_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_2_0_reg_99 = ap_const_lv12_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sh_assign_0_reg_123 = add_ln17_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sh_assign_0_reg_123 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        theta_V_buf_0_0_reg_89 = select_ln1496_5_fu_326_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        theta_V_buf_0_0_reg_89 = theta_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_138_p2.read(), ap_const_lv1_0))) {
        add_ln17_reg_376 = add_ln17_fu_224_p2.read();
        or_ln17_reg_366 = or_ln17_fu_213_p2.read();
        select_ln1496_1_reg_359 = select_ln1496_1_fu_201_p3.read();
        select_ln1496_reg_352 = select_ln1496_fu_193_p3.read();
        tmp_reg_342 = theta_V_buf_0_0_reg_89.read().range(11, 11);
    }
}

void cordic::thread_add_ln17_fu_224_p2() {
    add_ln17_fu_224_p2 = (!ap_const_lv6_2.is_01() || !sh_assign_0_reg_123.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_2) + sc_biguint<6>(sh_assign_0_reg_123.read()));
}

void cordic::thread_add_ln703_1_fu_304_p2() {
    add_ln703_1_fu_304_p2 = (!select_ln1496_2_fu_246_p3.read().is_01() || !zext_ln1265_1_fu_284_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(select_ln1496_2_fu_246_p3.read()) + sc_biguint<12>(zext_ln1265_1_fu_284_p1.read()));
}

void cordic::thread_add_ln703_2_fu_181_p2() {
    add_ln703_2_fu_181_p2 = (!p_Val2_0_reg_111.read().is_01() || !ashr_ln1333_1_fu_150_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_Val2_0_reg_111.read()) + sc_biguint<12>(ashr_ln1333_1_fu_150_p2.read()));
}

void cordic::thread_add_ln703_3_fu_240_p2() {
    add_ln703_3_fu_240_p2 = (!theta_V_buf_0_0_reg_89.read().is_01() || !zext_ln1265_fu_230_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(theta_V_buf_0_0_reg_89.read()) + sc_biguint<12>(zext_ln1265_fu_230_p1.read()));
}

void cordic::thread_add_ln703_4_fu_279_p2() {
    add_ln703_4_fu_279_p2 = (!select_ln1496_reg_352.read().is_01() || !ashr_ln1333_2_fu_256_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(select_ln1496_reg_352.read()) + sc_biguint<12>(ashr_ln1333_2_fu_256_p2.read()));
}

void cordic::thread_add_ln703_5_fu_294_p2() {
    add_ln703_5_fu_294_p2 = (!select_ln1496_1_reg_359.read().is_01() || !ashr_ln1333_3_fu_261_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(select_ln1496_1_reg_359.read()) + sc_biguint<12>(ashr_ln1333_3_fu_261_p2.read()));
}

void cordic::thread_add_ln703_fu_170_p2() {
    add_ln703_fu_170_p2 = (!p_Val2_2_0_reg_99.read().is_01() || !ashr_ln1333_fu_144_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_Val2_2_0_reg_99.read()) + sc_biguint<12>(ashr_ln1333_fu_144_p2.read()));
}

void cordic::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cordic::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cordic::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cordic::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_138_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cordic::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cordic::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_138_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cordic::thread_ashr_ln1333_1_fu_150_p2() {
    ashr_ln1333_1_fu_150_p2 = (!p_Val2_2_0_reg_99.read().is_01() || !sh_assign_0_cast2_fu_134_p1.read().is_01())? sc_lv<12>(): sc_bigint<12>(p_Val2_2_0_reg_99.read()) >> (unsigned short)sh_assign_0_cast2_fu_134_p1.read().to_uint();
}

void cordic::thread_ashr_ln1333_2_fu_256_p2() {
    ashr_ln1333_2_fu_256_p2 = (!select_ln1496_1_reg_359.read().is_01() || !zext_ln17_fu_253_p1.read().is_01())? sc_lv<12>(): sc_bigint<12>(select_ln1496_1_reg_359.read()) >> (unsigned short)zext_ln17_fu_253_p1.read().to_uint();
}

void cordic::thread_ashr_ln1333_3_fu_261_p2() {
    ashr_ln1333_3_fu_261_p2 = (!select_ln1496_reg_352.read().is_01() || !zext_ln17_fu_253_p1.read().is_01())? sc_lv<12>(): sc_bigint<12>(select_ln1496_reg_352.read()) >> (unsigned short)zext_ln17_fu_253_p1.read().to_uint();
}

void cordic::thread_ashr_ln1333_fu_144_p2() {
    ashr_ln1333_fu_144_p2 = (!p_Val2_0_reg_111.read().is_01() || !sh_assign_0_cast2_fu_134_p1.read().is_01())? sc_lv<12>(): sc_bigint<12>(p_Val2_0_reg_111.read()) >> (unsigned short)sh_assign_0_cast2_fu_134_p1.read().to_uint();
}

void cordic::thread_c_V() {
    c_V = p_Val2_0_reg_111.read();
}

void cordic::thread_c_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_138_p2.read(), ap_const_lv1_1))) {
        c_V_ap_vld = ap_const_logic_1;
    } else {
        c_V_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_cordic_phase_V_address0() {
    cordic_phase_V_address0 =  (sc_lv<6>) (zext_ln30_fu_176_p1.read());
}

void cordic::thread_cordic_phase_V_address1() {
    cordic_phase_V_address1 =  (sc_lv<6>) (zext_ln30_1_fu_219_p1.read());
}

void cordic::thread_cordic_phase_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cordic_phase_V_ce0 = ap_const_logic_1;
    } else {
        cordic_phase_V_ce0 = ap_const_logic_0;
    }
}

void cordic::thread_cordic_phase_V_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cordic_phase_V_ce1 = ap_const_logic_1;
    } else {
        cordic_phase_V_ce1 = ap_const_logic_0;
    }
}

void cordic::thread_empty_2_fu_209_p1() {
    empty_2_fu_209_p1 = sh_assign_0_reg_123.read().range(5-1, 0);
}

void cordic::thread_icmp_ln17_fu_138_p2() {
    icmp_ln17_fu_138_p2 = (!sh_assign_0_reg_123.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(sh_assign_0_reg_123.read() == ap_const_lv6_20);
}

void cordic::thread_or_ln17_fu_213_p2() {
    or_ln17_fu_213_p2 = (empty_2_fu_209_p1.read() | ap_const_lv5_1);
}

void cordic::thread_s_V() {
    s_V = p_Val2_2_0_reg_99.read();
}

void cordic::thread_s_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_138_p2.read(), ap_const_lv1_1))) {
        s_V_ap_vld = ap_const_logic_1;
    } else {
        s_V_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_select_ln1496_1_fu_201_p3() {
    select_ln1496_1_fu_201_p3 = (!tmp_fu_156_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_fu_156_p3.read()[0].to_bool())? add_ln703_2_fu_181_p2.read(): sub_ln703_fu_164_p2.read());
}

void cordic::thread_select_ln1496_2_fu_246_p3() {
    select_ln1496_2_fu_246_p3 = (!tmp_reg_342.read()[0].is_01())? sc_lv<12>(): ((tmp_reg_342.read()[0].to_bool())? add_ln703_3_fu_240_p2.read(): sub_ln703_2_fu_234_p2.read());
}

void cordic::thread_select_ln1496_3_fu_310_p3() {
    select_ln1496_3_fu_310_p3 = (!tmp_1_fu_266_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_1_fu_266_p3.read()[0].to_bool())? sub_ln703_5_fu_299_p2.read(): add_ln703_4_fu_279_p2.read());
}

void cordic::thread_select_ln1496_4_fu_318_p3() {
    select_ln1496_4_fu_318_p3 = (!tmp_1_fu_266_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_1_fu_266_p3.read()[0].to_bool())? add_ln703_5_fu_294_p2.read(): sub_ln703_4_fu_274_p2.read());
}

void cordic::thread_select_ln1496_5_fu_326_p3() {
    select_ln1496_5_fu_326_p3 = (!tmp_1_fu_266_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_1_fu_266_p3.read()[0].to_bool())? add_ln703_1_fu_304_p2.read(): sub_ln703_1_fu_288_p2.read());
}

void cordic::thread_select_ln1496_fu_193_p3() {
    select_ln1496_fu_193_p3 = (!tmp_fu_156_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_fu_156_p3.read()[0].to_bool())? sub_ln703_3_fu_187_p2.read(): add_ln703_fu_170_p2.read());
}

void cordic::thread_sh_assign_0_cast2_fu_134_p1() {
    sh_assign_0_cast2_fu_134_p1 = esl_zext<12,6>(sh_assign_0_reg_123.read());
}

void cordic::thread_sub_ln703_1_fu_288_p2() {
    sub_ln703_1_fu_288_p2 = (!select_ln1496_2_fu_246_p3.read().is_01() || !zext_ln1265_1_fu_284_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(select_ln1496_2_fu_246_p3.read()) - sc_biguint<12>(zext_ln1265_1_fu_284_p1.read()));
}

void cordic::thread_sub_ln703_2_fu_234_p2() {
    sub_ln703_2_fu_234_p2 = (!theta_V_buf_0_0_reg_89.read().is_01() || !zext_ln1265_fu_230_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(theta_V_buf_0_0_reg_89.read()) - sc_biguint<12>(zext_ln1265_fu_230_p1.read()));
}

void cordic::thread_sub_ln703_3_fu_187_p2() {
    sub_ln703_3_fu_187_p2 = (!p_Val2_2_0_reg_99.read().is_01() || !ashr_ln1333_fu_144_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_Val2_2_0_reg_99.read()) - sc_biguint<12>(ashr_ln1333_fu_144_p2.read()));
}

void cordic::thread_sub_ln703_4_fu_274_p2() {
    sub_ln703_4_fu_274_p2 = (!select_ln1496_1_reg_359.read().is_01() || !ashr_ln1333_3_fu_261_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(select_ln1496_1_reg_359.read()) - sc_biguint<12>(ashr_ln1333_3_fu_261_p2.read()));
}

void cordic::thread_sub_ln703_5_fu_299_p2() {
    sub_ln703_5_fu_299_p2 = (!select_ln1496_reg_352.read().is_01() || !ashr_ln1333_2_fu_256_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(select_ln1496_reg_352.read()) - sc_biguint<12>(ashr_ln1333_2_fu_256_p2.read()));
}

void cordic::thread_sub_ln703_fu_164_p2() {
    sub_ln703_fu_164_p2 = (!p_Val2_0_reg_111.read().is_01() || !ashr_ln1333_1_fu_150_p2.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_Val2_0_reg_111.read()) - sc_biguint<12>(ashr_ln1333_1_fu_150_p2.read()));
}

void cordic::thread_tmp_1_fu_266_p3() {
    tmp_1_fu_266_p3 = select_ln1496_2_fu_246_p3.read().range(11, 11);
}

void cordic::thread_tmp_fu_156_p3() {
    tmp_fu_156_p3 = theta_V_buf_0_0_reg_89.read().range(11, 11);
}

void cordic::thread_zext_ln1265_1_fu_284_p1() {
    zext_ln1265_1_fu_284_p1 = esl_zext<12,10>(cordic_phase_V_q1.read());
}

void cordic::thread_zext_ln1265_fu_230_p1() {
    zext_ln1265_fu_230_p1 = esl_zext<12,10>(cordic_phase_V_q0.read());
}

void cordic::thread_zext_ln17_fu_253_p1() {
    zext_ln17_fu_253_p1 = esl_zext<12,5>(or_ln17_reg_366.read());
}

void cordic::thread_zext_ln30_1_fu_219_p1() {
    zext_ln30_1_fu_219_p1 = esl_zext<64,5>(or_ln17_fu_213_p2.read());
}

void cordic::thread_zext_ln30_fu_176_p1() {
    zext_ln30_fu_176_p1 = esl_zext<64,6>(sh_assign_0_reg_123.read());
}

void cordic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_138_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void cordic::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"theta_V\" :  \"" << theta_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_V\" :  \"" << s_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_V_ap_vld\" :  \"" << s_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V\" :  \"" << c_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_ap_vld\" :  \"" << c_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

