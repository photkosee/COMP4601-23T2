// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.137000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=100,HLS_SYN_LUT=502,HLS_VERSION=2020_1}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta_V,
        s_V,
        s_V_ap_vld,
        c_V,
        c_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] theta_V;
output  [11:0] s_V;
output   s_V_ap_vld;
output  [11:0] c_V;
output   c_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_V_ap_vld;
reg c_V_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] cordic_phase_V_address0;
reg    cordic_phase_V_ce0;
wire   [9:0] cordic_phase_V_q0;
wire   [5:0] cordic_phase_V_address1;
reg    cordic_phase_V_ce1;
wire   [9:0] cordic_phase_V_q1;
wire   [0:0] tmp_fu_156_p3;
reg   [0:0] tmp_reg_342;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_138_p2;
wire   [11:0] select_ln1496_fu_193_p3;
reg   [11:0] select_ln1496_reg_352;
wire   [11:0] select_ln1496_1_fu_201_p3;
reg   [11:0] select_ln1496_1_reg_359;
wire   [4:0] or_ln17_fu_213_p2;
reg   [4:0] or_ln17_reg_366;
wire   [5:0] add_ln17_fu_224_p2;
reg   [5:0] add_ln17_reg_376;
wire   [11:0] select_ln1496_3_fu_310_p3;
wire    ap_CS_fsm_state3;
wire   [11:0] select_ln1496_4_fu_318_p3;
wire   [11:0] select_ln1496_5_fu_326_p3;
reg   [11:0] theta_V_buf_0_0_reg_89;
reg   [11:0] p_Val2_2_0_reg_99;
reg   [11:0] p_Val2_0_reg_111;
reg   [5:0] sh_assign_0_reg_123;
wire   [63:0] zext_ln30_fu_176_p1;
wire   [63:0] zext_ln30_1_fu_219_p1;
wire   [11:0] sh_assign_0_cast2_fu_134_p1;
wire   [11:0] ashr_ln1333_1_fu_150_p2;
wire   [11:0] ashr_ln1333_fu_144_p2;
wire   [11:0] sub_ln703_3_fu_187_p2;
wire   [11:0] add_ln703_fu_170_p2;
wire   [11:0] add_ln703_2_fu_181_p2;
wire   [11:0] sub_ln703_fu_164_p2;
wire   [4:0] empty_2_fu_209_p1;
wire   [11:0] zext_ln1265_fu_230_p1;
wire   [11:0] add_ln703_3_fu_240_p2;
wire   [11:0] sub_ln703_2_fu_234_p2;
wire   [11:0] zext_ln17_fu_253_p1;
wire   [11:0] select_ln1496_2_fu_246_p3;
wire   [11:0] ashr_ln1333_3_fu_261_p2;
wire   [11:0] ashr_ln1333_2_fu_256_p2;
wire   [11:0] zext_ln1265_1_fu_284_p1;
wire   [0:0] tmp_1_fu_266_p3;
wire   [11:0] sub_ln703_5_fu_299_p2;
wire   [11:0] add_ln703_4_fu_279_p2;
wire   [11:0] add_ln703_5_fu_294_p2;
wire   [11:0] sub_ln703_4_fu_274_p2;
wire   [11:0] add_ln703_1_fu_304_p2;
wire   [11:0] sub_ln703_1_fu_288_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

cordic_cordic_phabkb #(
    .DataWidth( 10 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_phase_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_phase_V_address0),
    .ce0(cordic_phase_V_ce0),
    .q0(cordic_phase_V_q0),
    .address1(cordic_phase_V_address1),
    .ce1(cordic_phase_V_ce1),
    .q1(cordic_phase_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_0_reg_111 <= select_ln1496_4_fu_318_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_0_reg_111 <= 12'd621;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_2_0_reg_99 <= select_ln1496_3_fu_310_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_2_0_reg_99 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sh_assign_0_reg_123 <= add_ln17_reg_376;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sh_assign_0_reg_123 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        theta_V_buf_0_0_reg_89 <= select_ln1496_5_fu_326_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        theta_V_buf_0_0_reg_89 <= theta_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln17_reg_376 <= add_ln17_fu_224_p2;
        or_ln17_reg_366[4 : 1] <= or_ln17_fu_213_p2[4 : 1];
        select_ln1496_1_reg_359 <= select_ln1496_1_fu_201_p3;
        select_ln1496_reg_352 <= select_ln1496_fu_193_p3;
        tmp_reg_342 <= theta_V_buf_0_0_reg_89[32'd11];
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_V_ap_vld = 1'b1;
    end else begin
        c_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_ce0 = 1'b1;
    end else begin
        cordic_phase_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_ce1 = 1'b1;
    end else begin
        cordic_phase_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_V_ap_vld = 1'b1;
    end else begin
        s_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_224_p2 = (6'd2 + sh_assign_0_reg_123);

assign add_ln703_1_fu_304_p2 = (select_ln1496_2_fu_246_p3 + zext_ln1265_1_fu_284_p1);

assign add_ln703_2_fu_181_p2 = (p_Val2_0_reg_111 + ashr_ln1333_1_fu_150_p2);

assign add_ln703_3_fu_240_p2 = (theta_V_buf_0_0_reg_89 + zext_ln1265_fu_230_p1);

assign add_ln703_4_fu_279_p2 = (select_ln1496_reg_352 + ashr_ln1333_2_fu_256_p2);

assign add_ln703_5_fu_294_p2 = (select_ln1496_1_reg_359 + ashr_ln1333_3_fu_261_p2);

assign add_ln703_fu_170_p2 = (p_Val2_2_0_reg_99 + ashr_ln1333_fu_144_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ashr_ln1333_1_fu_150_p2 = $signed(p_Val2_2_0_reg_99) >>> sh_assign_0_cast2_fu_134_p1;

assign ashr_ln1333_2_fu_256_p2 = $signed(select_ln1496_1_reg_359) >>> zext_ln17_fu_253_p1;

assign ashr_ln1333_3_fu_261_p2 = $signed(select_ln1496_reg_352) >>> zext_ln17_fu_253_p1;

assign ashr_ln1333_fu_144_p2 = $signed(p_Val2_0_reg_111) >>> sh_assign_0_cast2_fu_134_p1;

assign c_V = p_Val2_0_reg_111;

assign cordic_phase_V_address0 = zext_ln30_fu_176_p1;

assign cordic_phase_V_address1 = zext_ln30_1_fu_219_p1;

assign empty_2_fu_209_p1 = sh_assign_0_reg_123[4:0];

assign icmp_ln17_fu_138_p2 = ((sh_assign_0_reg_123 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln17_fu_213_p2 = (empty_2_fu_209_p1 | 5'd1);

assign s_V = p_Val2_2_0_reg_99;

assign select_ln1496_1_fu_201_p3 = ((tmp_fu_156_p3[0:0] === 1'b1) ? add_ln703_2_fu_181_p2 : sub_ln703_fu_164_p2);

assign select_ln1496_2_fu_246_p3 = ((tmp_reg_342[0:0] === 1'b1) ? add_ln703_3_fu_240_p2 : sub_ln703_2_fu_234_p2);

assign select_ln1496_3_fu_310_p3 = ((tmp_1_fu_266_p3[0:0] === 1'b1) ? sub_ln703_5_fu_299_p2 : add_ln703_4_fu_279_p2);

assign select_ln1496_4_fu_318_p3 = ((tmp_1_fu_266_p3[0:0] === 1'b1) ? add_ln703_5_fu_294_p2 : sub_ln703_4_fu_274_p2);

assign select_ln1496_5_fu_326_p3 = ((tmp_1_fu_266_p3[0:0] === 1'b1) ? add_ln703_1_fu_304_p2 : sub_ln703_1_fu_288_p2);

assign select_ln1496_fu_193_p3 = ((tmp_fu_156_p3[0:0] === 1'b1) ? sub_ln703_3_fu_187_p2 : add_ln703_fu_170_p2);

assign sh_assign_0_cast2_fu_134_p1 = sh_assign_0_reg_123;

assign sub_ln703_1_fu_288_p2 = (select_ln1496_2_fu_246_p3 - zext_ln1265_1_fu_284_p1);

assign sub_ln703_2_fu_234_p2 = (theta_V_buf_0_0_reg_89 - zext_ln1265_fu_230_p1);

assign sub_ln703_3_fu_187_p2 = (p_Val2_2_0_reg_99 - ashr_ln1333_fu_144_p2);

assign sub_ln703_4_fu_274_p2 = (select_ln1496_1_reg_359 - ashr_ln1333_3_fu_261_p2);

assign sub_ln703_5_fu_299_p2 = (select_ln1496_reg_352 - ashr_ln1333_2_fu_256_p2);

assign sub_ln703_fu_164_p2 = (p_Val2_0_reg_111 - ashr_ln1333_1_fu_150_p2);

assign tmp_1_fu_266_p3 = select_ln1496_2_fu_246_p3[32'd11];

assign tmp_fu_156_p3 = theta_V_buf_0_0_reg_89[32'd11];

assign zext_ln1265_1_fu_284_p1 = cordic_phase_V_q1;

assign zext_ln1265_fu_230_p1 = cordic_phase_V_q0;

assign zext_ln17_fu_253_p1 = or_ln17_reg_366;

assign zext_ln30_1_fu_219_p1 = or_ln17_fu_213_p2;

assign zext_ln30_fu_176_p1 = sh_assign_0_reg_123;

always @ (posedge ap_clk) begin
    or_ln17_reg_366[0] <= 1'b1;
end

endmodule //cordic
