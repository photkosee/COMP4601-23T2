-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_V : IN STD_LOGIC_VECTOR (11 downto 0);
    s_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_V_ap_vld : OUT STD_LOGIC;
    c_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    c_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.314500,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=227,HLS_SYN_LUT=1801,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_26D : STD_LOGIC_VECTOR (11 downto 0) := "001001101101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_phase_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce0 : STD_LOGIC;
    signal cordic_phase_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cordic_phase_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce1 : STD_LOGIC;
    signal cordic_phase_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cordic_phase_V_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce2 : STD_LOGIC;
    signal cordic_phase_V_q2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cordic_phase_V_address3 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce3 : STD_LOGIC;
    signal cordic_phase_V_q3 : STD_LOGIC_VECTOR (9 downto 0);
    signal cordic_phase_V_address4 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce4 : STD_LOGIC;
    signal cordic_phase_V_q4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_228_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln17_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1496_fu_265_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_reg_991 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_1_fu_273_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_1_reg_998 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_2_fu_281_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_2_reg_1005 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_fu_285_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_reg_1014 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_1_fu_296_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_1_reg_1024 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln17_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln17_reg_1034 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1496_8_fu_496_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_8_reg_1039 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_525_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1045 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1496_9_fu_562_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_9_reg_1055 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_10_fu_570_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_10_reg_1062 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln17_3_fu_578_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_3_reg_1069 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_4_fu_588_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_4_reg_1079 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_5_fu_598_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_5_reg_1089 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_6_fu_608_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_6_reg_1099 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1496_18_fu_870_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_18_reg_1109 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln1496_19_fu_878_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_19_reg_1116 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1496_23_fu_918_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_23_reg_1129 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_21_fu_959_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln1496_22_fu_966_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal theta_V_buf_0_0_reg_161 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_2_0_reg_171 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_0_reg_183 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_0_reg_195 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_2_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_3_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_4_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_5_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_6_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_7_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_assign_0_cast8_fu_206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_1_fu_222_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_fu_216_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_9_fu_259_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_fu_242_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_8_fu_253_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_fu_236_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_fu_313_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_9_fu_323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_8_fu_317_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_fu_336_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_2_fu_329_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_9_fu_344_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_8_fu_339_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_1_fu_367_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_11_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_10_fu_362_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_11_fu_377_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_10_fu_357_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_1_fu_387_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_1_fu_371_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_4_fu_401_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_1_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_3_fu_393_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_5_fu_409_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_10_fu_426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_2_fu_420_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_2_fu_452_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_432_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_13_fu_468_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_12_fu_446_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_13_fu_462_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_12_fu_440_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_2_fu_474_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_2_fu_456_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln17_2_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1496_7_fu_488_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_2_fu_509_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_6_fu_480_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_11_fu_519_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_3_fu_513_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_15_fu_556_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_14_fu_539_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_15_fu_550_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_14_fu_533_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_3_fu_618_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_3_fu_627_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_3_fu_622_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_3_fu_639_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_11_fu_632_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_12_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_4_fu_642_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_4_fu_670_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_17_fu_685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_16_fu_665_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_17_fu_680_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_16_fu_660_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_4_fu_690_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_4_fu_674_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_13_fu_704_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_4_fu_720_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_12_fu_696_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_14_fu_712_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_13_fu_729_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_5_fu_723_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_5_fu_755_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_735_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_19_fu_771_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_18_fu_749_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_19_fu_765_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_18_fu_743_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_5_fu_777_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_5_fu_759_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_16_fu_791_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_5_fu_807_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_15_fu_783_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_17_fu_799_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_14_fu_816_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_6_fu_810_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_6_fu_842_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_21_fu_858_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_20_fu_836_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_21_fu_852_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_20_fu_830_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_6_fu_864_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_6_fu_846_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_20_fu_886_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_7_fu_902_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_7_fu_912_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_7_fu_906_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_6_fu_926_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_15_fu_934_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_7_fu_929_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_23_fu_954_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_22_fu_944_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_23_fu_949_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_22_fu_939_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component cordic_cordic_phabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address4 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    cordic_phase_V_U : component cordic_cordic_phabkb
    generic map (
        DataWidth => 10,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_phase_V_address0,
        ce0 => cordic_phase_V_ce0,
        q0 => cordic_phase_V_q0,
        address1 => cordic_phase_V_address1,
        ce1 => cordic_phase_V_ce1,
        q1 => cordic_phase_V_q1,
        address2 => cordic_phase_V_address2,
        ce2 => cordic_phase_V_ce2,
        q2 => cordic_phase_V_q2,
        address3 => cordic_phase_V_address3,
        ce3 => cordic_phase_V_ce3,
        q3 => cordic_phase_V_q3,
        address4 => cordic_phase_V_address4,
        ce4 => cordic_phase_V_ce4,
        q4 => cordic_phase_V_q4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Val2_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_0_reg_183 <= select_ln1496_22_fu_966_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_0_reg_183 <= ap_const_lv12_26D;
            end if; 
        end if;
    end process;

    p_Val2_2_0_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_2_0_reg_171 <= select_ln1496_21_fu_959_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_2_0_reg_171 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    sh_assign_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sh_assign_0_reg_195 <= add_ln17_reg_1034;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sh_assign_0_reg_195 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    theta_V_buf_0_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                theta_V_buf_0_0_reg_161 <= select_ln1496_23_reg_1129;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                theta_V_buf_0_0_reg_161 <= theta_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln17_reg_1034 <= add_ln17_fu_307_p2;
                empty_2_reg_1005 <= empty_2_fu_281_p1;
                    or_ln17_1_reg_1024(0) <= or_ln17_1_fu_296_p2(0);    or_ln17_1_reg_1024(4 downto 2) <= or_ln17_1_fu_296_p2(4 downto 2);
                    or_ln17_reg_1014(4 downto 1) <= or_ln17_fu_285_p2(4 downto 1);
                select_ln1496_1_reg_998 <= select_ln1496_1_fu_273_p3;
                select_ln1496_reg_991 <= select_ln1496_fu_265_p3;
                tmp_reg_981 <= theta_V_buf_0_0_reg_161(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    or_ln17_3_reg_1069(1 downto 0) <= or_ln17_3_fu_578_p2(1 downto 0);    or_ln17_3_reg_1069(4 downto 3) <= or_ln17_3_fu_578_p2(4 downto 3);
                    or_ln17_4_reg_1079(1) <= or_ln17_4_fu_588_p2(1);    or_ln17_4_reg_1079(4 downto 3) <= or_ln17_4_fu_588_p2(4 downto 3);
                    or_ln17_5_reg_1089(0) <= or_ln17_5_fu_598_p2(0);    or_ln17_5_reg_1089(4 downto 3) <= or_ln17_5_fu_598_p2(4 downto 3);
                    or_ln17_6_reg_1099(4 downto 3) <= or_ln17_6_fu_608_p2(4 downto 3);
                select_ln1496_10_reg_1062 <= select_ln1496_10_fu_570_p3;
                select_ln1496_8_reg_1039 <= select_ln1496_8_fu_496_p3;
                select_ln1496_9_reg_1055 <= select_ln1496_9_fu_562_p3;
                tmp_3_reg_1045 <= select_ln1496_8_fu_496_p3(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln1496_18_reg_1109 <= select_ln1496_18_fu_870_p3;
                select_ln1496_19_reg_1116 <= select_ln1496_19_fu_878_p3;
                select_ln1496_23_reg_1129 <= select_ln1496_23_fu_918_p3;
                tmp_7_reg_1123 <= select_ln1496_20_fu_886_p3(11 downto 11);
            end if;
        end if;
    end process;
    or_ln17_reg_1014(0) <= '1';
    or_ln17_1_reg_1024(1) <= '1';
    or_ln17_3_reg_1069(2) <= '1';
    or_ln17_4_reg_1079(0) <= '1';
    or_ln17_4_reg_1079(2) <= '1';
    or_ln17_5_reg_1089(2 downto 1) <= "11";
    or_ln17_6_reg_1099(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_210_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln17_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv6_8) + unsigned(sh_assign_0_reg_195));
    add_ln703_10_fu_362_p2 <= std_logic_vector(unsigned(select_ln1496_reg_991) + unsigned(ashr_ln1333_8_fu_339_p2));
    add_ln703_11_fu_377_p2 <= std_logic_vector(unsigned(select_ln1496_1_reg_998) + unsigned(ashr_ln1333_9_fu_344_p2));
    add_ln703_12_fu_446_p2 <= std_logic_vector(unsigned(select_ln1496_3_fu_393_p3) + unsigned(ashr_ln1333_2_fu_420_p2));
    add_ln703_13_fu_462_p2 <= std_logic_vector(unsigned(select_ln1496_4_fu_401_p3) + unsigned(ashr_ln1333_10_fu_426_p2));
    add_ln703_14_fu_539_p2 <= std_logic_vector(unsigned(select_ln1496_6_fu_480_p3) + unsigned(ashr_ln1333_3_fu_513_p2));
    add_ln703_15_fu_550_p2 <= std_logic_vector(unsigned(select_ln1496_7_fu_488_p3) + unsigned(ashr_ln1333_11_fu_519_p2));
    add_ln703_16_fu_665_p2 <= std_logic_vector(unsigned(select_ln1496_9_reg_1055) + unsigned(ashr_ln1333_4_fu_642_p2));
    add_ln703_17_fu_680_p2 <= std_logic_vector(unsigned(select_ln1496_10_reg_1062) + unsigned(ashr_ln1333_12_fu_647_p2));
    add_ln703_18_fu_749_p2 <= std_logic_vector(unsigned(select_ln1496_12_fu_696_p3) + unsigned(ashr_ln1333_5_fu_723_p2));
    add_ln703_19_fu_765_p2 <= std_logic_vector(unsigned(select_ln1496_13_fu_704_p3) + unsigned(ashr_ln1333_13_fu_729_p2));
    add_ln703_1_fu_387_p2 <= std_logic_vector(unsigned(select_ln1496_2_fu_329_p3) + unsigned(zext_ln1265_1_fu_367_p1));
    add_ln703_20_fu_836_p2 <= std_logic_vector(unsigned(select_ln1496_15_fu_783_p3) + unsigned(ashr_ln1333_6_fu_810_p2));
    add_ln703_21_fu_852_p2 <= std_logic_vector(unsigned(select_ln1496_16_fu_791_p3) + unsigned(ashr_ln1333_14_fu_816_p2));
    add_ln703_22_fu_944_p2 <= std_logic_vector(unsigned(select_ln1496_18_reg_1109) + unsigned(ashr_ln1333_7_fu_929_p2));
    add_ln703_23_fu_949_p2 <= std_logic_vector(unsigned(select_ln1496_19_reg_1116) + unsigned(ashr_ln1333_15_fu_934_p2));
    add_ln703_2_fu_474_p2 <= std_logic_vector(unsigned(select_ln1496_5_fu_409_p3) + unsigned(zext_ln1265_2_fu_452_p1));
    add_ln703_3_fu_627_p2 <= std_logic_vector(unsigned(select_ln1496_8_reg_1039) + unsigned(zext_ln1265_3_fu_618_p1));
    add_ln703_4_fu_690_p2 <= std_logic_vector(unsigned(select_ln1496_11_fu_632_p3) + unsigned(zext_ln1265_4_fu_670_p1));
    add_ln703_5_fu_777_p2 <= std_logic_vector(unsigned(select_ln1496_14_fu_712_p3) + unsigned(zext_ln1265_5_fu_755_p1));
    add_ln703_6_fu_864_p2 <= std_logic_vector(unsigned(select_ln1496_17_fu_799_p3) + unsigned(zext_ln1265_6_fu_842_p1));
    add_ln703_7_fu_912_p2 <= std_logic_vector(unsigned(select_ln1496_20_fu_886_p3) + unsigned(zext_ln1265_7_fu_902_p1));
    add_ln703_8_fu_253_p2 <= std_logic_vector(unsigned(p_Val2_0_reg_183) + unsigned(ashr_ln1333_1_fu_222_p2));
    add_ln703_9_fu_323_p2 <= std_logic_vector(unsigned(theta_V_buf_0_0_reg_161) + unsigned(zext_ln1265_fu_313_p1));
    add_ln703_fu_242_p2 <= std_logic_vector(unsigned(p_Val2_2_0_reg_171) + unsigned(ashr_ln1333_fu_216_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_210_p2)
    begin
        if (((icmp_ln17_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_210_p2)
    begin
        if (((icmp_ln17_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln1333_10_fu_426_p2 <= std_logic_vector(shift_right(signed(select_ln1496_3_fu_393_p3),to_integer(unsigned('0' & zext_ln17_1_fu_417_p1(12-1 downto 0)))));
    ashr_ln1333_11_fu_519_p2 <= std_logic_vector(shift_right(signed(select_ln1496_6_fu_480_p3),to_integer(unsigned('0' & zext_ln17_2_fu_509_p1(12-1 downto 0)))));
    ashr_ln1333_12_fu_647_p2 <= std_logic_vector(shift_right(signed(select_ln1496_9_reg_1055),to_integer(unsigned('0' & zext_ln17_3_fu_639_p1(12-1 downto 0)))));
    ashr_ln1333_13_fu_729_p2 <= std_logic_vector(shift_right(signed(select_ln1496_12_fu_696_p3),to_integer(unsigned('0' & zext_ln17_4_fu_720_p1(12-1 downto 0)))));
    ashr_ln1333_14_fu_816_p2 <= std_logic_vector(shift_right(signed(select_ln1496_15_fu_783_p3),to_integer(unsigned('0' & zext_ln17_5_fu_807_p1(12-1 downto 0)))));
    ashr_ln1333_15_fu_934_p2 <= std_logic_vector(shift_right(signed(select_ln1496_18_reg_1109),to_integer(unsigned('0' & zext_ln17_6_fu_926_p1(12-1 downto 0)))));
    ashr_ln1333_1_fu_222_p2 <= std_logic_vector(shift_right(signed(p_Val2_2_0_reg_171),to_integer(unsigned('0' & sh_assign_0_cast8_fu_206_p1(12-1 downto 0)))));
    ashr_ln1333_2_fu_420_p2 <= std_logic_vector(shift_right(signed(select_ln1496_4_fu_401_p3),to_integer(unsigned('0' & zext_ln17_1_fu_417_p1(12-1 downto 0)))));
    ashr_ln1333_3_fu_513_p2 <= std_logic_vector(shift_right(signed(select_ln1496_7_fu_488_p3),to_integer(unsigned('0' & zext_ln17_2_fu_509_p1(12-1 downto 0)))));
    ashr_ln1333_4_fu_642_p2 <= std_logic_vector(shift_right(signed(select_ln1496_10_reg_1062),to_integer(unsigned('0' & zext_ln17_3_fu_639_p1(12-1 downto 0)))));
    ashr_ln1333_5_fu_723_p2 <= std_logic_vector(shift_right(signed(select_ln1496_13_fu_704_p3),to_integer(unsigned('0' & zext_ln17_4_fu_720_p1(12-1 downto 0)))));
    ashr_ln1333_6_fu_810_p2 <= std_logic_vector(shift_right(signed(select_ln1496_16_fu_791_p3),to_integer(unsigned('0' & zext_ln17_5_fu_807_p1(12-1 downto 0)))));
    ashr_ln1333_7_fu_929_p2 <= std_logic_vector(shift_right(signed(select_ln1496_19_reg_1116),to_integer(unsigned('0' & zext_ln17_6_fu_926_p1(12-1 downto 0)))));
    ashr_ln1333_8_fu_339_p2 <= std_logic_vector(shift_right(signed(select_ln1496_1_reg_998),to_integer(unsigned('0' & zext_ln17_fu_336_p1(12-1 downto 0)))));
    ashr_ln1333_9_fu_344_p2 <= std_logic_vector(shift_right(signed(select_ln1496_reg_991),to_integer(unsigned('0' & zext_ln17_fu_336_p1(12-1 downto 0)))));
    ashr_ln1333_fu_216_p2 <= std_logic_vector(shift_right(signed(p_Val2_0_reg_183),to_integer(unsigned('0' & sh_assign_0_cast8_fu_206_p1(12-1 downto 0)))));
    c_V <= p_Val2_0_reg_183;

    c_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_210_p2)
    begin
        if (((icmp_ln17_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_V_ap_vld <= ap_const_logic_1;
        else 
            c_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln30_fu_248_p1, zext_ln30_3_fu_545_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cordic_phase_V_address0 <= zext_ln30_3_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_address0 <= zext_ln30_fu_248_p1(6 - 1 downto 0);
        else 
            cordic_phase_V_address0 <= "XXXXXX";
        end if; 
    end process;


    cordic_phase_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln30_1_fu_291_p1, zext_ln30_4_fu_583_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cordic_phase_V_address1 <= zext_ln30_4_fu_583_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_address1 <= zext_ln30_1_fu_291_p1(6 - 1 downto 0);
        else 
            cordic_phase_V_address1 <= "XXXXXX";
        end if; 
    end process;


    cordic_phase_V_address2_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln30_2_fu_302_p1, zext_ln30_5_fu_593_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cordic_phase_V_address2 <= zext_ln30_5_fu_593_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_address2 <= zext_ln30_2_fu_302_p1(6 - 1 downto 0);
        else 
            cordic_phase_V_address2 <= "XXXXXX";
        end if; 
    end process;

    cordic_phase_V_address3 <= zext_ln30_6_fu_603_p1(6 - 1 downto 0);
    cordic_phase_V_address4 <= zext_ln30_7_fu_613_p1(6 - 1 downto 0);

    cordic_phase_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cordic_phase_V_ce0 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cordic_phase_V_ce1 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_ce2_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            cordic_phase_V_ce2 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_ce3_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cordic_phase_V_ce3 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_ce4_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cordic_phase_V_ce4 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    empty_2_fu_281_p1 <= sh_assign_0_reg_195(5 - 1 downto 0);
    icmp_ln17_fu_210_p2 <= "1" when (sh_assign_0_reg_195 = ap_const_lv6_20) else "0";
    or_ln17_1_fu_296_p2 <= (empty_2_fu_281_p1 or ap_const_lv5_2);
    or_ln17_2_fu_504_p2 <= (empty_2_reg_1005 or ap_const_lv5_3);
    or_ln17_3_fu_578_p2 <= (empty_2_reg_1005 or ap_const_lv5_4);
    or_ln17_4_fu_588_p2 <= (empty_2_reg_1005 or ap_const_lv5_5);
    or_ln17_5_fu_598_p2 <= (empty_2_reg_1005 or ap_const_lv5_6);
    or_ln17_6_fu_608_p2 <= (empty_2_reg_1005 or ap_const_lv5_7);
    or_ln17_fu_285_p2 <= (empty_2_fu_281_p1 or ap_const_lv5_1);
    s_V <= p_Val2_2_0_reg_171;

    s_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_210_p2)
    begin
        if (((icmp_ln17_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_V_ap_vld <= ap_const_logic_1;
        else 
            s_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1496_10_fu_570_p3 <= 
        add_ln703_15_fu_550_p2 when (tmp_3_fu_525_p3(0) = '1') else 
        sub_ln703_14_fu_533_p2;
    select_ln1496_11_fu_632_p3 <= 
        add_ln703_3_fu_627_p2 when (tmp_3_reg_1045(0) = '1') else 
        sub_ln703_3_fu_622_p2;
    select_ln1496_12_fu_696_p3 <= 
        sub_ln703_17_fu_685_p2 when (tmp_4_fu_652_p3(0) = '1') else 
        add_ln703_16_fu_665_p2;
    select_ln1496_13_fu_704_p3 <= 
        add_ln703_17_fu_680_p2 when (tmp_4_fu_652_p3(0) = '1') else 
        sub_ln703_16_fu_660_p2;
    select_ln1496_14_fu_712_p3 <= 
        add_ln703_4_fu_690_p2 when (tmp_4_fu_652_p3(0) = '1') else 
        sub_ln703_4_fu_674_p2;
    select_ln1496_15_fu_783_p3 <= 
        sub_ln703_19_fu_771_p2 when (tmp_5_fu_735_p3(0) = '1') else 
        add_ln703_18_fu_749_p2;
    select_ln1496_16_fu_791_p3 <= 
        add_ln703_19_fu_765_p2 when (tmp_5_fu_735_p3(0) = '1') else 
        sub_ln703_18_fu_743_p2;
    select_ln1496_17_fu_799_p3 <= 
        add_ln703_5_fu_777_p2 when (tmp_5_fu_735_p3(0) = '1') else 
        sub_ln703_5_fu_759_p2;
    select_ln1496_18_fu_870_p3 <= 
        sub_ln703_21_fu_858_p2 when (tmp_6_fu_822_p3(0) = '1') else 
        add_ln703_20_fu_836_p2;
    select_ln1496_19_fu_878_p3 <= 
        add_ln703_21_fu_852_p2 when (tmp_6_fu_822_p3(0) = '1') else 
        sub_ln703_20_fu_830_p2;
    select_ln1496_1_fu_273_p3 <= 
        add_ln703_8_fu_253_p2 when (tmp_fu_228_p3(0) = '1') else 
        sub_ln703_fu_236_p2;
    select_ln1496_20_fu_886_p3 <= 
        add_ln703_6_fu_864_p2 when (tmp_6_fu_822_p3(0) = '1') else 
        sub_ln703_6_fu_846_p2;
    select_ln1496_21_fu_959_p3 <= 
        sub_ln703_23_fu_954_p2 when (tmp_7_reg_1123(0) = '1') else 
        add_ln703_22_fu_944_p2;
    select_ln1496_22_fu_966_p3 <= 
        add_ln703_23_fu_949_p2 when (tmp_7_reg_1123(0) = '1') else 
        sub_ln703_22_fu_939_p2;
    select_ln1496_23_fu_918_p3 <= 
        add_ln703_7_fu_912_p2 when (tmp_7_fu_894_p3(0) = '1') else 
        sub_ln703_7_fu_906_p2;
    select_ln1496_2_fu_329_p3 <= 
        add_ln703_9_fu_323_p2 when (tmp_reg_981(0) = '1') else 
        sub_ln703_8_fu_317_p2;
    select_ln1496_3_fu_393_p3 <= 
        sub_ln703_11_fu_382_p2 when (tmp_1_fu_349_p3(0) = '1') else 
        add_ln703_10_fu_362_p2;
    select_ln1496_4_fu_401_p3 <= 
        add_ln703_11_fu_377_p2 when (tmp_1_fu_349_p3(0) = '1') else 
        sub_ln703_10_fu_357_p2;
    select_ln1496_5_fu_409_p3 <= 
        add_ln703_1_fu_387_p2 when (tmp_1_fu_349_p3(0) = '1') else 
        sub_ln703_1_fu_371_p2;
    select_ln1496_6_fu_480_p3 <= 
        sub_ln703_13_fu_468_p2 when (tmp_2_fu_432_p3(0) = '1') else 
        add_ln703_12_fu_446_p2;
    select_ln1496_7_fu_488_p3 <= 
        add_ln703_13_fu_462_p2 when (tmp_2_fu_432_p3(0) = '1') else 
        sub_ln703_12_fu_440_p2;
    select_ln1496_8_fu_496_p3 <= 
        add_ln703_2_fu_474_p2 when (tmp_2_fu_432_p3(0) = '1') else 
        sub_ln703_2_fu_456_p2;
    select_ln1496_9_fu_562_p3 <= 
        sub_ln703_15_fu_556_p2 when (tmp_3_fu_525_p3(0) = '1') else 
        add_ln703_14_fu_539_p2;
    select_ln1496_fu_265_p3 <= 
        sub_ln703_9_fu_259_p2 when (tmp_fu_228_p3(0) = '1') else 
        add_ln703_fu_242_p2;
    sh_assign_0_cast8_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_0_reg_195),12));
    sub_ln703_10_fu_357_p2 <= std_logic_vector(unsigned(select_ln1496_1_reg_998) - unsigned(ashr_ln1333_9_fu_344_p2));
    sub_ln703_11_fu_382_p2 <= std_logic_vector(unsigned(select_ln1496_reg_991) - unsigned(ashr_ln1333_8_fu_339_p2));
    sub_ln703_12_fu_440_p2 <= std_logic_vector(unsigned(select_ln1496_4_fu_401_p3) - unsigned(ashr_ln1333_10_fu_426_p2));
    sub_ln703_13_fu_468_p2 <= std_logic_vector(unsigned(select_ln1496_3_fu_393_p3) - unsigned(ashr_ln1333_2_fu_420_p2));
    sub_ln703_14_fu_533_p2 <= std_logic_vector(unsigned(select_ln1496_7_fu_488_p3) - unsigned(ashr_ln1333_11_fu_519_p2));
    sub_ln703_15_fu_556_p2 <= std_logic_vector(unsigned(select_ln1496_6_fu_480_p3) - unsigned(ashr_ln1333_3_fu_513_p2));
    sub_ln703_16_fu_660_p2 <= std_logic_vector(unsigned(select_ln1496_10_reg_1062) - unsigned(ashr_ln1333_12_fu_647_p2));
    sub_ln703_17_fu_685_p2 <= std_logic_vector(unsigned(select_ln1496_9_reg_1055) - unsigned(ashr_ln1333_4_fu_642_p2));
    sub_ln703_18_fu_743_p2 <= std_logic_vector(unsigned(select_ln1496_13_fu_704_p3) - unsigned(ashr_ln1333_13_fu_729_p2));
    sub_ln703_19_fu_771_p2 <= std_logic_vector(unsigned(select_ln1496_12_fu_696_p3) - unsigned(ashr_ln1333_5_fu_723_p2));
    sub_ln703_1_fu_371_p2 <= std_logic_vector(unsigned(select_ln1496_2_fu_329_p3) - unsigned(zext_ln1265_1_fu_367_p1));
    sub_ln703_20_fu_830_p2 <= std_logic_vector(unsigned(select_ln1496_16_fu_791_p3) - unsigned(ashr_ln1333_14_fu_816_p2));
    sub_ln703_21_fu_858_p2 <= std_logic_vector(unsigned(select_ln1496_15_fu_783_p3) - unsigned(ashr_ln1333_6_fu_810_p2));
    sub_ln703_22_fu_939_p2 <= std_logic_vector(unsigned(select_ln1496_19_reg_1116) - unsigned(ashr_ln1333_15_fu_934_p2));
    sub_ln703_23_fu_954_p2 <= std_logic_vector(unsigned(select_ln1496_18_reg_1109) - unsigned(ashr_ln1333_7_fu_929_p2));
    sub_ln703_2_fu_456_p2 <= std_logic_vector(unsigned(select_ln1496_5_fu_409_p3) - unsigned(zext_ln1265_2_fu_452_p1));
    sub_ln703_3_fu_622_p2 <= std_logic_vector(unsigned(select_ln1496_8_reg_1039) - unsigned(zext_ln1265_3_fu_618_p1));
    sub_ln703_4_fu_674_p2 <= std_logic_vector(unsigned(select_ln1496_11_fu_632_p3) - unsigned(zext_ln1265_4_fu_670_p1));
    sub_ln703_5_fu_759_p2 <= std_logic_vector(unsigned(select_ln1496_14_fu_712_p3) - unsigned(zext_ln1265_5_fu_755_p1));
    sub_ln703_6_fu_846_p2 <= std_logic_vector(unsigned(select_ln1496_17_fu_799_p3) - unsigned(zext_ln1265_6_fu_842_p1));
    sub_ln703_7_fu_906_p2 <= std_logic_vector(unsigned(select_ln1496_20_fu_886_p3) - unsigned(zext_ln1265_7_fu_902_p1));
    sub_ln703_8_fu_317_p2 <= std_logic_vector(unsigned(theta_V_buf_0_0_reg_161) - unsigned(zext_ln1265_fu_313_p1));
    sub_ln703_9_fu_259_p2 <= std_logic_vector(unsigned(p_Val2_2_0_reg_171) - unsigned(ashr_ln1333_fu_216_p2));
    sub_ln703_fu_236_p2 <= std_logic_vector(unsigned(p_Val2_0_reg_183) - unsigned(ashr_ln1333_1_fu_222_p2));
    tmp_1_fu_349_p3 <= select_ln1496_2_fu_329_p3(11 downto 11);
    tmp_2_fu_432_p3 <= select_ln1496_5_fu_409_p3(11 downto 11);
    tmp_3_fu_525_p3 <= select_ln1496_8_fu_496_p3(11 downto 11);
    tmp_4_fu_652_p3 <= select_ln1496_11_fu_632_p3(11 downto 11);
    tmp_5_fu_735_p3 <= select_ln1496_14_fu_712_p3(11 downto 11);
    tmp_6_fu_822_p3 <= select_ln1496_17_fu_799_p3(11 downto 11);
    tmp_7_fu_894_p3 <= select_ln1496_20_fu_886_p3(11 downto 11);
    tmp_fu_228_p3 <= theta_V_buf_0_0_reg_161(11 downto 11);
    zext_ln1265_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q1),12));
    zext_ln1265_2_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q2),12));
    zext_ln1265_3_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q0),12));
    zext_ln1265_4_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q1),12));
    zext_ln1265_5_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q2),12));
    zext_ln1265_6_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q3),12));
    zext_ln1265_7_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q4),12));
    zext_ln1265_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q0),12));
    zext_ln17_1_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_1_reg_1024),12));
    zext_ln17_2_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_2_fu_504_p2),12));
    zext_ln17_3_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_3_reg_1069),12));
    zext_ln17_4_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_4_reg_1079),12));
    zext_ln17_5_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_5_reg_1089),12));
    zext_ln17_6_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_6_reg_1099),12));
    zext_ln17_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_reg_1014),12));
    zext_ln30_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_fu_285_p2),64));
    zext_ln30_2_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_1_fu_296_p2),64));
    zext_ln30_3_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_2_fu_504_p2),64));
    zext_ln30_4_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_3_fu_578_p2),64));
    zext_ln30_5_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_4_fu_588_p2),64));
    zext_ln30_6_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_5_fu_598_p2),64));
    zext_ln30_7_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_6_fu_608_p2),64));
    zext_ln30_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_0_reg_195),64));
end behav;
