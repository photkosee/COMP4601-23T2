// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.314500,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=227,HLS_SYN_LUT=1801,HLS_VERSION=2020_1}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta_V,
        s_V,
        s_V_ap_vld,
        c_V,
        c_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] theta_V;
output  [11:0] s_V;
output   s_V_ap_vld;
output  [11:0] c_V;
output   c_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_V_ap_vld;
reg c_V_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] cordic_phase_V_address0;
reg    cordic_phase_V_ce0;
wire   [9:0] cordic_phase_V_q0;
reg   [5:0] cordic_phase_V_address1;
reg    cordic_phase_V_ce1;
wire   [9:0] cordic_phase_V_q1;
reg   [5:0] cordic_phase_V_address2;
reg    cordic_phase_V_ce2;
wire   [9:0] cordic_phase_V_q2;
wire   [5:0] cordic_phase_V_address3;
reg    cordic_phase_V_ce3;
wire   [9:0] cordic_phase_V_q3;
wire   [5:0] cordic_phase_V_address4;
reg    cordic_phase_V_ce4;
wire   [9:0] cordic_phase_V_q4;
wire   [0:0] tmp_fu_228_p3;
reg   [0:0] tmp_reg_981;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_210_p2;
wire   [11:0] select_ln1496_fu_265_p3;
reg   [11:0] select_ln1496_reg_991;
wire   [11:0] select_ln1496_1_fu_273_p3;
reg   [11:0] select_ln1496_1_reg_998;
wire   [4:0] empty_2_fu_281_p1;
reg   [4:0] empty_2_reg_1005;
wire   [4:0] or_ln17_fu_285_p2;
reg   [4:0] or_ln17_reg_1014;
wire   [4:0] or_ln17_1_fu_296_p2;
reg   [4:0] or_ln17_1_reg_1024;
wire   [5:0] add_ln17_fu_307_p2;
reg   [5:0] add_ln17_reg_1034;
wire   [11:0] select_ln1496_8_fu_496_p3;
reg   [11:0] select_ln1496_8_reg_1039;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_3_fu_525_p3;
reg   [0:0] tmp_3_reg_1045;
wire   [11:0] select_ln1496_9_fu_562_p3;
reg   [11:0] select_ln1496_9_reg_1055;
wire   [11:0] select_ln1496_10_fu_570_p3;
reg   [11:0] select_ln1496_10_reg_1062;
wire   [4:0] or_ln17_3_fu_578_p2;
reg   [4:0] or_ln17_3_reg_1069;
wire   [4:0] or_ln17_4_fu_588_p2;
reg   [4:0] or_ln17_4_reg_1079;
wire   [4:0] or_ln17_5_fu_598_p2;
reg   [4:0] or_ln17_5_reg_1089;
wire   [4:0] or_ln17_6_fu_608_p2;
reg   [4:0] or_ln17_6_reg_1099;
wire   [11:0] select_ln1496_18_fu_870_p3;
reg   [11:0] select_ln1496_18_reg_1109;
wire    ap_CS_fsm_state4;
wire   [11:0] select_ln1496_19_fu_878_p3;
reg   [11:0] select_ln1496_19_reg_1116;
wire   [0:0] tmp_7_fu_894_p3;
reg   [0:0] tmp_7_reg_1123;
wire   [11:0] select_ln1496_23_fu_918_p3;
reg   [11:0] select_ln1496_23_reg_1129;
wire   [11:0] select_ln1496_21_fu_959_p3;
wire    ap_CS_fsm_state5;
wire   [11:0] select_ln1496_22_fu_966_p3;
reg   [11:0] theta_V_buf_0_0_reg_161;
reg   [11:0] p_Val2_2_0_reg_171;
reg   [11:0] p_Val2_0_reg_183;
reg   [5:0] sh_assign_0_reg_195;
wire   [63:0] zext_ln30_fu_248_p1;
wire   [63:0] zext_ln30_1_fu_291_p1;
wire   [63:0] zext_ln30_2_fu_302_p1;
wire   [63:0] zext_ln30_3_fu_545_p1;
wire   [63:0] zext_ln30_4_fu_583_p1;
wire   [63:0] zext_ln30_5_fu_593_p1;
wire   [63:0] zext_ln30_6_fu_603_p1;
wire   [63:0] zext_ln30_7_fu_613_p1;
wire   [11:0] sh_assign_0_cast8_fu_206_p1;
wire   [11:0] ashr_ln1333_1_fu_222_p2;
wire   [11:0] ashr_ln1333_fu_216_p2;
wire   [11:0] sub_ln703_9_fu_259_p2;
wire   [11:0] add_ln703_fu_242_p2;
wire   [11:0] add_ln703_8_fu_253_p2;
wire   [11:0] sub_ln703_fu_236_p2;
wire   [11:0] zext_ln1265_fu_313_p1;
wire   [11:0] add_ln703_9_fu_323_p2;
wire   [11:0] sub_ln703_8_fu_317_p2;
wire   [11:0] zext_ln17_fu_336_p1;
wire   [11:0] select_ln1496_2_fu_329_p3;
wire   [11:0] ashr_ln1333_9_fu_344_p2;
wire   [11:0] ashr_ln1333_8_fu_339_p2;
wire   [11:0] zext_ln1265_1_fu_367_p1;
wire   [0:0] tmp_1_fu_349_p3;
wire   [11:0] sub_ln703_11_fu_382_p2;
wire   [11:0] add_ln703_10_fu_362_p2;
wire   [11:0] add_ln703_11_fu_377_p2;
wire   [11:0] sub_ln703_10_fu_357_p2;
wire   [11:0] add_ln703_1_fu_387_p2;
wire   [11:0] sub_ln703_1_fu_371_p2;
wire   [11:0] select_ln1496_4_fu_401_p3;
wire   [11:0] zext_ln17_1_fu_417_p1;
wire   [11:0] select_ln1496_3_fu_393_p3;
wire   [11:0] select_ln1496_5_fu_409_p3;
wire   [11:0] ashr_ln1333_10_fu_426_p2;
wire   [11:0] ashr_ln1333_2_fu_420_p2;
wire   [11:0] zext_ln1265_2_fu_452_p1;
wire   [0:0] tmp_2_fu_432_p3;
wire   [11:0] sub_ln703_13_fu_468_p2;
wire   [11:0] add_ln703_12_fu_446_p2;
wire   [11:0] add_ln703_13_fu_462_p2;
wire   [11:0] sub_ln703_12_fu_440_p2;
wire   [11:0] add_ln703_2_fu_474_p2;
wire   [11:0] sub_ln703_2_fu_456_p2;
wire   [4:0] or_ln17_2_fu_504_p2;
wire   [11:0] select_ln1496_7_fu_488_p3;
wire   [11:0] zext_ln17_2_fu_509_p1;
wire   [11:0] select_ln1496_6_fu_480_p3;
wire   [11:0] ashr_ln1333_11_fu_519_p2;
wire   [11:0] ashr_ln1333_3_fu_513_p2;
wire   [11:0] sub_ln703_15_fu_556_p2;
wire   [11:0] add_ln703_14_fu_539_p2;
wire   [11:0] add_ln703_15_fu_550_p2;
wire   [11:0] sub_ln703_14_fu_533_p2;
wire   [11:0] zext_ln1265_3_fu_618_p1;
wire   [11:0] add_ln703_3_fu_627_p2;
wire   [11:0] sub_ln703_3_fu_622_p2;
wire   [11:0] zext_ln17_3_fu_639_p1;
wire   [11:0] select_ln1496_11_fu_632_p3;
wire   [11:0] ashr_ln1333_12_fu_647_p2;
wire   [11:0] ashr_ln1333_4_fu_642_p2;
wire   [11:0] zext_ln1265_4_fu_670_p1;
wire   [0:0] tmp_4_fu_652_p3;
wire   [11:0] sub_ln703_17_fu_685_p2;
wire   [11:0] add_ln703_16_fu_665_p2;
wire   [11:0] add_ln703_17_fu_680_p2;
wire   [11:0] sub_ln703_16_fu_660_p2;
wire   [11:0] add_ln703_4_fu_690_p2;
wire   [11:0] sub_ln703_4_fu_674_p2;
wire   [11:0] select_ln1496_13_fu_704_p3;
wire   [11:0] zext_ln17_4_fu_720_p1;
wire   [11:0] select_ln1496_12_fu_696_p3;
wire   [11:0] select_ln1496_14_fu_712_p3;
wire   [11:0] ashr_ln1333_13_fu_729_p2;
wire   [11:0] ashr_ln1333_5_fu_723_p2;
wire   [11:0] zext_ln1265_5_fu_755_p1;
wire   [0:0] tmp_5_fu_735_p3;
wire   [11:0] sub_ln703_19_fu_771_p2;
wire   [11:0] add_ln703_18_fu_749_p2;
wire   [11:0] add_ln703_19_fu_765_p2;
wire   [11:0] sub_ln703_18_fu_743_p2;
wire   [11:0] add_ln703_5_fu_777_p2;
wire   [11:0] sub_ln703_5_fu_759_p2;
wire   [11:0] select_ln1496_16_fu_791_p3;
wire   [11:0] zext_ln17_5_fu_807_p1;
wire   [11:0] select_ln1496_15_fu_783_p3;
wire   [11:0] select_ln1496_17_fu_799_p3;
wire   [11:0] ashr_ln1333_14_fu_816_p2;
wire   [11:0] ashr_ln1333_6_fu_810_p2;
wire   [11:0] zext_ln1265_6_fu_842_p1;
wire   [0:0] tmp_6_fu_822_p3;
wire   [11:0] sub_ln703_21_fu_858_p2;
wire   [11:0] add_ln703_20_fu_836_p2;
wire   [11:0] add_ln703_21_fu_852_p2;
wire   [11:0] sub_ln703_20_fu_830_p2;
wire   [11:0] add_ln703_6_fu_864_p2;
wire   [11:0] sub_ln703_6_fu_846_p2;
wire   [11:0] select_ln1496_20_fu_886_p3;
wire   [11:0] zext_ln1265_7_fu_902_p1;
wire   [11:0] add_ln703_7_fu_912_p2;
wire   [11:0] sub_ln703_7_fu_906_p2;
wire   [11:0] zext_ln17_6_fu_926_p1;
wire   [11:0] ashr_ln1333_15_fu_934_p2;
wire   [11:0] ashr_ln1333_7_fu_929_p2;
wire   [11:0] sub_ln703_23_fu_954_p2;
wire   [11:0] add_ln703_22_fu_944_p2;
wire   [11:0] add_ln703_23_fu_949_p2;
wire   [11:0] sub_ln703_22_fu_939_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

cordic_cordic_phabkb #(
    .DataWidth( 10 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_phase_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_phase_V_address0),
    .ce0(cordic_phase_V_ce0),
    .q0(cordic_phase_V_q0),
    .address1(cordic_phase_V_address1),
    .ce1(cordic_phase_V_ce1),
    .q1(cordic_phase_V_q1),
    .address2(cordic_phase_V_address2),
    .ce2(cordic_phase_V_ce2),
    .q2(cordic_phase_V_q2),
    .address3(cordic_phase_V_address3),
    .ce3(cordic_phase_V_ce3),
    .q3(cordic_phase_V_q3),
    .address4(cordic_phase_V_address4),
    .ce4(cordic_phase_V_ce4),
    .q4(cordic_phase_V_q4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_0_reg_183 <= select_ln1496_22_fu_966_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_0_reg_183 <= 12'd621;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_2_0_reg_171 <= select_ln1496_21_fu_959_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_2_0_reg_171 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sh_assign_0_reg_195 <= add_ln17_reg_1034;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sh_assign_0_reg_195 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        theta_V_buf_0_0_reg_161 <= select_ln1496_23_reg_1129;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        theta_V_buf_0_0_reg_161 <= theta_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln17_reg_1034 <= add_ln17_fu_307_p2;
        empty_2_reg_1005 <= empty_2_fu_281_p1;
        or_ln17_1_reg_1024[0] <= or_ln17_1_fu_296_p2[0];
or_ln17_1_reg_1024[4 : 2] <= or_ln17_1_fu_296_p2[4 : 2];
        or_ln17_reg_1014[4 : 1] <= or_ln17_fu_285_p2[4 : 1];
        select_ln1496_1_reg_998 <= select_ln1496_1_fu_273_p3;
        select_ln1496_reg_991 <= select_ln1496_fu_265_p3;
        tmp_reg_981 <= theta_V_buf_0_0_reg_161[32'd11];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        or_ln17_3_reg_1069[1 : 0] <= or_ln17_3_fu_578_p2[1 : 0];
or_ln17_3_reg_1069[4 : 3] <= or_ln17_3_fu_578_p2[4 : 3];
        or_ln17_4_reg_1079[1] <= or_ln17_4_fu_588_p2[1];
or_ln17_4_reg_1079[4 : 3] <= or_ln17_4_fu_588_p2[4 : 3];
        or_ln17_5_reg_1089[0] <= or_ln17_5_fu_598_p2[0];
or_ln17_5_reg_1089[4 : 3] <= or_ln17_5_fu_598_p2[4 : 3];
        or_ln17_6_reg_1099[4 : 3] <= or_ln17_6_fu_608_p2[4 : 3];
        select_ln1496_10_reg_1062 <= select_ln1496_10_fu_570_p3;
        select_ln1496_8_reg_1039 <= select_ln1496_8_fu_496_p3;
        select_ln1496_9_reg_1055 <= select_ln1496_9_fu_562_p3;
        tmp_3_reg_1045 <= select_ln1496_8_fu_496_p3[32'd11];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln1496_18_reg_1109 <= select_ln1496_18_fu_870_p3;
        select_ln1496_19_reg_1116 <= select_ln1496_19_fu_878_p3;
        select_ln1496_23_reg_1129 <= select_ln1496_23_fu_918_p3;
        tmp_7_reg_1123 <= select_ln1496_20_fu_886_p3[32'd11];
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_V_ap_vld = 1'b1;
    end else begin
        c_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cordic_phase_V_address0 = zext_ln30_3_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_address0 = zext_ln30_fu_248_p1;
    end else begin
        cordic_phase_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cordic_phase_V_address1 = zext_ln30_4_fu_583_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_address1 = zext_ln30_1_fu_291_p1;
    end else begin
        cordic_phase_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cordic_phase_V_address2 = zext_ln30_5_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_address2 = zext_ln30_2_fu_302_p1;
    end else begin
        cordic_phase_V_address2 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        cordic_phase_V_ce0 = 1'b1;
    end else begin
        cordic_phase_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        cordic_phase_V_ce1 = 1'b1;
    end else begin
        cordic_phase_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        cordic_phase_V_ce2 = 1'b1;
    end else begin
        cordic_phase_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cordic_phase_V_ce3 = 1'b1;
    end else begin
        cordic_phase_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cordic_phase_V_ce4 = 1'b1;
    end else begin
        cordic_phase_V_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_V_ap_vld = 1'b1;
    end else begin
        s_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_307_p2 = (6'd8 + sh_assign_0_reg_195);

assign add_ln703_10_fu_362_p2 = (select_ln1496_reg_991 + ashr_ln1333_8_fu_339_p2);

assign add_ln703_11_fu_377_p2 = (select_ln1496_1_reg_998 + ashr_ln1333_9_fu_344_p2);

assign add_ln703_12_fu_446_p2 = (select_ln1496_3_fu_393_p3 + ashr_ln1333_2_fu_420_p2);

assign add_ln703_13_fu_462_p2 = (select_ln1496_4_fu_401_p3 + ashr_ln1333_10_fu_426_p2);

assign add_ln703_14_fu_539_p2 = (select_ln1496_6_fu_480_p3 + ashr_ln1333_3_fu_513_p2);

assign add_ln703_15_fu_550_p2 = (select_ln1496_7_fu_488_p3 + ashr_ln1333_11_fu_519_p2);

assign add_ln703_16_fu_665_p2 = (select_ln1496_9_reg_1055 + ashr_ln1333_4_fu_642_p2);

assign add_ln703_17_fu_680_p2 = (select_ln1496_10_reg_1062 + ashr_ln1333_12_fu_647_p2);

assign add_ln703_18_fu_749_p2 = (select_ln1496_12_fu_696_p3 + ashr_ln1333_5_fu_723_p2);

assign add_ln703_19_fu_765_p2 = (select_ln1496_13_fu_704_p3 + ashr_ln1333_13_fu_729_p2);

assign add_ln703_1_fu_387_p2 = (select_ln1496_2_fu_329_p3 + zext_ln1265_1_fu_367_p1);

assign add_ln703_20_fu_836_p2 = (select_ln1496_15_fu_783_p3 + ashr_ln1333_6_fu_810_p2);

assign add_ln703_21_fu_852_p2 = (select_ln1496_16_fu_791_p3 + ashr_ln1333_14_fu_816_p2);

assign add_ln703_22_fu_944_p2 = (select_ln1496_18_reg_1109 + ashr_ln1333_7_fu_929_p2);

assign add_ln703_23_fu_949_p2 = (select_ln1496_19_reg_1116 + ashr_ln1333_15_fu_934_p2);

assign add_ln703_2_fu_474_p2 = (select_ln1496_5_fu_409_p3 + zext_ln1265_2_fu_452_p1);

assign add_ln703_3_fu_627_p2 = (select_ln1496_8_reg_1039 + zext_ln1265_3_fu_618_p1);

assign add_ln703_4_fu_690_p2 = (select_ln1496_11_fu_632_p3 + zext_ln1265_4_fu_670_p1);

assign add_ln703_5_fu_777_p2 = (select_ln1496_14_fu_712_p3 + zext_ln1265_5_fu_755_p1);

assign add_ln703_6_fu_864_p2 = (select_ln1496_17_fu_799_p3 + zext_ln1265_6_fu_842_p1);

assign add_ln703_7_fu_912_p2 = (select_ln1496_20_fu_886_p3 + zext_ln1265_7_fu_902_p1);

assign add_ln703_8_fu_253_p2 = (p_Val2_0_reg_183 + ashr_ln1333_1_fu_222_p2);

assign add_ln703_9_fu_323_p2 = (theta_V_buf_0_0_reg_161 + zext_ln1265_fu_313_p1);

assign add_ln703_fu_242_p2 = (p_Val2_2_0_reg_171 + ashr_ln1333_fu_216_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ashr_ln1333_10_fu_426_p2 = $signed(select_ln1496_3_fu_393_p3) >>> zext_ln17_1_fu_417_p1;

assign ashr_ln1333_11_fu_519_p2 = $signed(select_ln1496_6_fu_480_p3) >>> zext_ln17_2_fu_509_p1;

assign ashr_ln1333_12_fu_647_p2 = $signed(select_ln1496_9_reg_1055) >>> zext_ln17_3_fu_639_p1;

assign ashr_ln1333_13_fu_729_p2 = $signed(select_ln1496_12_fu_696_p3) >>> zext_ln17_4_fu_720_p1;

assign ashr_ln1333_14_fu_816_p2 = $signed(select_ln1496_15_fu_783_p3) >>> zext_ln17_5_fu_807_p1;

assign ashr_ln1333_15_fu_934_p2 = $signed(select_ln1496_18_reg_1109) >>> zext_ln17_6_fu_926_p1;

assign ashr_ln1333_1_fu_222_p2 = $signed(p_Val2_2_0_reg_171) >>> sh_assign_0_cast8_fu_206_p1;

assign ashr_ln1333_2_fu_420_p2 = $signed(select_ln1496_4_fu_401_p3) >>> zext_ln17_1_fu_417_p1;

assign ashr_ln1333_3_fu_513_p2 = $signed(select_ln1496_7_fu_488_p3) >>> zext_ln17_2_fu_509_p1;

assign ashr_ln1333_4_fu_642_p2 = $signed(select_ln1496_10_reg_1062) >>> zext_ln17_3_fu_639_p1;

assign ashr_ln1333_5_fu_723_p2 = $signed(select_ln1496_13_fu_704_p3) >>> zext_ln17_4_fu_720_p1;

assign ashr_ln1333_6_fu_810_p2 = $signed(select_ln1496_16_fu_791_p3) >>> zext_ln17_5_fu_807_p1;

assign ashr_ln1333_7_fu_929_p2 = $signed(select_ln1496_19_reg_1116) >>> zext_ln17_6_fu_926_p1;

assign ashr_ln1333_8_fu_339_p2 = $signed(select_ln1496_1_reg_998) >>> zext_ln17_fu_336_p1;

assign ashr_ln1333_9_fu_344_p2 = $signed(select_ln1496_reg_991) >>> zext_ln17_fu_336_p1;

assign ashr_ln1333_fu_216_p2 = $signed(p_Val2_0_reg_183) >>> sh_assign_0_cast8_fu_206_p1;

assign c_V = p_Val2_0_reg_183;

assign cordic_phase_V_address3 = zext_ln30_6_fu_603_p1;

assign cordic_phase_V_address4 = zext_ln30_7_fu_613_p1;

assign empty_2_fu_281_p1 = sh_assign_0_reg_195[4:0];

assign icmp_ln17_fu_210_p2 = ((sh_assign_0_reg_195 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln17_1_fu_296_p2 = (empty_2_fu_281_p1 | 5'd2);

assign or_ln17_2_fu_504_p2 = (empty_2_reg_1005 | 5'd3);

assign or_ln17_3_fu_578_p2 = (empty_2_reg_1005 | 5'd4);

assign or_ln17_4_fu_588_p2 = (empty_2_reg_1005 | 5'd5);

assign or_ln17_5_fu_598_p2 = (empty_2_reg_1005 | 5'd6);

assign or_ln17_6_fu_608_p2 = (empty_2_reg_1005 | 5'd7);

assign or_ln17_fu_285_p2 = (empty_2_fu_281_p1 | 5'd1);

assign s_V = p_Val2_2_0_reg_171;

assign select_ln1496_10_fu_570_p3 = ((tmp_3_fu_525_p3[0:0] === 1'b1) ? add_ln703_15_fu_550_p2 : sub_ln703_14_fu_533_p2);

assign select_ln1496_11_fu_632_p3 = ((tmp_3_reg_1045[0:0] === 1'b1) ? add_ln703_3_fu_627_p2 : sub_ln703_3_fu_622_p2);

assign select_ln1496_12_fu_696_p3 = ((tmp_4_fu_652_p3[0:0] === 1'b1) ? sub_ln703_17_fu_685_p2 : add_ln703_16_fu_665_p2);

assign select_ln1496_13_fu_704_p3 = ((tmp_4_fu_652_p3[0:0] === 1'b1) ? add_ln703_17_fu_680_p2 : sub_ln703_16_fu_660_p2);

assign select_ln1496_14_fu_712_p3 = ((tmp_4_fu_652_p3[0:0] === 1'b1) ? add_ln703_4_fu_690_p2 : sub_ln703_4_fu_674_p2);

assign select_ln1496_15_fu_783_p3 = ((tmp_5_fu_735_p3[0:0] === 1'b1) ? sub_ln703_19_fu_771_p2 : add_ln703_18_fu_749_p2);

assign select_ln1496_16_fu_791_p3 = ((tmp_5_fu_735_p3[0:0] === 1'b1) ? add_ln703_19_fu_765_p2 : sub_ln703_18_fu_743_p2);

assign select_ln1496_17_fu_799_p3 = ((tmp_5_fu_735_p3[0:0] === 1'b1) ? add_ln703_5_fu_777_p2 : sub_ln703_5_fu_759_p2);

assign select_ln1496_18_fu_870_p3 = ((tmp_6_fu_822_p3[0:0] === 1'b1) ? sub_ln703_21_fu_858_p2 : add_ln703_20_fu_836_p2);

assign select_ln1496_19_fu_878_p3 = ((tmp_6_fu_822_p3[0:0] === 1'b1) ? add_ln703_21_fu_852_p2 : sub_ln703_20_fu_830_p2);

assign select_ln1496_1_fu_273_p3 = ((tmp_fu_228_p3[0:0] === 1'b1) ? add_ln703_8_fu_253_p2 : sub_ln703_fu_236_p2);

assign select_ln1496_20_fu_886_p3 = ((tmp_6_fu_822_p3[0:0] === 1'b1) ? add_ln703_6_fu_864_p2 : sub_ln703_6_fu_846_p2);

assign select_ln1496_21_fu_959_p3 = ((tmp_7_reg_1123[0:0] === 1'b1) ? sub_ln703_23_fu_954_p2 : add_ln703_22_fu_944_p2);

assign select_ln1496_22_fu_966_p3 = ((tmp_7_reg_1123[0:0] === 1'b1) ? add_ln703_23_fu_949_p2 : sub_ln703_22_fu_939_p2);

assign select_ln1496_23_fu_918_p3 = ((tmp_7_fu_894_p3[0:0] === 1'b1) ? add_ln703_7_fu_912_p2 : sub_ln703_7_fu_906_p2);

assign select_ln1496_2_fu_329_p3 = ((tmp_reg_981[0:0] === 1'b1) ? add_ln703_9_fu_323_p2 : sub_ln703_8_fu_317_p2);

assign select_ln1496_3_fu_393_p3 = ((tmp_1_fu_349_p3[0:0] === 1'b1) ? sub_ln703_11_fu_382_p2 : add_ln703_10_fu_362_p2);

assign select_ln1496_4_fu_401_p3 = ((tmp_1_fu_349_p3[0:0] === 1'b1) ? add_ln703_11_fu_377_p2 : sub_ln703_10_fu_357_p2);

assign select_ln1496_5_fu_409_p3 = ((tmp_1_fu_349_p3[0:0] === 1'b1) ? add_ln703_1_fu_387_p2 : sub_ln703_1_fu_371_p2);

assign select_ln1496_6_fu_480_p3 = ((tmp_2_fu_432_p3[0:0] === 1'b1) ? sub_ln703_13_fu_468_p2 : add_ln703_12_fu_446_p2);

assign select_ln1496_7_fu_488_p3 = ((tmp_2_fu_432_p3[0:0] === 1'b1) ? add_ln703_13_fu_462_p2 : sub_ln703_12_fu_440_p2);

assign select_ln1496_8_fu_496_p3 = ((tmp_2_fu_432_p3[0:0] === 1'b1) ? add_ln703_2_fu_474_p2 : sub_ln703_2_fu_456_p2);

assign select_ln1496_9_fu_562_p3 = ((tmp_3_fu_525_p3[0:0] === 1'b1) ? sub_ln703_15_fu_556_p2 : add_ln703_14_fu_539_p2);

assign select_ln1496_fu_265_p3 = ((tmp_fu_228_p3[0:0] === 1'b1) ? sub_ln703_9_fu_259_p2 : add_ln703_fu_242_p2);

assign sh_assign_0_cast8_fu_206_p1 = sh_assign_0_reg_195;

assign sub_ln703_10_fu_357_p2 = (select_ln1496_1_reg_998 - ashr_ln1333_9_fu_344_p2);

assign sub_ln703_11_fu_382_p2 = (select_ln1496_reg_991 - ashr_ln1333_8_fu_339_p2);

assign sub_ln703_12_fu_440_p2 = (select_ln1496_4_fu_401_p3 - ashr_ln1333_10_fu_426_p2);

assign sub_ln703_13_fu_468_p2 = (select_ln1496_3_fu_393_p3 - ashr_ln1333_2_fu_420_p2);

assign sub_ln703_14_fu_533_p2 = (select_ln1496_7_fu_488_p3 - ashr_ln1333_11_fu_519_p2);

assign sub_ln703_15_fu_556_p2 = (select_ln1496_6_fu_480_p3 - ashr_ln1333_3_fu_513_p2);

assign sub_ln703_16_fu_660_p2 = (select_ln1496_10_reg_1062 - ashr_ln1333_12_fu_647_p2);

assign sub_ln703_17_fu_685_p2 = (select_ln1496_9_reg_1055 - ashr_ln1333_4_fu_642_p2);

assign sub_ln703_18_fu_743_p2 = (select_ln1496_13_fu_704_p3 - ashr_ln1333_13_fu_729_p2);

assign sub_ln703_19_fu_771_p2 = (select_ln1496_12_fu_696_p3 - ashr_ln1333_5_fu_723_p2);

assign sub_ln703_1_fu_371_p2 = (select_ln1496_2_fu_329_p3 - zext_ln1265_1_fu_367_p1);

assign sub_ln703_20_fu_830_p2 = (select_ln1496_16_fu_791_p3 - ashr_ln1333_14_fu_816_p2);

assign sub_ln703_21_fu_858_p2 = (select_ln1496_15_fu_783_p3 - ashr_ln1333_6_fu_810_p2);

assign sub_ln703_22_fu_939_p2 = (select_ln1496_19_reg_1116 - ashr_ln1333_15_fu_934_p2);

assign sub_ln703_23_fu_954_p2 = (select_ln1496_18_reg_1109 - ashr_ln1333_7_fu_929_p2);

assign sub_ln703_2_fu_456_p2 = (select_ln1496_5_fu_409_p3 - zext_ln1265_2_fu_452_p1);

assign sub_ln703_3_fu_622_p2 = (select_ln1496_8_reg_1039 - zext_ln1265_3_fu_618_p1);

assign sub_ln703_4_fu_674_p2 = (select_ln1496_11_fu_632_p3 - zext_ln1265_4_fu_670_p1);

assign sub_ln703_5_fu_759_p2 = (select_ln1496_14_fu_712_p3 - zext_ln1265_5_fu_755_p1);

assign sub_ln703_6_fu_846_p2 = (select_ln1496_17_fu_799_p3 - zext_ln1265_6_fu_842_p1);

assign sub_ln703_7_fu_906_p2 = (select_ln1496_20_fu_886_p3 - zext_ln1265_7_fu_902_p1);

assign sub_ln703_8_fu_317_p2 = (theta_V_buf_0_0_reg_161 - zext_ln1265_fu_313_p1);

assign sub_ln703_9_fu_259_p2 = (p_Val2_2_0_reg_171 - ashr_ln1333_fu_216_p2);

assign sub_ln703_fu_236_p2 = (p_Val2_0_reg_183 - ashr_ln1333_1_fu_222_p2);

assign tmp_1_fu_349_p3 = select_ln1496_2_fu_329_p3[32'd11];

assign tmp_2_fu_432_p3 = select_ln1496_5_fu_409_p3[32'd11];

assign tmp_3_fu_525_p3 = select_ln1496_8_fu_496_p3[32'd11];

assign tmp_4_fu_652_p3 = select_ln1496_11_fu_632_p3[32'd11];

assign tmp_5_fu_735_p3 = select_ln1496_14_fu_712_p3[32'd11];

assign tmp_6_fu_822_p3 = select_ln1496_17_fu_799_p3[32'd11];

assign tmp_7_fu_894_p3 = select_ln1496_20_fu_886_p3[32'd11];

assign tmp_fu_228_p3 = theta_V_buf_0_0_reg_161[32'd11];

assign zext_ln1265_1_fu_367_p1 = cordic_phase_V_q1;

assign zext_ln1265_2_fu_452_p1 = cordic_phase_V_q2;

assign zext_ln1265_3_fu_618_p1 = cordic_phase_V_q0;

assign zext_ln1265_4_fu_670_p1 = cordic_phase_V_q1;

assign zext_ln1265_5_fu_755_p1 = cordic_phase_V_q2;

assign zext_ln1265_6_fu_842_p1 = cordic_phase_V_q3;

assign zext_ln1265_7_fu_902_p1 = cordic_phase_V_q4;

assign zext_ln1265_fu_313_p1 = cordic_phase_V_q0;

assign zext_ln17_1_fu_417_p1 = or_ln17_1_reg_1024;

assign zext_ln17_2_fu_509_p1 = or_ln17_2_fu_504_p2;

assign zext_ln17_3_fu_639_p1 = or_ln17_3_reg_1069;

assign zext_ln17_4_fu_720_p1 = or_ln17_4_reg_1079;

assign zext_ln17_5_fu_807_p1 = or_ln17_5_reg_1089;

assign zext_ln17_6_fu_926_p1 = or_ln17_6_reg_1099;

assign zext_ln17_fu_336_p1 = or_ln17_reg_1014;

assign zext_ln30_1_fu_291_p1 = or_ln17_fu_285_p2;

assign zext_ln30_2_fu_302_p1 = or_ln17_1_fu_296_p2;

assign zext_ln30_3_fu_545_p1 = or_ln17_2_fu_504_p2;

assign zext_ln30_4_fu_583_p1 = or_ln17_3_fu_578_p2;

assign zext_ln30_5_fu_593_p1 = or_ln17_4_fu_588_p2;

assign zext_ln30_6_fu_603_p1 = or_ln17_5_fu_598_p2;

assign zext_ln30_7_fu_613_p1 = or_ln17_6_fu_608_p2;

assign zext_ln30_fu_248_p1 = sh_assign_0_reg_195;

always @ (posedge ap_clk) begin
    or_ln17_reg_1014[0] <= 1'b1;
    or_ln17_1_reg_1024[1] <= 1'b1;
    or_ln17_3_reg_1069[2] <= 1'b1;
    or_ln17_4_reg_1079[0] <= 1'b1;
    or_ln17_4_reg_1079[2] <= 1'b1;
    or_ln17_5_reg_1089[2:1] <= 2'b11;
    or_ln17_6_reg_1099[2:0] <= 3'b111;
end

endmodule //cordic
