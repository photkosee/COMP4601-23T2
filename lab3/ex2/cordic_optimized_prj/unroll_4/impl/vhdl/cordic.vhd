-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_V : IN STD_LOGIC_VECTOR (11 downto 0);
    s_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_V_ap_vld : OUT STD_LOGIC;
    c_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    c_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.255167,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=127,HLS_SYN_LUT=916,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_26D : STD_LOGIC_VECTOR (11 downto 0) := "001001101101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_phase_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce0 : STD_LOGIC;
    signal cordic_phase_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cordic_phase_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce1 : STD_LOGIC;
    signal cordic_phase_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cordic_phase_V_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce2 : STD_LOGIC;
    signal cordic_phase_V_q2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cordic_phase_V_address3 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce3 : STD_LOGIC;
    signal cordic_phase_V_q3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln17_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1496_fu_221_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_reg_576 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_1_fu_229_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_1_reg_583 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln17_fu_241_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_reg_590 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_1_fu_252_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_1_reg_600 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_2_fu_263_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln17_2_reg_610 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln17_fu_274_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln17_reg_620 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1496_9_fu_534_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln1496_10_fu_542_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_11_fu_550_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal theta_V_buf_0_0_reg_117 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_2_0_reg_127 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_0_reg_139 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_0_reg_151 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_2_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_3_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_assign_0_cast4_fu_162_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_1_fu_178_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_fu_172_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_5_fu_215_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_fu_198_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_4_fu_209_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_fu_192_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_2_fu_237_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1265_fu_280_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_5_fu_290_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_4_fu_284_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_fu_303_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_2_fu_296_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_5_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_4_fu_306_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_1_fu_334_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_7_fu_349_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_6_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_7_fu_344_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_6_fu_324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_1_fu_354_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_1_fu_338_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_4_fu_368_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_1_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_3_fu_360_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_5_fu_376_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_6_fu_393_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_2_fu_387_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_2_fu_419_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_399_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_9_fu_435_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_8_fu_413_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_9_fu_429_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_8_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_2_fu_441_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_2_fu_423_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_7_fu_455_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_2_fu_471_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_6_fu_447_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1496_8_fu_463_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_7_fu_480_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ashr_ln1333_3_fu_474_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_3_fu_506_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_11_fu_522_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_10_fu_500_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_11_fu_516_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_10_fu_494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_3_fu_528_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_3_fu_510_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component cordic_cordic_phabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    cordic_phase_V_U : component cordic_cordic_phabkb
    generic map (
        DataWidth => 10,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_phase_V_address0,
        ce0 => cordic_phase_V_ce0,
        q0 => cordic_phase_V_q0,
        address1 => cordic_phase_V_address1,
        ce1 => cordic_phase_V_ce1,
        q1 => cordic_phase_V_q1,
        address2 => cordic_phase_V_address2,
        ce2 => cordic_phase_V_ce2,
        q2 => cordic_phase_V_q2,
        address3 => cordic_phase_V_address3,
        ce3 => cordic_phase_V_ce3,
        q3 => cordic_phase_V_q3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Val2_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_0_reg_139 <= select_ln1496_10_fu_542_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_0_reg_139 <= ap_const_lv12_26D;
            end if; 
        end if;
    end process;

    p_Val2_2_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_2_0_reg_127 <= select_ln1496_9_fu_534_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_2_0_reg_127 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    sh_assign_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sh_assign_0_reg_151 <= add_ln17_reg_620;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sh_assign_0_reg_151 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    theta_V_buf_0_0_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                theta_V_buf_0_0_reg_117 <= select_ln1496_11_fu_550_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                theta_V_buf_0_0_reg_117 <= theta_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln17_reg_620 <= add_ln17_fu_274_p2;
                    or_ln17_1_reg_600(0) <= or_ln17_1_fu_252_p2(0);    or_ln17_1_reg_600(4 downto 2) <= or_ln17_1_fu_252_p2(4 downto 2);
                    or_ln17_2_reg_610(4 downto 2) <= or_ln17_2_fu_263_p2(4 downto 2);
                    or_ln17_reg_590(4 downto 1) <= or_ln17_fu_241_p2(4 downto 1);
                select_ln1496_1_reg_583 <= select_ln1496_1_fu_229_p3;
                select_ln1496_reg_576 <= select_ln1496_fu_221_p3;
                tmp_reg_566 <= theta_V_buf_0_0_reg_117(11 downto 11);
            end if;
        end if;
    end process;
    or_ln17_reg_590(0) <= '1';
    or_ln17_1_reg_600(1) <= '1';
    or_ln17_2_reg_610(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_166_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln17_fu_274_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) + unsigned(sh_assign_0_reg_151));
    add_ln703_10_fu_500_p2 <= std_logic_vector(unsigned(select_ln1496_6_fu_447_p3) + unsigned(ashr_ln1333_3_fu_474_p2));
    add_ln703_11_fu_516_p2 <= std_logic_vector(unsigned(select_ln1496_7_fu_455_p3) + unsigned(ashr_ln1333_7_fu_480_p2));
    add_ln703_1_fu_354_p2 <= std_logic_vector(unsigned(select_ln1496_2_fu_296_p3) + unsigned(zext_ln1265_1_fu_334_p1));
    add_ln703_2_fu_441_p2 <= std_logic_vector(unsigned(select_ln1496_5_fu_376_p3) + unsigned(zext_ln1265_2_fu_419_p1));
    add_ln703_3_fu_528_p2 <= std_logic_vector(unsigned(select_ln1496_8_fu_463_p3) + unsigned(zext_ln1265_3_fu_506_p1));
    add_ln703_4_fu_209_p2 <= std_logic_vector(unsigned(p_Val2_0_reg_139) + unsigned(ashr_ln1333_1_fu_178_p2));
    add_ln703_5_fu_290_p2 <= std_logic_vector(unsigned(theta_V_buf_0_0_reg_117) + unsigned(zext_ln1265_fu_280_p1));
    add_ln703_6_fu_329_p2 <= std_logic_vector(unsigned(select_ln1496_reg_576) + unsigned(ashr_ln1333_4_fu_306_p2));
    add_ln703_7_fu_344_p2 <= std_logic_vector(unsigned(select_ln1496_1_reg_583) + unsigned(ashr_ln1333_5_fu_311_p2));
    add_ln703_8_fu_413_p2 <= std_logic_vector(unsigned(select_ln1496_3_fu_360_p3) + unsigned(ashr_ln1333_2_fu_387_p2));
    add_ln703_9_fu_429_p2 <= std_logic_vector(unsigned(select_ln1496_4_fu_368_p3) + unsigned(ashr_ln1333_6_fu_393_p2));
    add_ln703_fu_198_p2 <= std_logic_vector(unsigned(p_Val2_2_0_reg_127) + unsigned(ashr_ln1333_fu_172_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_166_p2)
    begin
        if (((icmp_ln17_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_166_p2)
    begin
        if (((icmp_ln17_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln1333_1_fu_178_p2 <= std_logic_vector(shift_right(signed(p_Val2_2_0_reg_127),to_integer(unsigned('0' & sh_assign_0_cast4_fu_162_p1(12-1 downto 0)))));
    ashr_ln1333_2_fu_387_p2 <= std_logic_vector(shift_right(signed(select_ln1496_4_fu_368_p3),to_integer(unsigned('0' & zext_ln17_1_fu_384_p1(12-1 downto 0)))));
    ashr_ln1333_3_fu_474_p2 <= std_logic_vector(shift_right(signed(select_ln1496_7_fu_455_p3),to_integer(unsigned('0' & zext_ln17_2_fu_471_p1(12-1 downto 0)))));
    ashr_ln1333_4_fu_306_p2 <= std_logic_vector(shift_right(signed(select_ln1496_1_reg_583),to_integer(unsigned('0' & zext_ln17_fu_303_p1(12-1 downto 0)))));
    ashr_ln1333_5_fu_311_p2 <= std_logic_vector(shift_right(signed(select_ln1496_reg_576),to_integer(unsigned('0' & zext_ln17_fu_303_p1(12-1 downto 0)))));
    ashr_ln1333_6_fu_393_p2 <= std_logic_vector(shift_right(signed(select_ln1496_3_fu_360_p3),to_integer(unsigned('0' & zext_ln17_1_fu_384_p1(12-1 downto 0)))));
    ashr_ln1333_7_fu_480_p2 <= std_logic_vector(shift_right(signed(select_ln1496_6_fu_447_p3),to_integer(unsigned('0' & zext_ln17_2_fu_471_p1(12-1 downto 0)))));
    ashr_ln1333_fu_172_p2 <= std_logic_vector(shift_right(signed(p_Val2_0_reg_139),to_integer(unsigned('0' & sh_assign_0_cast4_fu_162_p1(12-1 downto 0)))));
    c_V <= p_Val2_0_reg_139;

    c_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_166_p2)
    begin
        if (((icmp_ln17_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_V_ap_vld <= ap_const_logic_1;
        else 
            c_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cordic_phase_V_address0 <= zext_ln30_fu_204_p1(6 - 1 downto 0);
    cordic_phase_V_address1 <= zext_ln30_1_fu_247_p1(6 - 1 downto 0);
    cordic_phase_V_address2 <= zext_ln30_2_fu_258_p1(6 - 1 downto 0);
    cordic_phase_V_address3 <= zext_ln30_3_fu_269_p1(6 - 1 downto 0);

    cordic_phase_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce0 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce1 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce2 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    cordic_phase_V_ce3_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce3 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    empty_2_fu_237_p1 <= sh_assign_0_reg_151(5 - 1 downto 0);
    icmp_ln17_fu_166_p2 <= "1" when (sh_assign_0_reg_151 = ap_const_lv6_20) else "0";
    or_ln17_1_fu_252_p2 <= (empty_2_fu_237_p1 or ap_const_lv5_2);
    or_ln17_2_fu_263_p2 <= (empty_2_fu_237_p1 or ap_const_lv5_3);
    or_ln17_fu_241_p2 <= (empty_2_fu_237_p1 or ap_const_lv5_1);
    s_V <= p_Val2_2_0_reg_127;

    s_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_166_p2)
    begin
        if (((icmp_ln17_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_V_ap_vld <= ap_const_logic_1;
        else 
            s_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1496_10_fu_542_p3 <= 
        add_ln703_11_fu_516_p2 when (tmp_3_fu_486_p3(0) = '1') else 
        sub_ln703_10_fu_494_p2;
    select_ln1496_11_fu_550_p3 <= 
        add_ln703_3_fu_528_p2 when (tmp_3_fu_486_p3(0) = '1') else 
        sub_ln703_3_fu_510_p2;
    select_ln1496_1_fu_229_p3 <= 
        add_ln703_4_fu_209_p2 when (tmp_fu_184_p3(0) = '1') else 
        sub_ln703_fu_192_p2;
    select_ln1496_2_fu_296_p3 <= 
        add_ln703_5_fu_290_p2 when (tmp_reg_566(0) = '1') else 
        sub_ln703_4_fu_284_p2;
    select_ln1496_3_fu_360_p3 <= 
        sub_ln703_7_fu_349_p2 when (tmp_1_fu_316_p3(0) = '1') else 
        add_ln703_6_fu_329_p2;
    select_ln1496_4_fu_368_p3 <= 
        add_ln703_7_fu_344_p2 when (tmp_1_fu_316_p3(0) = '1') else 
        sub_ln703_6_fu_324_p2;
    select_ln1496_5_fu_376_p3 <= 
        add_ln703_1_fu_354_p2 when (tmp_1_fu_316_p3(0) = '1') else 
        sub_ln703_1_fu_338_p2;
    select_ln1496_6_fu_447_p3 <= 
        sub_ln703_9_fu_435_p2 when (tmp_2_fu_399_p3(0) = '1') else 
        add_ln703_8_fu_413_p2;
    select_ln1496_7_fu_455_p3 <= 
        add_ln703_9_fu_429_p2 when (tmp_2_fu_399_p3(0) = '1') else 
        sub_ln703_8_fu_407_p2;
    select_ln1496_8_fu_463_p3 <= 
        add_ln703_2_fu_441_p2 when (tmp_2_fu_399_p3(0) = '1') else 
        sub_ln703_2_fu_423_p2;
    select_ln1496_9_fu_534_p3 <= 
        sub_ln703_11_fu_522_p2 when (tmp_3_fu_486_p3(0) = '1') else 
        add_ln703_10_fu_500_p2;
    select_ln1496_fu_221_p3 <= 
        sub_ln703_5_fu_215_p2 when (tmp_fu_184_p3(0) = '1') else 
        add_ln703_fu_198_p2;
    sh_assign_0_cast4_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_0_reg_151),12));
    sub_ln703_10_fu_494_p2 <= std_logic_vector(unsigned(select_ln1496_7_fu_455_p3) - unsigned(ashr_ln1333_7_fu_480_p2));
    sub_ln703_11_fu_522_p2 <= std_logic_vector(unsigned(select_ln1496_6_fu_447_p3) - unsigned(ashr_ln1333_3_fu_474_p2));
    sub_ln703_1_fu_338_p2 <= std_logic_vector(unsigned(select_ln1496_2_fu_296_p3) - unsigned(zext_ln1265_1_fu_334_p1));
    sub_ln703_2_fu_423_p2 <= std_logic_vector(unsigned(select_ln1496_5_fu_376_p3) - unsigned(zext_ln1265_2_fu_419_p1));
    sub_ln703_3_fu_510_p2 <= std_logic_vector(unsigned(select_ln1496_8_fu_463_p3) - unsigned(zext_ln1265_3_fu_506_p1));
    sub_ln703_4_fu_284_p2 <= std_logic_vector(unsigned(theta_V_buf_0_0_reg_117) - unsigned(zext_ln1265_fu_280_p1));
    sub_ln703_5_fu_215_p2 <= std_logic_vector(unsigned(p_Val2_2_0_reg_127) - unsigned(ashr_ln1333_fu_172_p2));
    sub_ln703_6_fu_324_p2 <= std_logic_vector(unsigned(select_ln1496_1_reg_583) - unsigned(ashr_ln1333_5_fu_311_p2));
    sub_ln703_7_fu_349_p2 <= std_logic_vector(unsigned(select_ln1496_reg_576) - unsigned(ashr_ln1333_4_fu_306_p2));
    sub_ln703_8_fu_407_p2 <= std_logic_vector(unsigned(select_ln1496_4_fu_368_p3) - unsigned(ashr_ln1333_6_fu_393_p2));
    sub_ln703_9_fu_435_p2 <= std_logic_vector(unsigned(select_ln1496_3_fu_360_p3) - unsigned(ashr_ln1333_2_fu_387_p2));
    sub_ln703_fu_192_p2 <= std_logic_vector(unsigned(p_Val2_0_reg_139) - unsigned(ashr_ln1333_1_fu_178_p2));
    tmp_1_fu_316_p3 <= select_ln1496_2_fu_296_p3(11 downto 11);
    tmp_2_fu_399_p3 <= select_ln1496_5_fu_376_p3(11 downto 11);
    tmp_3_fu_486_p3 <= select_ln1496_8_fu_463_p3(11 downto 11);
    tmp_fu_184_p3 <= theta_V_buf_0_0_reg_117(11 downto 11);
    zext_ln1265_1_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q1),12));
    zext_ln1265_2_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q2),12));
    zext_ln1265_3_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q3),12));
    zext_ln1265_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q0),12));
    zext_ln17_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_1_reg_600),12));
    zext_ln17_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_2_reg_610),12));
    zext_ln17_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_reg_590),12));
    zext_ln30_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_fu_241_p2),64));
    zext_ln30_2_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_1_fu_252_p2),64));
    zext_ln30_3_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln17_2_fu_263_p2),64));
    zext_ln30_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_0_reg_151),64));
end behav;
