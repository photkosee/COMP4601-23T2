// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.255167,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=127,HLS_SYN_LUT=916,HLS_VERSION=2020_1}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta_V,
        s_V,
        s_V_ap_vld,
        c_V,
        c_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] theta_V;
output  [11:0] s_V;
output   s_V_ap_vld;
output  [11:0] c_V;
output   c_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_V_ap_vld;
reg c_V_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] cordic_phase_V_address0;
reg    cordic_phase_V_ce0;
wire   [9:0] cordic_phase_V_q0;
wire   [5:0] cordic_phase_V_address1;
reg    cordic_phase_V_ce1;
wire   [9:0] cordic_phase_V_q1;
wire   [5:0] cordic_phase_V_address2;
reg    cordic_phase_V_ce2;
wire   [9:0] cordic_phase_V_q2;
wire   [5:0] cordic_phase_V_address3;
reg    cordic_phase_V_ce3;
wire   [9:0] cordic_phase_V_q3;
wire   [0:0] tmp_fu_184_p3;
reg   [0:0] tmp_reg_566;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln17_fu_166_p2;
wire   [11:0] select_ln1496_fu_221_p3;
reg   [11:0] select_ln1496_reg_576;
wire   [11:0] select_ln1496_1_fu_229_p3;
reg   [11:0] select_ln1496_1_reg_583;
wire   [4:0] or_ln17_fu_241_p2;
reg   [4:0] or_ln17_reg_590;
wire   [4:0] or_ln17_1_fu_252_p2;
reg   [4:0] or_ln17_1_reg_600;
wire   [4:0] or_ln17_2_fu_263_p2;
reg   [4:0] or_ln17_2_reg_610;
wire   [5:0] add_ln17_fu_274_p2;
reg   [5:0] add_ln17_reg_620;
wire   [11:0] select_ln1496_9_fu_534_p3;
wire    ap_CS_fsm_state3;
wire   [11:0] select_ln1496_10_fu_542_p3;
wire   [11:0] select_ln1496_11_fu_550_p3;
reg   [11:0] theta_V_buf_0_0_reg_117;
reg   [11:0] p_Val2_2_0_reg_127;
reg   [11:0] p_Val2_0_reg_139;
reg   [5:0] sh_assign_0_reg_151;
wire   [63:0] zext_ln30_fu_204_p1;
wire   [63:0] zext_ln30_1_fu_247_p1;
wire   [63:0] zext_ln30_2_fu_258_p1;
wire   [63:0] zext_ln30_3_fu_269_p1;
wire   [11:0] sh_assign_0_cast4_fu_162_p1;
wire   [11:0] ashr_ln1333_1_fu_178_p2;
wire   [11:0] ashr_ln1333_fu_172_p2;
wire   [11:0] sub_ln703_5_fu_215_p2;
wire   [11:0] add_ln703_fu_198_p2;
wire   [11:0] add_ln703_4_fu_209_p2;
wire   [11:0] sub_ln703_fu_192_p2;
wire   [4:0] empty_2_fu_237_p1;
wire   [11:0] zext_ln1265_fu_280_p1;
wire   [11:0] add_ln703_5_fu_290_p2;
wire   [11:0] sub_ln703_4_fu_284_p2;
wire   [11:0] zext_ln17_fu_303_p1;
wire   [11:0] select_ln1496_2_fu_296_p3;
wire   [11:0] ashr_ln1333_5_fu_311_p2;
wire   [11:0] ashr_ln1333_4_fu_306_p2;
wire   [11:0] zext_ln1265_1_fu_334_p1;
wire   [0:0] tmp_1_fu_316_p3;
wire   [11:0] sub_ln703_7_fu_349_p2;
wire   [11:0] add_ln703_6_fu_329_p2;
wire   [11:0] add_ln703_7_fu_344_p2;
wire   [11:0] sub_ln703_6_fu_324_p2;
wire   [11:0] add_ln703_1_fu_354_p2;
wire   [11:0] sub_ln703_1_fu_338_p2;
wire   [11:0] select_ln1496_4_fu_368_p3;
wire   [11:0] zext_ln17_1_fu_384_p1;
wire   [11:0] select_ln1496_3_fu_360_p3;
wire   [11:0] select_ln1496_5_fu_376_p3;
wire   [11:0] ashr_ln1333_6_fu_393_p2;
wire   [11:0] ashr_ln1333_2_fu_387_p2;
wire   [11:0] zext_ln1265_2_fu_419_p1;
wire   [0:0] tmp_2_fu_399_p3;
wire   [11:0] sub_ln703_9_fu_435_p2;
wire   [11:0] add_ln703_8_fu_413_p2;
wire   [11:0] add_ln703_9_fu_429_p2;
wire   [11:0] sub_ln703_8_fu_407_p2;
wire   [11:0] add_ln703_2_fu_441_p2;
wire   [11:0] sub_ln703_2_fu_423_p2;
wire   [11:0] select_ln1496_7_fu_455_p3;
wire   [11:0] zext_ln17_2_fu_471_p1;
wire   [11:0] select_ln1496_6_fu_447_p3;
wire   [11:0] select_ln1496_8_fu_463_p3;
wire   [11:0] ashr_ln1333_7_fu_480_p2;
wire   [11:0] ashr_ln1333_3_fu_474_p2;
wire   [11:0] zext_ln1265_3_fu_506_p1;
wire   [0:0] tmp_3_fu_486_p3;
wire   [11:0] sub_ln703_11_fu_522_p2;
wire   [11:0] add_ln703_10_fu_500_p2;
wire   [11:0] add_ln703_11_fu_516_p2;
wire   [11:0] sub_ln703_10_fu_494_p2;
wire   [11:0] add_ln703_3_fu_528_p2;
wire   [11:0] sub_ln703_3_fu_510_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

cordic_cordic_phabkb #(
    .DataWidth( 10 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_phase_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_phase_V_address0),
    .ce0(cordic_phase_V_ce0),
    .q0(cordic_phase_V_q0),
    .address1(cordic_phase_V_address1),
    .ce1(cordic_phase_V_ce1),
    .q1(cordic_phase_V_q1),
    .address2(cordic_phase_V_address2),
    .ce2(cordic_phase_V_ce2),
    .q2(cordic_phase_V_q2),
    .address3(cordic_phase_V_address3),
    .ce3(cordic_phase_V_ce3),
    .q3(cordic_phase_V_q3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_0_reg_139 <= select_ln1496_10_fu_542_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_0_reg_139 <= 12'd621;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_2_0_reg_127 <= select_ln1496_9_fu_534_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_2_0_reg_127 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sh_assign_0_reg_151 <= add_ln17_reg_620;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sh_assign_0_reg_151 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        theta_V_buf_0_0_reg_117 <= select_ln1496_11_fu_550_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        theta_V_buf_0_0_reg_117 <= theta_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln17_reg_620 <= add_ln17_fu_274_p2;
        or_ln17_1_reg_600[0] <= or_ln17_1_fu_252_p2[0];
or_ln17_1_reg_600[4 : 2] <= or_ln17_1_fu_252_p2[4 : 2];
        or_ln17_2_reg_610[4 : 2] <= or_ln17_2_fu_263_p2[4 : 2];
        or_ln17_reg_590[4 : 1] <= or_ln17_fu_241_p2[4 : 1];
        select_ln1496_1_reg_583 <= select_ln1496_1_fu_229_p3;
        select_ln1496_reg_576 <= select_ln1496_fu_221_p3;
        tmp_reg_566 <= theta_V_buf_0_0_reg_117[32'd11];
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_V_ap_vld = 1'b1;
    end else begin
        c_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_ce0 = 1'b1;
    end else begin
        cordic_phase_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_ce1 = 1'b1;
    end else begin
        cordic_phase_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_ce2 = 1'b1;
    end else begin
        cordic_phase_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_V_ce3 = 1'b1;
    end else begin
        cordic_phase_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_V_ap_vld = 1'b1;
    end else begin
        s_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_274_p2 = (6'd4 + sh_assign_0_reg_151);

assign add_ln703_10_fu_500_p2 = (select_ln1496_6_fu_447_p3 + ashr_ln1333_3_fu_474_p2);

assign add_ln703_11_fu_516_p2 = (select_ln1496_7_fu_455_p3 + ashr_ln1333_7_fu_480_p2);

assign add_ln703_1_fu_354_p2 = (select_ln1496_2_fu_296_p3 + zext_ln1265_1_fu_334_p1);

assign add_ln703_2_fu_441_p2 = (select_ln1496_5_fu_376_p3 + zext_ln1265_2_fu_419_p1);

assign add_ln703_3_fu_528_p2 = (select_ln1496_8_fu_463_p3 + zext_ln1265_3_fu_506_p1);

assign add_ln703_4_fu_209_p2 = (p_Val2_0_reg_139 + ashr_ln1333_1_fu_178_p2);

assign add_ln703_5_fu_290_p2 = (theta_V_buf_0_0_reg_117 + zext_ln1265_fu_280_p1);

assign add_ln703_6_fu_329_p2 = (select_ln1496_reg_576 + ashr_ln1333_4_fu_306_p2);

assign add_ln703_7_fu_344_p2 = (select_ln1496_1_reg_583 + ashr_ln1333_5_fu_311_p2);

assign add_ln703_8_fu_413_p2 = (select_ln1496_3_fu_360_p3 + ashr_ln1333_2_fu_387_p2);

assign add_ln703_9_fu_429_p2 = (select_ln1496_4_fu_368_p3 + ashr_ln1333_6_fu_393_p2);

assign add_ln703_fu_198_p2 = (p_Val2_2_0_reg_127 + ashr_ln1333_fu_172_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ashr_ln1333_1_fu_178_p2 = $signed(p_Val2_2_0_reg_127) >>> sh_assign_0_cast4_fu_162_p1;

assign ashr_ln1333_2_fu_387_p2 = $signed(select_ln1496_4_fu_368_p3) >>> zext_ln17_1_fu_384_p1;

assign ashr_ln1333_3_fu_474_p2 = $signed(select_ln1496_7_fu_455_p3) >>> zext_ln17_2_fu_471_p1;

assign ashr_ln1333_4_fu_306_p2 = $signed(select_ln1496_1_reg_583) >>> zext_ln17_fu_303_p1;

assign ashr_ln1333_5_fu_311_p2 = $signed(select_ln1496_reg_576) >>> zext_ln17_fu_303_p1;

assign ashr_ln1333_6_fu_393_p2 = $signed(select_ln1496_3_fu_360_p3) >>> zext_ln17_1_fu_384_p1;

assign ashr_ln1333_7_fu_480_p2 = $signed(select_ln1496_6_fu_447_p3) >>> zext_ln17_2_fu_471_p1;

assign ashr_ln1333_fu_172_p2 = $signed(p_Val2_0_reg_139) >>> sh_assign_0_cast4_fu_162_p1;

assign c_V = p_Val2_0_reg_139;

assign cordic_phase_V_address0 = zext_ln30_fu_204_p1;

assign cordic_phase_V_address1 = zext_ln30_1_fu_247_p1;

assign cordic_phase_V_address2 = zext_ln30_2_fu_258_p1;

assign cordic_phase_V_address3 = zext_ln30_3_fu_269_p1;

assign empty_2_fu_237_p1 = sh_assign_0_reg_151[4:0];

assign icmp_ln17_fu_166_p2 = ((sh_assign_0_reg_151 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln17_1_fu_252_p2 = (empty_2_fu_237_p1 | 5'd2);

assign or_ln17_2_fu_263_p2 = (empty_2_fu_237_p1 | 5'd3);

assign or_ln17_fu_241_p2 = (empty_2_fu_237_p1 | 5'd1);

assign s_V = p_Val2_2_0_reg_127;

assign select_ln1496_10_fu_542_p3 = ((tmp_3_fu_486_p3[0:0] === 1'b1) ? add_ln703_11_fu_516_p2 : sub_ln703_10_fu_494_p2);

assign select_ln1496_11_fu_550_p3 = ((tmp_3_fu_486_p3[0:0] === 1'b1) ? add_ln703_3_fu_528_p2 : sub_ln703_3_fu_510_p2);

assign select_ln1496_1_fu_229_p3 = ((tmp_fu_184_p3[0:0] === 1'b1) ? add_ln703_4_fu_209_p2 : sub_ln703_fu_192_p2);

assign select_ln1496_2_fu_296_p3 = ((tmp_reg_566[0:0] === 1'b1) ? add_ln703_5_fu_290_p2 : sub_ln703_4_fu_284_p2);

assign select_ln1496_3_fu_360_p3 = ((tmp_1_fu_316_p3[0:0] === 1'b1) ? sub_ln703_7_fu_349_p2 : add_ln703_6_fu_329_p2);

assign select_ln1496_4_fu_368_p3 = ((tmp_1_fu_316_p3[0:0] === 1'b1) ? add_ln703_7_fu_344_p2 : sub_ln703_6_fu_324_p2);

assign select_ln1496_5_fu_376_p3 = ((tmp_1_fu_316_p3[0:0] === 1'b1) ? add_ln703_1_fu_354_p2 : sub_ln703_1_fu_338_p2);

assign select_ln1496_6_fu_447_p3 = ((tmp_2_fu_399_p3[0:0] === 1'b1) ? sub_ln703_9_fu_435_p2 : add_ln703_8_fu_413_p2);

assign select_ln1496_7_fu_455_p3 = ((tmp_2_fu_399_p3[0:0] === 1'b1) ? add_ln703_9_fu_429_p2 : sub_ln703_8_fu_407_p2);

assign select_ln1496_8_fu_463_p3 = ((tmp_2_fu_399_p3[0:0] === 1'b1) ? add_ln703_2_fu_441_p2 : sub_ln703_2_fu_423_p2);

assign select_ln1496_9_fu_534_p3 = ((tmp_3_fu_486_p3[0:0] === 1'b1) ? sub_ln703_11_fu_522_p2 : add_ln703_10_fu_500_p2);

assign select_ln1496_fu_221_p3 = ((tmp_fu_184_p3[0:0] === 1'b1) ? sub_ln703_5_fu_215_p2 : add_ln703_fu_198_p2);

assign sh_assign_0_cast4_fu_162_p1 = sh_assign_0_reg_151;

assign sub_ln703_10_fu_494_p2 = (select_ln1496_7_fu_455_p3 - ashr_ln1333_7_fu_480_p2);

assign sub_ln703_11_fu_522_p2 = (select_ln1496_6_fu_447_p3 - ashr_ln1333_3_fu_474_p2);

assign sub_ln703_1_fu_338_p2 = (select_ln1496_2_fu_296_p3 - zext_ln1265_1_fu_334_p1);

assign sub_ln703_2_fu_423_p2 = (select_ln1496_5_fu_376_p3 - zext_ln1265_2_fu_419_p1);

assign sub_ln703_3_fu_510_p2 = (select_ln1496_8_fu_463_p3 - zext_ln1265_3_fu_506_p1);

assign sub_ln703_4_fu_284_p2 = (theta_V_buf_0_0_reg_117 - zext_ln1265_fu_280_p1);

assign sub_ln703_5_fu_215_p2 = (p_Val2_2_0_reg_127 - ashr_ln1333_fu_172_p2);

assign sub_ln703_6_fu_324_p2 = (select_ln1496_1_reg_583 - ashr_ln1333_5_fu_311_p2);

assign sub_ln703_7_fu_349_p2 = (select_ln1496_reg_576 - ashr_ln1333_4_fu_306_p2);

assign sub_ln703_8_fu_407_p2 = (select_ln1496_4_fu_368_p3 - ashr_ln1333_6_fu_393_p2);

assign sub_ln703_9_fu_435_p2 = (select_ln1496_3_fu_360_p3 - ashr_ln1333_2_fu_387_p2);

assign sub_ln703_fu_192_p2 = (p_Val2_0_reg_139 - ashr_ln1333_1_fu_178_p2);

assign tmp_1_fu_316_p3 = select_ln1496_2_fu_296_p3[32'd11];

assign tmp_2_fu_399_p3 = select_ln1496_5_fu_376_p3[32'd11];

assign tmp_3_fu_486_p3 = select_ln1496_8_fu_463_p3[32'd11];

assign tmp_fu_184_p3 = theta_V_buf_0_0_reg_117[32'd11];

assign zext_ln1265_1_fu_334_p1 = cordic_phase_V_q1;

assign zext_ln1265_2_fu_419_p1 = cordic_phase_V_q2;

assign zext_ln1265_3_fu_506_p1 = cordic_phase_V_q3;

assign zext_ln1265_fu_280_p1 = cordic_phase_V_q0;

assign zext_ln17_1_fu_384_p1 = or_ln17_1_reg_600;

assign zext_ln17_2_fu_471_p1 = or_ln17_2_reg_610;

assign zext_ln17_fu_303_p1 = or_ln17_reg_590;

assign zext_ln30_1_fu_247_p1 = or_ln17_fu_241_p2;

assign zext_ln30_2_fu_258_p1 = or_ln17_1_fu_252_p2;

assign zext_ln30_3_fu_269_p1 = or_ln17_2_fu_263_p2;

assign zext_ln30_fu_204_p1 = sh_assign_0_reg_151;

always @ (posedge ap_clk) begin
    or_ln17_reg_590[0] <= 1'b1;
    or_ln17_1_reg_600[1] <= 1'b1;
    or_ln17_2_reg_610[1:0] <= 2'b11;
end

endmodule //cordic
