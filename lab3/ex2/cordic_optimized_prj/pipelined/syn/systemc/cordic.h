// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cordic_HH_
#define _cordic_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cordic_cordic_phabkb.h"

namespace ap_rtl {

struct cordic : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > theta_V;
    sc_out< sc_lv<12> > s_V;
    sc_out< sc_logic > s_V_ap_vld;
    sc_out< sc_lv<12> > c_V;
    sc_out< sc_logic > c_V_ap_vld;


    // Module declarations
    cordic(sc_module_name name);
    SC_HAS_PROCESS(cordic);

    ~cordic();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    cordic_cordic_phabkb* cordic_phase_V_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > cordic_phase_V_address0;
    sc_signal< sc_logic > cordic_phase_V_ce0;
    sc_signal< sc_lv<10> > cordic_phase_V_q0;
    sc_signal< sc_lv<12> > p_Val2_4_reg_89;
    sc_signal< sc_lv<12> > p_Val2_2_reg_99;
    sc_signal< sc_lv<12> > p_Val2_s_reg_112;
    sc_signal< sc_lv<6> > ush_reg_125;
    sc_signal< sc_lv<1> > icmp_ln17_fu_137_p2;
    sc_signal< sc_lv<1> > icmp_ln17_reg_247;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > j_fu_143_p2;
    sc_signal< sc_lv<6> > j_reg_251;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<12> > current_sin_V_2_fu_218_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<12> > current_cos_V_2_fu_226_p3;
    sc_signal< sc_lv<12> > select_ln1496_fu_234_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<6> > ap_phi_mux_ush_phi_fu_129_p4;
    sc_signal< sc_lv<64> > zext_ln30_fu_149_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<12> > zext_ln17_fu_154_p1;
    sc_signal< sc_lv<12> > r_V_1_fu_164_p2;
    sc_signal< sc_lv<12> > r_V_fu_158_p2;
    sc_signal< sc_lv<12> > zext_ln1265_fu_190_p1;
    sc_signal< sc_lv<1> > tmp_1_fu_170_p3;
    sc_signal< sc_lv<12> > current_sin_V_1_fu_206_p2;
    sc_signal< sc_lv<12> > current_sin_V_fu_184_p2;
    sc_signal< sc_lv<12> > current_cos_V_1_fu_200_p2;
    sc_signal< sc_lv<12> > current_cos_V_fu_178_p2;
    sc_signal< sc_lv<12> > add_ln703_fu_212_p2;
    sc_signal< sc_lv<12> > sub_ln703_fu_194_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_26D;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_B;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln703_fu_212_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_ush_phi_fu_129_p4();
    void thread_ap_ready();
    void thread_c_V();
    void thread_c_V_ap_vld();
    void thread_cordic_phase_V_address0();
    void thread_cordic_phase_V_ce0();
    void thread_current_cos_V_1_fu_200_p2();
    void thread_current_cos_V_2_fu_226_p3();
    void thread_current_cos_V_fu_178_p2();
    void thread_current_sin_V_1_fu_206_p2();
    void thread_current_sin_V_2_fu_218_p3();
    void thread_current_sin_V_fu_184_p2();
    void thread_icmp_ln17_fu_137_p2();
    void thread_j_fu_143_p2();
    void thread_r_V_1_fu_164_p2();
    void thread_r_V_fu_158_p2();
    void thread_s_V();
    void thread_s_V_ap_vld();
    void thread_select_ln1496_fu_234_p3();
    void thread_sub_ln703_fu_194_p2();
    void thread_tmp_1_fu_170_p3();
    void thread_zext_ln1265_fu_190_p1();
    void thread_zext_ln17_fu_154_p1();
    void thread_zext_ln30_fu_149_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
