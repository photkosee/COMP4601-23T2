-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_V : IN STD_LOGIC_VECTOR (15 downto 0);
    s_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_V_ap_vld : OUT STD_LOGIC;
    c_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    c_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.302750,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=142,HLS_SYN_LUT=357,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_4000 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_26DD : STD_LOGIC_VECTOR (15 downto 0) := "0010011011011101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_phase_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce0 : STD_LOGIC;
    signal cordic_phase_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_fu_153_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_355 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_cos_V_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_cos_V_reg_365 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_sin_V_fu_239_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_sin_V_reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal factor_V_fu_298_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal factor_V_reg_380 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln703_fu_327_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_6_reg_91 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_reg_101 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_reg_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_fu_167_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1118_fu_171_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_177_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_4_fu_333_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1116_2_fu_202_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1118_1_fu_206_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_2_fu_212_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_5_fu_340_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sin_shift_V_fu_224_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal cos_shift_V_fu_193_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1148_fu_250_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1148_fu_262_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1148_2_fu_278_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1148_1_fu_268_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_1_fu_292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1148_1_fu_288_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln703_fu_306_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln703_2_fu_310_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln703_fu_316_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln703_fu_323_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_fu_333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_fu_189_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_5_fu_340_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component cordic_mul_mul_17cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component cordic_cordic_phabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    cordic_phase_V_U : component cordic_cordic_phabkb
    generic map (
        DataWidth => 14,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_phase_V_address0,
        ce0 => cordic_phase_V_ce0,
        q0 => cordic_phase_V_q0);

    cordic_mul_mul_17cud_U1 : component cordic_mul_mul_17cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_fu_177_p3,
        din1 => r_V_4_fu_333_p1,
        dout => r_V_4_fu_333_p2);

    cordic_mul_mul_17cud_U2 : component cordic_mul_mul_17cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_2_fu_212_p3,
        din1 => r_V_5_fu_340_p1,
        dout => r_V_5_fu_340_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_136 <= j_reg_355;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_136 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_2_reg_124 <= current_cos_V_reg_365;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_2_reg_124 <= ap_const_lv16_26DD;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_4_reg_112 <= current_sin_V_reg_370;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_4_reg_112 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_Val2_6_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_6_reg_91 <= sub_ln703_fu_327_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_6_reg_91 <= theta_V;
            end if; 
        end if;
    end process;

    t_V_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_reg_101 <= factor_V_reg_380;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_101 <= ap_const_lv16_4000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                current_cos_V_reg_365 <= current_cos_V_fu_233_p2;
                current_sin_V_reg_370 <= current_sin_V_fu_239_p2;
                factor_V_reg_380 <= factor_V_fu_298_p3;
                tmp_reg_360 <= p_Val2_6_reg_91(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_355 <= j_fu_153_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_147_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_147_p2)
    begin
        if (((icmp_ln18_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_147_p2)
    begin
        if (((icmp_ln18_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_V <= p_Val2_2_reg_124;

    c_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_147_p2)
    begin
        if (((icmp_ln18_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_V_ap_vld <= ap_const_logic_1;
        else 
            c_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cordic_phase_V_address0 <= zext_ln31_fu_245_p1(6 - 1 downto 0);

    cordic_phase_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce0 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cos_shift_V_fu_193_p4 <= r_V_4_fu_333_p2(29 downto 14);
    current_cos_V_fu_233_p2 <= std_logic_vector(signed(p_Val2_2_reg_124) - signed(sin_shift_V_fu_224_p4));
    current_sin_V_fu_239_p2 <= std_logic_vector(unsigned(cos_shift_V_fu_193_p4) + unsigned(p_Val2_4_reg_112));
    factor_V_fu_298_p3 <= 
        sub_ln1148_1_fu_292_p2 when (tmp_1_fu_254_p3(0) = '1') else 
        sext_ln1148_1_fu_288_p1;
    icmp_ln18_fu_147_p2 <= "1" when (j_0_reg_136 = ap_const_lv6_20) else "0";
    j_fu_153_p2 <= std_logic_vector(unsigned(j_0_reg_136) + unsigned(ap_const_lv6_1));
    r_V_2_fu_212_p3 <= 
        sub_ln1118_1_fu_206_p2 when (tmp_fu_159_p3(0) = '1') else 
        sext_ln1116_2_fu_202_p1;
    r_V_4_fu_333_p1 <= sext_ln1118_fu_189_p1(16 - 1 downto 0);
    r_V_5_fu_340_p1 <= sext_ln1118_fu_189_p1(16 - 1 downto 0);
    r_V_fu_177_p3 <= 
        sub_ln1118_fu_171_p2 when (tmp_fu_159_p3(0) = '1') else 
        sext_ln1116_fu_167_p1;
    s_V <= p_Val2_4_reg_112;

    s_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_147_p2)
    begin
        if (((icmp_ln18_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_V_ap_vld <= ap_const_logic_1;
        else 
            s_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln703_fu_316_p3 <= 
        sub_ln703_2_fu_310_p2 when (tmp_reg_360(0) = '1') else 
        zext_ln703_fu_306_p1;
        sext_ln1116_2_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_112),17));

        sext_ln1116_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_124),17));

        sext_ln1118_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_reg_101),30));

        sext_ln1148_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_2_fu_278_p4),16));

        sext_ln1148_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_reg_101),17));

        sext_ln703_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln703_fu_316_p3),16));

    sin_shift_V_fu_224_p4 <= r_V_5_fu_340_p2(29 downto 14);
    sub_ln1118_1_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1116_2_fu_202_p1));
    sub_ln1118_fu_171_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1116_fu_167_p1));
    sub_ln1148_1_fu_292_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1148_1_fu_268_p4));
    sub_ln1148_fu_262_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1148_fu_250_p1));
    sub_ln703_2_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(zext_ln703_fu_306_p1));
    sub_ln703_fu_327_p2 <= std_logic_vector(unsigned(p_Val2_6_reg_91) - unsigned(sext_ln703_fu_323_p1));
    tmp_1_fu_254_p3 <= t_V_reg_101(15 downto 15);
    tmp_fu_159_p3 <= p_Val2_6_reg_91(15 downto 15);
    trunc_ln1148_1_fu_268_p4 <= sub_ln1148_fu_262_p2(16 downto 1);
    trunc_ln1148_2_fu_278_p4 <= t_V_reg_101(15 downto 1);
    zext_ln31_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_136),64));
    zext_ln703_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q0),15));
end behav;
