// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cordic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cordic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cordic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> cordic::ap_ST_fsm_state1 = "1";
const sc_lv<13> cordic::ap_ST_fsm_state2 = "10";
const sc_lv<13> cordic::ap_ST_fsm_state3 = "100";
const sc_lv<13> cordic::ap_ST_fsm_state4 = "1000";
const sc_lv<13> cordic::ap_ST_fsm_state5 = "10000";
const sc_lv<13> cordic::ap_ST_fsm_state6 = "100000";
const sc_lv<13> cordic::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> cordic::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> cordic::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> cordic::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> cordic::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> cordic::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> cordic::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> cordic::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cordic::ap_const_lv32_5 = "101";
const sc_lv<32> cordic::ap_const_lv32_8 = "1000";
const sc_lv<32> cordic::ap_const_lv32_1 = "1";
const sc_lv<1> cordic::ap_const_lv1_0 = "0";
const sc_lv<32> cordic::ap_const_lv32_2 = "10";
const sc_lv<32> cordic::ap_const_lv32_9 = "1001";
const sc_lv<32> cordic::ap_const_lv32_C = "1100";
const sc_lv<32> cordic::ap_const_lv32_3F1B74BC = "111111000110110111010010111100";
const sc_lv<32> cordic::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<6> cordic::ap_const_lv6_0 = "000000";
const sc_lv<1> cordic::ap_const_lv1_1 = "1";
const sc_lv<32> cordic::ap_const_lv32_6 = "110";
const sc_lv<32> cordic::ap_const_lv32_3 = "11";
const sc_lv<32> cordic::ap_const_lv32_3F000000 = "111111000000000000000000000000";
const sc_lv<6> cordic::ap_const_lv6_20 = "100000";
const sc_lv<6> cordic::ap_const_lv6_1 = "1";
const sc_lv<32> cordic::ap_const_lv32_17 = "10111";
const sc_lv<32> cordic::ap_const_lv32_1E = "11110";
const sc_lv<8> cordic::ap_const_lv8_FF = "11111111";
const sc_lv<23> cordic::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> cordic::ap_const_lv32_BF800000 = "10111111100000000000000000000000";
const sc_lv<5> cordic::ap_const_lv5_4 = "100";
const bool cordic::ap_const_boolean_1 = true;

cordic::cordic(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cordic_phase_U = new cordic_cordic_phase("cordic_phase_U");
    cordic_phase_U->clk(ap_clk);
    cordic_phase_U->reset(ap_rst);
    cordic_phase_U->address0(cordic_phase_address0);
    cordic_phase_U->ce0(cordic_phase_ce0);
    cordic_phase_U->q0(cordic_phase_q0);
    cordic_fsub_32ns_bkb_U1 = new cordic_fsub_32ns_bkb<1,4,32,32,32>("cordic_fsub_32ns_bkb_U1");
    cordic_fsub_32ns_bkb_U1->clk(ap_clk);
    cordic_fsub_32ns_bkb_U1->reset(ap_rst);
    cordic_fsub_32ns_bkb_U1->din0(grp_fu_142_p0);
    cordic_fsub_32ns_bkb_U1->din1(grp_fu_142_p1);
    cordic_fsub_32ns_bkb_U1->ce(ap_var_for_const0);
    cordic_fsub_32ns_bkb_U1->dout(grp_fu_142_p2);
    cordic_fadd_32ns_cud_U2 = new cordic_fadd_32ns_cud<1,4,32,32,32>("cordic_fadd_32ns_cud_U2");
    cordic_fadd_32ns_cud_U2->clk(ap_clk);
    cordic_fadd_32ns_cud_U2->reset(ap_rst);
    cordic_fadd_32ns_cud_U2->din0(current_sin_0_reg_83);
    cordic_fadd_32ns_cud_U2->din1(reg_177);
    cordic_fadd_32ns_cud_U2->ce(ap_var_for_const0);
    cordic_fadd_32ns_cud_U2->dout(grp_fu_148_p2);
    cordic_fmul_32ns_dEe_U3 = new cordic_fmul_32ns_dEe<1,3,32,32,32>("cordic_fmul_32ns_dEe_U3");
    cordic_fmul_32ns_dEe_U3->clk(ap_clk);
    cordic_fmul_32ns_dEe_U3->reset(ap_rst);
    cordic_fmul_32ns_dEe_U3->din0(grp_fu_153_p0);
    cordic_fmul_32ns_dEe_U3->din1(grp_fu_153_p1);
    cordic_fmul_32ns_dEe_U3->ce(ap_var_for_const0);
    cordic_fmul_32ns_dEe_U3->dout(grp_fu_153_p2);
    cordic_fmul_32ns_dEe_U4 = new cordic_fmul_32ns_dEe<1,3,32,32,32>("cordic_fmul_32ns_dEe_U4");
    cordic_fmul_32ns_dEe_U4->clk(ap_clk);
    cordic_fmul_32ns_dEe_U4->reset(ap_rst);
    cordic_fmul_32ns_dEe_U4->din0(grp_fu_158_p0);
    cordic_fmul_32ns_dEe_U4->din1(grp_fu_158_p1);
    cordic_fmul_32ns_dEe_U4->ce(ap_var_for_const0);
    cordic_fmul_32ns_dEe_U4->dout(grp_fu_158_p2);
    cordic_fmul_32ns_dEe_U5 = new cordic_fmul_32ns_dEe<1,3,32,32,32>("cordic_fmul_32ns_dEe_U5");
    cordic_fmul_32ns_dEe_U5->clk(ap_clk);
    cordic_fmul_32ns_dEe_U5->reset(ap_rst);
    cordic_fmul_32ns_dEe_U5->din0(grp_fu_163_p0);
    cordic_fmul_32ns_dEe_U5->din1(grp_fu_163_p1);
    cordic_fmul_32ns_dEe_U5->ce(ap_var_for_const0);
    cordic_fmul_32ns_dEe_U5->dout(grp_fu_163_p2);
    cordic_fcmp_32ns_eOg_U6 = new cordic_fcmp_32ns_eOg<1,2,32,32,1>("cordic_fcmp_32ns_eOg_U6");
    cordic_fcmp_32ns_eOg_U6->clk(ap_clk);
    cordic_fcmp_32ns_eOg_U6->reset(ap_rst);
    cordic_fcmp_32ns_eOg_U6->din0(p_0_reg_132);
    cordic_fcmp_32ns_eOg_U6->din1(ap_var_for_const1);
    cordic_fcmp_32ns_eOg_U6->ce(ap_var_for_const0);
    cordic_fcmp_32ns_eOg_U6->opcode(ap_var_for_const2);
    cordic_fcmp_32ns_eOg_U6->dout(grp_fu_171_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln20_fu_242_p2);
    sensitive << ( or_ln20_fu_236_p2 );
    sensitive << ( grp_fu_171_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_189_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_189_p2 );

    SC_METHOD(thread_bitcast_ln20_fu_206_p1);
    sensitive << ( p_0_reg_132 );

    SC_METHOD(thread_c);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_189_p2 );
    sensitive << ( current_cos_0_reg_96 );

    SC_METHOD(thread_c_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_189_p2 );

    SC_METHOD(thread_cordic_phase_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln31_fu_201_p1 );

    SC_METHOD(thread_cordic_phase_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_142_p0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( current_cos_0_reg_96 );
    sensitive << ( p_0_reg_132 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_142_p1);
    sensitive << ( reg_183 );
    sensitive << ( tmp_5_reg_286 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_153_p0);
    sensitive << ( reg_177 );
    sensitive << ( current_cos_0_reg_96 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_153_p1);
    sensitive << ( select_ln23_reg_274 );
    sensitive << ( factor_0_reg_109 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_158_p0);
    sensitive << ( reg_183 );
    sensitive << ( current_sin_0_reg_83 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_158_p1);
    sensitive << ( select_ln23_reg_274 );
    sensitive << ( factor_0_reg_109 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_163_p0);
    sensitive << ( select_ln23_reg_274 );
    sensitive << ( factor_0_reg_109 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_163_p1);
    sensitive << ( cordic_phase_load_reg_281 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln18_fu_189_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_icmp_ln20_1_fu_230_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln20_fu_220_p1 );

    SC_METHOD(thread_icmp_ln20_fu_224_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_210_p4 );

    SC_METHOD(thread_j_fu_195_p2);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_or_ln20_fu_236_p2);
    sensitive << ( icmp_ln20_1_fu_230_p2 );
    sensitive << ( icmp_ln20_fu_224_p2 );

    SC_METHOD(thread_s);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_189_p2 );
    sensitive << ( current_sin_0_reg_83 );

    SC_METHOD(thread_s_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_189_p2 );

    SC_METHOD(thread_select_ln23_fu_248_p3);
    sensitive << ( and_ln20_fu_242_p2 );

    SC_METHOD(thread_tmp_fu_210_p4);
    sensitive << ( bitcast_ln20_fu_206_p1 );

    SC_METHOD(thread_trunc_ln20_fu_220_p1);
    sensitive << ( bitcast_ln20_fu_206_p1 );

    SC_METHOD(thread_zext_ln31_fu_201_p1);
    sensitive << ( j_0_reg_121 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln18_fu_189_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cordic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, theta, "(port)theta");
    sc_trace(mVcdFile, s, "(port)s");
    sc_trace(mVcdFile, s_ap_vld, "(port)s_ap_vld");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, c_ap_vld, "(port)c_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cordic_phase_address0, "cordic_phase_address0");
    sc_trace(mVcdFile, cordic_phase_ce0, "cordic_phase_ce0");
    sc_trace(mVcdFile, cordic_phase_q0, "cordic_phase_q0");
    sc_trace(mVcdFile, grp_fu_153_p2, "grp_fu_153_p2");
    sc_trace(mVcdFile, reg_177, "reg_177");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_158_p2, "grp_fu_158_p2");
    sc_trace(mVcdFile, reg_183, "reg_183");
    sc_trace(mVcdFile, j_fu_195_p2, "j_fu_195_p2");
    sc_trace(mVcdFile, j_reg_264, "j_reg_264");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln18_fu_189_p2, "icmp_ln18_fu_189_p2");
    sc_trace(mVcdFile, select_ln23_fu_248_p3, "select_ln23_fu_248_p3");
    sc_trace(mVcdFile, select_ln23_reg_274, "select_ln23_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, cordic_phase_load_reg_281, "cordic_phase_load_reg_281");
    sc_trace(mVcdFile, grp_fu_163_p2, "grp_fu_163_p2");
    sc_trace(mVcdFile, tmp_5_reg_286, "tmp_5_reg_286");
    sc_trace(mVcdFile, factor_reg_291, "factor_reg_291");
    sc_trace(mVcdFile, grp_fu_142_p2, "grp_fu_142_p2");
    sc_trace(mVcdFile, theta_assign_reg_296, "theta_assign_reg_296");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_fu_148_p2, "grp_fu_148_p2");
    sc_trace(mVcdFile, current_sin_0_reg_83, "current_sin_0_reg_83");
    sc_trace(mVcdFile, current_cos_0_reg_96, "current_cos_0_reg_96");
    sc_trace(mVcdFile, factor_0_reg_109, "factor_0_reg_109");
    sc_trace(mVcdFile, j_0_reg_121, "j_0_reg_121");
    sc_trace(mVcdFile, p_0_reg_132, "p_0_reg_132");
    sc_trace(mVcdFile, zext_ln31_fu_201_p1, "zext_ln31_fu_201_p1");
    sc_trace(mVcdFile, grp_fu_142_p0, "grp_fu_142_p0");
    sc_trace(mVcdFile, grp_fu_142_p1, "grp_fu_142_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_153_p0, "grp_fu_153_p0");
    sc_trace(mVcdFile, grp_fu_153_p1, "grp_fu_153_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_158_p0, "grp_fu_158_p0");
    sc_trace(mVcdFile, grp_fu_158_p1, "grp_fu_158_p1");
    sc_trace(mVcdFile, grp_fu_163_p0, "grp_fu_163_p0");
    sc_trace(mVcdFile, grp_fu_163_p1, "grp_fu_163_p1");
    sc_trace(mVcdFile, bitcast_ln20_fu_206_p1, "bitcast_ln20_fu_206_p1");
    sc_trace(mVcdFile, tmp_fu_210_p4, "tmp_fu_210_p4");
    sc_trace(mVcdFile, trunc_ln20_fu_220_p1, "trunc_ln20_fu_220_p1");
    sc_trace(mVcdFile, icmp_ln20_1_fu_230_p2, "icmp_ln20_1_fu_230_p2");
    sc_trace(mVcdFile, icmp_ln20_fu_224_p2, "icmp_ln20_fu_224_p2");
    sc_trace(mVcdFile, or_ln20_fu_236_p2, "or_ln20_fu_236_p2");
    sc_trace(mVcdFile, grp_fu_171_p2, "grp_fu_171_p2");
    sc_trace(mVcdFile, and_ln20_fu_242_p2, "and_ln20_fu_242_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("cordic.hdltvin.dat");
    mHdltvoutHandle.open("cordic.hdltvout.dat");
}

cordic::~cordic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cordic_phase_U;
    delete cordic_fsub_32ns_bkb_U1;
    delete cordic_fadd_32ns_cud_U2;
    delete cordic_fmul_32ns_dEe_U3;
    delete cordic_fmul_32ns_dEe_U4;
    delete cordic_fmul_32ns_dEe_U5;
    delete cordic_fcmp_32ns_eOg_U6;
}

void cordic::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void cordic::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void cordic::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_4;
}

void cordic::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        current_cos_0_reg_96 = grp_fu_142_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        current_cos_0_reg_96 = ap_const_lv32_3F1B74BC;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        current_sin_0_reg_83 = grp_fu_148_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        current_sin_0_reg_83 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        factor_0_reg_109 = factor_reg_291.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        factor_0_reg_109 = ap_const_lv32_3F800000;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        j_0_reg_121 = j_reg_264.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_121 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        p_0_reg_132 = theta_assign_reg_296.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_132 = theta.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cordic_phase_load_reg_281 = cordic_phase_q0.read();
        select_ln23_reg_274 = select_ln23_fu_248_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        factor_reg_291 = grp_fu_163_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_reg_264 = j_fu_195_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_177 = grp_fu_153_p2.read();
        reg_183 = grp_fu_158_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        theta_assign_reg_296 = grp_fu_142_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_5_reg_286 = grp_fu_163_p2.read();
    }
}

void cordic::thread_and_ln20_fu_242_p2() {
    and_ln20_fu_242_p2 = (or_ln20_fu_236_p2.read() & grp_fu_171_p2.read());
}

void cordic::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cordic::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void cordic::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void cordic::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cordic::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cordic::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void cordic::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void cordic::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void cordic::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void cordic::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_189_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cordic::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cordic::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_189_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cordic::thread_bitcast_ln20_fu_206_p1() {
    bitcast_ln20_fu_206_p1 = p_0_reg_132.read();
}

void cordic::thread_c() {
    c = current_cos_0_reg_96.read();
}

void cordic::thread_c_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_189_p2.read(), ap_const_lv1_1))) {
        c_ap_vld = ap_const_logic_1;
    } else {
        c_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_cordic_phase_address0() {
    cordic_phase_address0 =  (sc_lv<6>) (zext_ln31_fu_201_p1.read());
}

void cordic::thread_cordic_phase_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cordic_phase_ce0 = ap_const_logic_1;
    } else {
        cordic_phase_ce0 = ap_const_logic_0;
    }
}

void cordic::thread_grp_fu_142_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_142_p0 = current_cos_0_reg_96.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_142_p0 = p_0_reg_132.read();
    } else {
        grp_fu_142_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_142_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_142_p1 = reg_183.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_142_p1 = tmp_5_reg_286.read();
    } else {
        grp_fu_142_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_153_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_153_p0 = reg_177.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_153_p0 = current_cos_0_reg_96.read();
    } else {
        grp_fu_153_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_153_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_153_p1 = factor_0_reg_109.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_153_p1 = select_ln23_reg_274.read();
    } else {
        grp_fu_153_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_158_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_158_p0 = reg_183.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_158_p0 = current_sin_0_reg_83.read();
    } else {
        grp_fu_158_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_158_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_158_p1 = factor_0_reg_109.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_158_p1 = select_ln23_reg_274.read();
    } else {
        grp_fu_158_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_163_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_163_p0 = factor_0_reg_109.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_163_p0 = select_ln23_reg_274.read();
    } else {
        grp_fu_163_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_grp_fu_163_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_163_p1 = ap_const_lv32_3F000000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_163_p1 = cordic_phase_load_reg_281.read();
    } else {
        grp_fu_163_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void cordic::thread_icmp_ln18_fu_189_p2() {
    icmp_ln18_fu_189_p2 = (!j_0_reg_121.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_121.read() == ap_const_lv6_20);
}

void cordic::thread_icmp_ln20_1_fu_230_p2() {
    icmp_ln20_1_fu_230_p2 = (!trunc_ln20_fu_220_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln20_fu_220_p1.read() == ap_const_lv23_0);
}

void cordic::thread_icmp_ln20_fu_224_p2() {
    icmp_ln20_fu_224_p2 = (!tmp_fu_210_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_210_p4.read() != ap_const_lv8_FF);
}

void cordic::thread_j_fu_195_p2() {
    j_fu_195_p2 = (!j_0_reg_121.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_0_reg_121.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void cordic::thread_or_ln20_fu_236_p2() {
    or_ln20_fu_236_p2 = (icmp_ln20_1_fu_230_p2.read() | icmp_ln20_fu_224_p2.read());
}

void cordic::thread_s() {
    s = current_sin_0_reg_83.read();
}

void cordic::thread_s_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_189_p2.read(), ap_const_lv1_1))) {
        s_ap_vld = ap_const_logic_1;
    } else {
        s_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_select_ln23_fu_248_p3() {
    select_ln23_fu_248_p3 = (!and_ln20_fu_242_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln20_fu_242_p2.read()[0].to_bool())? ap_const_lv32_BF800000: ap_const_lv32_3F800000);
}

void cordic::thread_tmp_fu_210_p4() {
    tmp_fu_210_p4 = bitcast_ln20_fu_206_p1.read().range(30, 23);
}

void cordic::thread_trunc_ln20_fu_220_p1() {
    trunc_ln20_fu_220_p1 = bitcast_ln20_fu_206_p1.read().range(23-1, 0);
}

void cordic::thread_zext_ln31_fu_201_p1() {
    zext_ln31_fu_201_p1 = esl_zext<64,6>(j_0_reg_121.read());
}

void cordic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_189_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void cordic::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"theta\" :  \"" << theta.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s\" :  \"" << s.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_ap_vld\" :  \"" << s_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ap_vld\" :  \"" << c_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

