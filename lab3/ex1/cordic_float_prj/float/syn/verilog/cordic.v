// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.286000,HLS_SYN_LAT=385,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=13,HLS_SYN_FF=1250,HLS_SYN_LUT=1225,HLS_VERSION=2020_1}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta,
        s,
        s_ap_vld,
        c,
        c_ap_vld
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] theta;
output  [31:0] s;
output   s_ap_vld;
output  [31:0] c;
output   c_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_ap_vld;
reg c_ap_vld;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] cordic_phase_address0;
reg    cordic_phase_ce0;
wire   [31:0] cordic_phase_q0;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] reg_177;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_158_p2;
reg   [31:0] reg_183;
wire   [5:0] j_fu_195_p2;
reg   [5:0] j_reg_264;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln18_fu_189_p2;
wire   [31:0] select_ln23_fu_248_p3;
reg   [31:0] select_ln23_reg_274;
wire    ap_CS_fsm_state3;
reg   [31:0] cordic_phase_load_reg_281;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] tmp_5_reg_286;
reg   [31:0] factor_reg_291;
wire   [31:0] grp_fu_142_p2;
reg   [31:0] theta_assign_reg_296;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] current_sin_0_reg_83;
reg   [31:0] current_cos_0_reg_96;
reg   [31:0] factor_0_reg_109;
reg   [5:0] j_0_reg_121;
reg   [31:0] p_0_reg_132;
wire   [63:0] zext_ln31_fu_201_p1;
reg   [31:0] grp_fu_142_p0;
reg   [31:0] grp_fu_142_p1;
wire    ap_CS_fsm_state7;
reg   [31:0] grp_fu_153_p0;
reg   [31:0] grp_fu_153_p1;
wire    ap_CS_fsm_state4;
reg   [31:0] grp_fu_158_p0;
reg   [31:0] grp_fu_158_p1;
reg   [31:0] grp_fu_163_p0;
reg   [31:0] grp_fu_163_p1;
wire   [31:0] bitcast_ln20_fu_206_p1;
wire   [7:0] tmp_fu_210_p4;
wire   [22:0] trunc_ln20_fu_220_p1;
wire   [0:0] icmp_ln20_1_fu_230_p2;
wire   [0:0] icmp_ln20_fu_224_p2;
wire   [0:0] or_ln20_fu_236_p2;
wire   [0:0] grp_fu_171_p2;
wire   [0:0] and_ln20_fu_242_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

cordic_cordic_phase #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_phase_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_phase_address0),
    .ce0(cordic_phase_ce0),
    .q0(cordic_phase_q0)
);

cordic_fsub_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_fsub_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p0),
    .din1(grp_fu_142_p1),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

cordic_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_fadd_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(current_sin_0_reg_83),
    .din1(reg_177),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

cordic_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_fmul_32ns_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_153_p0),
    .din1(grp_fu_153_p1),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

cordic_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_fmul_32ns_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_158_p0),
    .din1(grp_fu_158_p1),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

cordic_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_fmul_32ns_dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_163_p0),
    .din1(grp_fu_163_p1),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

cordic_fcmp_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cordic_fcmp_32ns_eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_0_reg_132),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_171_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        current_cos_0_reg_96 <= grp_fu_142_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        current_cos_0_reg_96 <= 32'd1058763964;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        current_sin_0_reg_83 <= grp_fu_148_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        current_sin_0_reg_83 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        factor_0_reg_109 <= factor_reg_291;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        factor_0_reg_109 <= 32'd1065353216;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_reg_121 <= j_reg_264;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_121 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_0_reg_132 <= theta_assign_reg_296;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_reg_132 <= theta;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cordic_phase_load_reg_281 <= cordic_phase_q0;
        select_ln23_reg_274[31] <= select_ln23_fu_248_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        factor_reg_291 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_264 <= j_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_177 <= grp_fu_153_p2;
        reg_183 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        theta_assign_reg_296 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_5_reg_286 <= grp_fu_163_p2;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_ap_vld = 1'b1;
    end else begin
        c_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cordic_phase_ce0 = 1'b1;
    end else begin
        cordic_phase_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_142_p0 = current_cos_0_reg_96;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_142_p0 = p_0_reg_132;
    end else begin
        grp_fu_142_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_142_p1 = reg_183;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_142_p1 = tmp_5_reg_286;
    end else begin
        grp_fu_142_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_153_p0 = reg_177;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_153_p0 = current_cos_0_reg_96;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_153_p1 = factor_0_reg_109;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_153_p1 = select_ln23_reg_274;
    end else begin
        grp_fu_153_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_158_p0 = reg_183;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_158_p0 = current_sin_0_reg_83;
    end else begin
        grp_fu_158_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_158_p1 = factor_0_reg_109;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_158_p1 = select_ln23_reg_274;
    end else begin
        grp_fu_158_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_163_p0 = factor_0_reg_109;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_163_p0 = select_ln23_reg_274;
    end else begin
        grp_fu_163_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_163_p1 = 32'd1056964608;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_163_p1 = cordic_phase_load_reg_281;
    end else begin
        grp_fu_163_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_ap_vld = 1'b1;
    end else begin
        s_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln20_fu_242_p2 = (or_ln20_fu_236_p2 & grp_fu_171_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln20_fu_206_p1 = p_0_reg_132;

assign c = current_cos_0_reg_96;

assign cordic_phase_address0 = zext_ln31_fu_201_p1;

assign icmp_ln18_fu_189_p2 = ((j_0_reg_121 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_230_p2 = ((trunc_ln20_fu_220_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_224_p2 = ((tmp_fu_210_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_195_p2 = (j_0_reg_121 + 6'd1);

assign or_ln20_fu_236_p2 = (icmp_ln20_fu_224_p2 | icmp_ln20_1_fu_230_p2);

assign s = current_sin_0_reg_83;

assign select_ln23_fu_248_p3 = ((and_ln20_fu_242_p2[0:0] === 1'b1) ? 32'd3212836864 : 32'd1065353216);

assign tmp_fu_210_p4 = {{bitcast_ln20_fu_206_p1[30:23]}};

assign trunc_ln20_fu_220_p1 = bitcast_ln20_fu_206_p1[22:0];

assign zext_ln31_fu_201_p1 = j_0_reg_121;

always @ (posedge ap_clk) begin
    select_ln23_reg_274[30:0] <= 31'b0111111100000000000000000000000;
end

endmodule //cordic
