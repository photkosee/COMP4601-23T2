-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage89 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V_ce0 : OUT STD_LOGIC;
    X_R_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_R_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V_ce1 : OUT STD_LOGIC;
    X_R_V_q1 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V_ce0 : OUT STD_LOGIC;
    X_I_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V_ce1 : OUT STD_LOGIC;
    X_I_V_q1 : IN STD_LOGIC_VECTOR (21 downto 0);
    Out_R_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_V_ce0 : OUT STD_LOGIC;
    Out_R_V_we0 : OUT STD_LOGIC;
    Out_R_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_R_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_V_ce1 : OUT STD_LOGIC;
    Out_R_V_we1 : OUT STD_LOGIC;
    Out_R_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_I_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_V_ce0 : OUT STD_LOGIC;
    Out_I_V_we0 : OUT STD_LOGIC;
    Out_I_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_I_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_V_ce1 : OUT STD_LOGIC;
    Out_I_V_we1 : OUT STD_LOGIC;
    Out_I_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of fft_stage89 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv22_3FFFCB : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv14_3FE6 : STD_LOGIC_VECTOR (13 downto 0) := "11111111100110";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_B : STD_LOGIC_VECTOR (10 downto 0) := "00000001011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_FF5 : STD_LOGIC_VECTOR (11 downto 0) := "111111110101";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_16 : STD_LOGIC_VECTOR (11 downto 0) := "000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_332_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_1345 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln885_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s_reg_1355 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_19_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_580_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1365 : STD_LOGIC_VECTOR (10 downto 0);
    signal a_V_fu_584_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_V_reg_1370 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln885_fu_635_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln885_reg_1375 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_288_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_1381 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_288_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_288_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_307_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_307_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_307_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_2_reg_1386 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln891_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1118_fu_1206_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_reg_1396 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_4_fu_1210_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_4_reg_1402 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln53_fu_1224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln55_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_reg_1412 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_reg_1428 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_fu_1248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_288_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_288_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_288_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_307_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_307_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_307_do_cos : STD_LOGIC;
    signal tmp_V_reg_256 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_267 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sin_or_cos_double_s_fu_288_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_307_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_V_5_fu_344_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln889_fu_350_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_s_fu_354_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_44_fu_364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_396_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln897_fu_416_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln897_fu_422_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln897_fu_426_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_38_fu_432_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln897_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_386_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln899_fu_464_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_9_fu_470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_2_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln908_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln908_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_490_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln911_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_544_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln915_fu_600_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_593_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_605_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_11_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_611_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_45_fu_619_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln729_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_663_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_677_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_681_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_47_fu_689_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_46_fu_655_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_6_fu_693_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_651_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_1_fu_673_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_713_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_1_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_1_fu_725_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_731_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_737_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_7_fu_699_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_745_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_775_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_779_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_21_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_759_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln581_4_fu_749_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln571_1_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_805_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln586_fu_785_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln585_4_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_797_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln582_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_877_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln603_8_fu_891_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln603_6_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_7_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_9_fu_905_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ireg_V_2_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_2_fu_942_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_2_fu_956_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_9_fu_960_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_49_fu_968_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_48_fu_934_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_9_fu_972_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_2_fu_930_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_952_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_992_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_1004_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_1010_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_fu_1016_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_10_fu_978_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_5_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_1054_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1058_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_23_fu_1068_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_2_fu_1038_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln581_6_fu_1028_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln571_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_2_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_2_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_2_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_2_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_2_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_2_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_2_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1084_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln586_2_fu_1064_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln585_6_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_5_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_2_fu_1076_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln582_2_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_8_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_11_fu_1156_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln603_12_fu_1170_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln603_9_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_10_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_13_fu_1184_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal c_V_fu_919_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal s_V_fu_1198_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_24_fu_1214_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_1230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_1262_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_fu_1262_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_5_fu_1254_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1193_fu_1267_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1193_fu_1267_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_6_fu_1258_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_fu_1262_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1193_fu_1267_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_1272_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_2_fu_1288_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_2_fu_1288_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1293_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1293_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1293_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_2_fu_1288_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_14_fu_1298_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp_R_V_fu_1278_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal temp_I_V_fu_1304_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_288 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_288_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_288_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_288_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_288_ap_ready,
        t_in => select_ln885_reg_1375,
        do_cos => grp_sin_or_cos_double_s_fu_288_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_288_ap_return);

    grp_sin_or_cos_double_s_fu_307 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_307_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_307_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_307_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_307_ap_ready,
        t_in => select_ln885_reg_1375,
        do_cos => grp_sin_or_cos_double_s_fu_307_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_307_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln47_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_288_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sin_or_cos_double_s_fu_288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_288_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_307_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_307_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sin_or_cos_double_s_fu_307_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_307_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_307_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln53_fu_1224_p2 = ap_const_lv1_1))) then 
                i_0_reg_279 <= i_4_fu_1248_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_279 <= zext_ln891_fu_644_p1;
            end if; 
        end if;
    end process;

    i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_267 <= j_reg_1345;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_267 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    tmp_V_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                tmp_V_reg_256 <= a_V_reg_1370;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_reg_256 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                a_V_reg_1370 <= a_V_fu_584_p2;
                icmp_ln885_reg_1350 <= icmp_ln885_fu_338_p2;
                m_s_reg_1355 <= m_8_fu_556_p2(63 downto 1);
                tmp_19_reg_1360 <= m_8_fu_556_p2(54 downto 54);
                trunc_ln893_reg_1365 <= trunc_ln893_fu_580_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln53_reg_1408 <= icmp_ln53_fu_1224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_1345 <= j_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                select_ln885_reg_1375 <= select_ln885_fu_635_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln1118_4_reg_1402 <= sext_ln1118_4_fu_1210_p1;
                sext_ln1118_reg_1396 <= sext_ln1118_fu_1206_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln53_fu_1224_p2 = ap_const_lv1_1))) then
                sext_ln55_reg_1412 <= sext_ln55_fu_1236_p1;
                sext_ln57_reg_1428 <= sext_ln57_fu_1242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                v_assign_2_reg_1386 <= grp_sin_or_cos_double_s_fu_307_ap_return;
                v_assign_reg_1381 <= grp_sin_or_cos_double_s_fu_288_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln47_fu_326_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, icmp_ln53_fu_1224_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln47_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln53_fu_1224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln53_fu_1224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    F2_2_fu_992_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_952_p1));
    F2_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_1_fu_673_p1));
    Out_I_V_address0 <= sext_ln55_reg_1412(10 - 1 downto 0);
    Out_I_V_address1 <= sext_ln57_reg_1428(10 - 1 downto 0);

    Out_I_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_I_V_ce0 <= ap_const_logic_1;
        else 
            Out_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_I_V_ce1 <= ap_const_logic_1;
        else 
            Out_I_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_I_V_d0 <= std_logic_vector(unsigned(X_I_V_q1) - unsigned(temp_I_V_fu_1304_p4));
    Out_I_V_d1 <= std_logic_vector(unsigned(X_I_V_q1) + unsigned(temp_I_V_fu_1304_p4));

    Out_I_V_we0_assign_proc : process(icmp_ln53_reg_1408, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln53_reg_1408 = ap_const_lv1_1))) then 
            Out_I_V_we0 <= ap_const_logic_1;
        else 
            Out_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_V_we1_assign_proc : process(icmp_ln53_reg_1408, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln53_reg_1408 = ap_const_lv1_1))) then 
            Out_I_V_we1 <= ap_const_logic_1;
        else 
            Out_I_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_V_address0 <= sext_ln55_reg_1412(10 - 1 downto 0);
    Out_R_V_address1 <= sext_ln57_reg_1428(10 - 1 downto 0);

    Out_R_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_R_V_ce0 <= ap_const_logic_1;
        else 
            Out_R_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_R_V_ce1 <= ap_const_logic_1;
        else 
            Out_R_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_V_d0 <= std_logic_vector(unsigned(X_R_V_q1) - unsigned(temp_R_V_fu_1278_p4));
    Out_R_V_d1 <= std_logic_vector(unsigned(X_R_V_q1) + unsigned(temp_R_V_fu_1278_p4));

    Out_R_V_we0_assign_proc : process(icmp_ln53_reg_1408, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln53_reg_1408 = ap_const_lv1_1))) then 
            Out_R_V_we0 <= ap_const_logic_1;
        else 
            Out_R_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_V_we1_assign_proc : process(icmp_ln53_reg_1408, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln53_reg_1408 = ap_const_lv1_1))) then 
            Out_R_V_we1 <= ap_const_logic_1;
        else 
            Out_R_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_V_address0 <= sext_ln55_fu_1236_p1(10 - 1 downto 0);
    X_I_V_address1 <= sext_ln57_fu_1242_p1(10 - 1 downto 0);

    X_I_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_V_ce0 <= ap_const_logic_1;
        else 
            X_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_V_ce1 <= ap_const_logic_1;
        else 
            X_I_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_V_address0 <= sext_ln55_fu_1236_p1(10 - 1 downto 0);
    X_R_V_address1 <= sext_ln57_fu_1242_p1(10 - 1 downto 0);

    X_R_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_V_ce0 <= ap_const_logic_1;
        else 
            X_R_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_V_ce1 <= ap_const_logic_1;
        else 
            X_R_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_V_fu_584_p2 <= std_logic_vector(signed(ap_const_lv14_3FE6) + signed(tmp_V_reg_256));
    a_fu_444_p2 <= (icmp_ln897_fu_406_p2 and icmp_ln897_1_fu_438_p2);
    add_ln581_1_fu_725_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_fu_713_p2));
    add_ln581_fu_1004_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_2_fu_992_p2));
    add_ln899_fu_464_p2 <= std_logic_vector(signed(ap_const_lv22_3FFFCB) + signed(trunc_ln894_fu_386_p1));
    add_ln908_fu_512_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_fu_380_p2));
    add_ln915_fu_605_p2 <= std_logic_vector(unsigned(sub_ln915_fu_600_p2) + unsigned(select_ln915_fu_593_p3));
    and_ln581_2_fu_1114_p2 <= (xor_ln582_2_fu_1108_p2 and icmp_ln581_fu_998_p2);
    and_ln581_fu_835_p2 <= (xor_ln582_fu_829_p2 and icmp_ln581_1_fu_719_p2);
    and_ln582_2_fu_1096_p2 <= (xor_ln571_2_fu_1090_p2 and icmp_ln582_fu_1032_p2);
    and_ln582_fu_817_p2 <= (xor_ln571_fu_811_p2 and icmp_ln582_1_fu_753_p2);
    and_ln585_4_fu_853_p2 <= (icmp_ln585_1_fu_763_p2 and and_ln581_fu_835_p2);
    and_ln585_5_fu_1126_p2 <= (xor_ln585_2_fu_1120_p2 and and_ln581_2_fu_1114_p2);
    and_ln585_6_fu_1132_p2 <= (icmp_ln585_fu_1042_p2 and and_ln581_2_fu_1114_p2);
    and_ln585_fu_847_p2 <= (xor_ln585_fu_841_p2 and and_ln581_fu_835_p2);
    and_ln603_2_fu_1150_p2 <= (xor_ln581_2_fu_1144_p2 and icmp_ln603_fu_1048_p2);
    and_ln603_fu_871_p2 <= (xor_ln581_fu_865_p2 and icmp_ln603_1_fu_769_p2);
    and_ln899_fu_478_p2 <= (xor_ln899_fu_458_p2 and p_Result_9_fu_470_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_288_ap_done, grp_sin_or_cos_double_s_fu_307_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_307_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_288_ap_done = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln53_fu_1224_p2)
    begin
        if ((icmp_ln53_fu_1224_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln47_fu_326_p2)
    begin
        if (((icmp_ln47_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln47_fu_326_p2)
    begin
        if (((icmp_ln47_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_779_p2 <= std_logic_vector(shift_right(signed(man_V_7_fu_699_p3),to_integer(unsigned('0' & zext_ln586_1_fu_775_p1(31-1 downto 0)))));
    ashr_ln586_fu_1058_p2 <= std_logic_vector(shift_right(signed(man_V_10_fu_978_p3),to_integer(unsigned('0' & zext_ln586_fu_1054_p1(31-1 downto 0)))));
    bitcast_ln729_fu_631_p1 <= p_Result_45_fu_619_p5;
    c_V_fu_919_p3 <= 
        select_ln603_9_fu_905_p3 when (or_ln603_7_fu_913_p2(0) = '1') else 
        ap_const_lv22_0;
    exp_tmp_V_2_fu_942_p4 <= ireg_V_2_fu_927_p1(62 downto 52);
    exp_tmp_V_fu_663_p4 <= ireg_V_fu_648_p1(62 downto 52);
    grp_sin_or_cos_double_s_fu_288_ap_start <= grp_sin_or_cos_double_s_fu_288_ap_start_reg;
    grp_sin_or_cos_double_s_fu_288_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_307_ap_start <= grp_sin_or_cos_double_s_fu_307_ap_start_reg;
    grp_sin_or_cos_double_s_fu_307_do_cos <= ap_const_logic_0;
    i_4_fu_1248_p2 <= std_logic_vector(signed(i_0_reg_279) + signed(ap_const_lv32_200));
    i_lower_fu_1230_p2 <= std_logic_vector(signed(i_0_reg_279) + signed(ap_const_lv32_100));
    icmp_ln47_fu_326_p2 <= "1" when (i_reg_267 = ap_const_lv9_100) else "0";
    icmp_ln53_fu_1224_p2 <= "1" when (signed(tmp_24_fu_1214_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln571_1_fu_707_p2 <= "1" when (trunc_ln556_fu_651_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_986_p2 <= "1" when (trunc_ln556_2_fu_930_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_719_p2 <= "1" when (signed(F2_fu_713_p2) > signed(ap_const_lv12_B)) else "0";
    icmp_ln581_fu_998_p2 <= "1" when (signed(F2_2_fu_992_p2) > signed(ap_const_lv12_B)) else "0";
    icmp_ln582_1_fu_753_p2 <= "1" when (F2_fu_713_p2 = ap_const_lv12_B) else "0";
    icmp_ln582_fu_1032_p2 <= "1" when (F2_2_fu_992_p2 = ap_const_lv12_B) else "0";
    icmp_ln585_1_fu_763_p2 <= "1" when (unsigned(sh_amt_fu_737_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_1042_p2 <= "1" when (unsigned(sh_amt_2_fu_1016_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_769_p2 <= "1" when (unsigned(sh_amt_fu_737_p3) < unsigned(ap_const_lv12_16)) else "0";
    icmp_ln603_fu_1048_p2 <= "1" when (unsigned(sh_amt_2_fu_1016_p3) < unsigned(ap_const_lv12_16)) else "0";
    icmp_ln885_fu_338_p2 <= "1" when (tmp_V_reg_256 = ap_const_lv14_0) else "0";
    icmp_ln897_1_fu_438_p2 <= "0" when (p_Result_38_fu_432_p2 = ap_const_lv22_0) else "1";
    icmp_ln897_fu_406_p2 <= "1" when (signed(tmp_fu_396_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_506_p2 <= "1" when (signed(lsb_index_fu_390_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_2_fu_927_p1 <= v_assign_2_reg_1386;
    ireg_V_fu_648_p1 <= v_assign_reg_1381;
    j_fu_332_p2 <= std_logic_vector(unsigned(i_reg_267) + unsigned(ap_const_lv9_1));
    
    l_fu_372_p3_proc : process(p_Result_44_fu_364_p3)
    begin
        l_fu_372_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_44_fu_364_p3(i) = '1' then
                l_fu_372_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_390_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_380_p2));
    lshr_ln897_fu_426_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv22_3FFFFF),to_integer(unsigned('0' & zext_ln897_fu_422_p1(22-1 downto 0)))));
    lshr_ln908_fu_518_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_2_fu_502_p1),to_integer(unsigned('0' & add_ln908_fu_512_p2(31-1 downto 0)))));
    m_11_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_1355),64));
    m_7_fu_544_p3 <= 
        zext_ln908_fu_524_p1 when (icmp_ln908_fu_506_p2(0) = '1') else 
        shl_ln908_fu_538_p2;
    m_8_fu_556_p2 <= std_logic_vector(unsigned(zext_ln911_fu_552_p1) + unsigned(m_7_fu_544_p3));
    m_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_fu_344_p2),64));
    man_V_10_fu_978_p3 <= 
        man_V_9_fu_972_p2 when (p_Result_48_fu_934_p3(0) = '1') else 
        p_Result_49_fu_968_p1;
    man_V_6_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_47_fu_689_p1));
    man_V_7_fu_699_p3 <= 
        man_V_6_fu_693_p2 when (p_Result_46_fu_655_p3(0) = '1') else 
        p_Result_47_fu_689_p1;
    man_V_9_fu_972_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_49_fu_968_p1));
    mul_ln1192_fu_1293_p0 <= sext_ln1118_4_reg_1402(22 - 1 downto 0);
    mul_ln1192_fu_1293_p1 <= sext_ln1118_5_fu_1254_p1(22 - 1 downto 0);
    mul_ln1192_fu_1293_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_1293_p0) * signed(mul_ln1192_fu_1293_p1))), 33));
    mul_ln1193_fu_1267_p0 <= sext_ln1118_4_reg_1402(22 - 1 downto 0);
    mul_ln1193_fu_1267_p1 <= sext_ln1118_6_fu_1258_p1(22 - 1 downto 0);
    mul_ln1193_fu_1267_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1193_fu_1267_p0) * signed(mul_ln1193_fu_1267_p1))), 33));
    mul_ln700_2_fu_1288_p0 <= sext_ln1118_6_fu_1258_p1(22 - 1 downto 0);
    mul_ln700_2_fu_1288_p1 <= sext_ln1118_reg_1396(22 - 1 downto 0);
    mul_ln700_2_fu_1288_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_2_fu_1288_p0) * signed(mul_ln700_2_fu_1288_p1))), 33));
    mul_ln700_fu_1262_p0 <= sext_ln1118_reg_1396(22 - 1 downto 0);
    mul_ln700_fu_1262_p1 <= sext_ln1118_5_fu_1254_p1(22 - 1 downto 0);
    mul_ln700_fu_1262_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_1262_p0) * signed(mul_ln700_fu_1262_p1))), 33));
    or_ln581_2_fu_1138_p2 <= (or_ln582_2_fu_1102_p2 or icmp_ln581_fu_998_p2);
    or_ln581_fu_859_p2 <= (or_ln582_fu_823_p2 or icmp_ln581_1_fu_719_p2);
    or_ln582_2_fu_1102_p2 <= (icmp_ln582_fu_1032_p2 or icmp_ln571_fu_986_p2);
    or_ln582_fu_823_p2 <= (icmp_ln582_1_fu_753_p2 or icmp_ln571_1_fu_707_p2);
    or_ln603_10_fu_1192_p2 <= (or_ln603_9_fu_1178_p2 or or_ln603_8_fu_1164_p2);
    or_ln603_6_fu_899_p2 <= (and_ln585_fu_847_p2 or and_ln582_fu_817_p2);
    or_ln603_7_fu_913_p2 <= (or_ln603_fu_885_p2 or or_ln603_6_fu_899_p2);
    or_ln603_8_fu_1164_p2 <= (and_ln603_2_fu_1150_p2 or and_ln585_6_fu_1132_p2);
    or_ln603_9_fu_1178_p2 <= (and_ln585_5_fu_1126_p2 or and_ln582_2_fu_1096_p2);
    or_ln603_fu_885_p2 <= (and_ln603_fu_871_p2 or and_ln585_4_fu_853_p2);
    or_ln899_fu_484_p2 <= (and_ln899_fu_478_p2 or a_fu_444_p2);
    or_ln_fu_490_p3 <= (ap_const_lv31_0 & or_ln899_fu_484_p2);
    p_Result_38_fu_432_p2 <= (zext_ln889_fu_350_p1 and lshr_ln897_fu_426_p2);
    p_Result_44_fu_364_p3 <= (ap_const_lv10_3FF & p_Result_s_fu_354_p4);
    p_Result_45_fu_619_p5 <= (tmp_5_fu_611_p3 & m_11_fu_590_p1(51 downto 0));
    p_Result_46_fu_655_p3 <= ireg_V_fu_648_p1(63 downto 63);
    p_Result_47_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_681_p3),54));
    p_Result_48_fu_934_p3 <= ireg_V_2_fu_927_p1(63 downto 63);
    p_Result_49_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_960_p3),54));
    p_Result_9_fu_470_p3 <= zext_ln889_fu_350_p1(to_integer(unsigned(add_ln899_fu_464_p2)) downto to_integer(unsigned(add_ln899_fu_464_p2))) when (to_integer(unsigned(add_ln899_fu_464_p2))>= 0 and to_integer(unsigned(add_ln899_fu_464_p2))<=21) else "-";
    
    p_Result_s_fu_354_p4_proc : process(zext_ln889_fu_350_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable p_Result_s_fu_354_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_15(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := zext_ln889_fu_350_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_15(5-1 downto 0)));
            for p_Result_s_fu_354_p4_i in 0 to 22-1 loop
                v0_cpy(p_Result_s_fu_354_p4_i) := zext_ln889_fu_350_p1(22-1-p_Result_s_fu_354_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(22-1 downto 0)))));
        res_mask := res_mask(22-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_354_p4 <= resvalue(22-1 downto 0);
    end process;

    ret_V_14_fu_1298_p2 <= std_logic_vector(unsigned(mul_ln1192_fu_1293_p2) + unsigned(mul_ln700_2_fu_1288_p2));
    ret_V_fu_1272_p2 <= std_logic_vector(unsigned(mul_ln700_fu_1262_p2) - unsigned(mul_ln1193_fu_1267_p2));
    s_V_fu_1198_p3 <= 
        select_ln603_13_fu_1184_p3 when (or_ln603_10_fu_1192_p2(0) = '1') else 
        ap_const_lv22_0;
    select_ln588_2_fu_1076_p3 <= 
        ap_const_lv22_3FFFFF when (tmp_23_fu_1068_p3(0) = '1') else 
        ap_const_lv22_0;
    select_ln588_fu_797_p3 <= 
        ap_const_lv22_3FFFFF when (tmp_21_fu_789_p3(0) = '1') else 
        ap_const_lv22_0;
    select_ln603_11_fu_1156_p3 <= 
        shl_ln604_fu_1084_p2 when (and_ln603_2_fu_1150_p2(0) = '1') else 
        trunc_ln586_2_fu_1064_p1;
    select_ln603_12_fu_1170_p3 <= 
        select_ln588_2_fu_1076_p3 when (and_ln585_5_fu_1126_p2(0) = '1') else 
        trunc_ln583_2_fu_1038_p1;
    select_ln603_13_fu_1184_p3 <= 
        select_ln603_11_fu_1156_p3 when (or_ln603_8_fu_1164_p2(0) = '1') else 
        select_ln603_12_fu_1170_p3;
    select_ln603_8_fu_891_p3 <= 
        select_ln588_fu_797_p3 when (and_ln585_fu_847_p2(0) = '1') else 
        trunc_ln583_fu_759_p1;
    select_ln603_9_fu_905_p3 <= 
        select_ln603_fu_877_p3 when (or_ln603_fu_885_p2(0) = '1') else 
        select_ln603_8_fu_891_p3;
    select_ln603_fu_877_p3 <= 
        shl_ln604_1_fu_805_p2 when (and_ln603_fu_871_p2(0) = '1') else 
        trunc_ln586_fu_785_p1;
    select_ln885_fu_635_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_reg_1350(0) = '1') else 
        bitcast_ln729_fu_631_p1;
    select_ln915_fu_593_p3 <= 
        ap_const_lv11_3FF when (tmp_19_reg_1360(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1118_4_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_V_fu_1198_p3),33));

        sext_ln1118_5_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_R_V_q0),33));

        sext_ln1118_6_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_I_V_q0),33));

        sext_ln1118_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_V_fu_919_p3),33));

        sext_ln55_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_1230_p2),64));

        sext_ln57_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_279),64));

        sext_ln581_4_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_737_p3),22));

        sext_ln581_5_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_fu_1016_p3),32));

        sext_ln581_6_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_fu_1016_p3),22));

        sext_ln581_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_737_p3),32));

    sh_amt_2_fu_1016_p3 <= 
        add_ln581_fu_1004_p2 when (icmp_ln581_fu_998_p2(0) = '1') else 
        sub_ln581_fu_1010_p2;
    sh_amt_fu_737_p3 <= 
        add_ln581_1_fu_725_p2 when (icmp_ln581_1_fu_719_p2(0) = '1') else 
        sub_ln581_1_fu_731_p2;
    shl_ln604_1_fu_805_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_759_p1),to_integer(unsigned('0' & sext_ln581_4_fu_749_p1(22-1 downto 0)))));
    shl_ln604_fu_1084_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_2_fu_1038_p1),to_integer(unsigned('0' & sext_ln581_6_fu_1028_p1(22-1 downto 0)))));
    shl_ln908_fu_538_p2 <= std_logic_vector(shift_left(unsigned(m_fu_498_p1),to_integer(unsigned('0' & zext_ln908_1_fu_534_p1(31-1 downto 0)))));
    sub_ln581_1_fu_731_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_fu_713_p2));
    sub_ln581_fu_1010_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_2_fu_992_p2));
    sub_ln894_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv32_16) - unsigned(l_fu_372_p3));
    sub_ln897_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv5_C) - unsigned(trunc_ln897_fu_412_p1));
    sub_ln908_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_fu_380_p2));
    sub_ln915_fu_600_p2 <= std_logic_vector(unsigned(ap_const_lv11_B) - unsigned(trunc_ln893_reg_1365));
    temp_I_V_fu_1304_p4 <= ret_V_14_fu_1298_p2(32 downto 11);
    temp_R_V_fu_1278_p4 <= ret_V_fu_1272_p2(32 downto 11);
    tmp_18_fu_450_p3 <= lsb_index_fu_390_p2(31 downto 31);
    tmp_21_fu_789_p3 <= ireg_V_fu_648_p1(63 downto 63);
    tmp_23_fu_1068_p3 <= ireg_V_2_fu_927_p1(63 downto 63);
    tmp_24_fu_1214_p4 <= i_0_reg_279(31 downto 10);
    tmp_5_fu_611_p3 <= (ap_const_lv1_1 & add_ln915_fu_605_p2);
    tmp_6_fu_681_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_677_p1);
    tmp_9_fu_960_p3 <= (ap_const_lv1_1 & trunc_ln565_2_fu_956_p1);
    tmp_V_5_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(tmp_V_reg_256));
    tmp_fu_396_p4 <= lsb_index_fu_390_p2(31 downto 1);
    trunc_ln556_2_fu_930_p1 <= ireg_V_2_fu_927_p1(63 - 1 downto 0);
    trunc_ln556_fu_651_p1 <= ireg_V_fu_648_p1(63 - 1 downto 0);
    trunc_ln565_2_fu_956_p1 <= ireg_V_2_fu_927_p1(52 - 1 downto 0);
    trunc_ln565_fu_677_p1 <= ireg_V_fu_648_p1(52 - 1 downto 0);
    trunc_ln583_2_fu_1038_p1 <= man_V_10_fu_978_p3(22 - 1 downto 0);
    trunc_ln583_fu_759_p1 <= man_V_7_fu_699_p3(22 - 1 downto 0);
    trunc_ln586_2_fu_1064_p1 <= ashr_ln586_fu_1058_p2(22 - 1 downto 0);
    trunc_ln586_fu_785_p1 <= ashr_ln586_1_fu_779_p2(22 - 1 downto 0);
    trunc_ln893_fu_580_p1 <= l_fu_372_p3(11 - 1 downto 0);
    trunc_ln894_fu_386_p1 <= sub_ln894_fu_380_p2(22 - 1 downto 0);
    trunc_ln897_fu_412_p1 <= sub_ln894_fu_380_p2(5 - 1 downto 0);
    xor_ln571_2_fu_1090_p2 <= (icmp_ln571_fu_986_p2 xor ap_const_lv1_1);
    xor_ln571_fu_811_p2 <= (icmp_ln571_1_fu_707_p2 xor ap_const_lv1_1);
    xor_ln581_2_fu_1144_p2 <= (or_ln581_2_fu_1138_p2 xor ap_const_lv1_1);
    xor_ln581_fu_865_p2 <= (or_ln581_fu_859_p2 xor ap_const_lv1_1);
    xor_ln582_2_fu_1108_p2 <= (or_ln582_2_fu_1102_p2 xor ap_const_lv1_1);
    xor_ln582_fu_829_p2 <= (or_ln582_fu_823_p2 xor ap_const_lv1_1);
    xor_ln585_2_fu_1120_p2 <= (icmp_ln585_fu_1042_p2 xor ap_const_lv1_1);
    xor_ln585_fu_841_p2 <= (icmp_ln585_1_fu_763_p2 xor ap_const_lv1_1);
    xor_ln899_fu_458_p2 <= (tmp_18_fu_450_p3 xor ap_const_lv1_1);
    zext_ln461_1_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_663_p4),12));
    zext_ln461_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_2_fu_942_p4),12));
    zext_ln586_1_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_745_p1),54));
    zext_ln586_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_5_fu_1024_p1),54));
    zext_ln889_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_fu_344_p2),22));
    zext_ln891_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_267),32));
    zext_ln897_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_416_p2),22));
    zext_ln907_2_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_fu_344_p2),32));
    zext_ln908_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_528_p2),64));
    zext_ln908_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_518_p2),64));
    zext_ln911_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_490_p3),64));
end behav;
