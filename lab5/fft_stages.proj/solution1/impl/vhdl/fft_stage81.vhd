-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage81 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V_ce0 : OUT STD_LOGIC;
    X_R_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_R_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V_ce1 : OUT STD_LOGIC;
    X_R_V_q1 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V_ce0 : OUT STD_LOGIC;
    X_I_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V_ce1 : OUT STD_LOGIC;
    X_I_V_q1 : IN STD_LOGIC_VECTOR (21 downto 0);
    Out_R_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_V_ce0 : OUT STD_LOGIC;
    Out_R_V_we0 : OUT STD_LOGIC;
    Out_R_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_R_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_V_ce1 : OUT STD_LOGIC;
    Out_R_V_we1 : OUT STD_LOGIC;
    Out_R_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_I_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_V_ce0 : OUT STD_LOGIC;
    Out_I_V_we0 : OUT STD_LOGIC;
    Out_I_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_I_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_V_ce1 : OUT STD_LOGIC;
    Out_I_V_we1 : OUT STD_LOGIC;
    Out_I_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of fft_stage81 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv22_3FFFCB : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_B : STD_LOGIC_VECTOR (10 downto 0) := "00000001011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_26DE : STD_LOGIC_VECTOR (13 downto 0) := "10011011011110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_FF5 : STD_LOGIC_VECTOR (11 downto 0) := "111111110101";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_16 : STD_LOGIC_VECTOR (11 downto 0) := "000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln891_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln891_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln885_fu_605_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln885_reg_1318 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_phi_fu_258_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_fu_613_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_V_reg_1324 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_sin_or_cos_double_s_fu_275_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_1329 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_275_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_275_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_294_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_294_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_294_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_s_reg_1334 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1118_fu_1177_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_reg_1339 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1118_28_fu_1181_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_28_reg_1345 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln55_fu_1207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_reg_1354 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln53_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln57_fu_1213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_reg_1370 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_fu_1219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_12_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_275_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_275_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_275_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_294_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_294_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_294_do_cos : STD_LOGIC;
    signal tmp_V_reg_242 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_reg_253 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_275_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_294_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln891_fu_323_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_s_fu_327_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_159_fu_337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_345_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_369_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_385_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln897_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln897_fu_395_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln897_fu_399_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_152_fu_405_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln897_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_359_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln899_fu_437_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_153_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_10_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln908_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln908_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln911_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_47_fu_517_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_48_fu_529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_s_fu_535_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_75_fu_549_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln915_fu_569_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_557_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_575_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_51_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_581_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_160_fu_589_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln885_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln729_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_634_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_648_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_652_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_162_fu_660_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_161_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_46_fu_664_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_622_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_1_fu_644_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_684_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_1_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_1_fu_696_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_702_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_708_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_47_fu_670_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_746_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_750_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_77_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_730_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln581_28_fu_720_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln571_1_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_776_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln586_fu_756_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln585_28_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_768_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln582_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_848_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln603_64_fu_862_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln603_46_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_47_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_65_fu_876_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ireg_V_10_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_10_fu_913_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_10_fu_927_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_931_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_164_fu_939_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_163_fu_905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_49_fu_943_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_10_fu_901_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_923_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_10_fu_963_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_975_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_981_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_10_fu_987_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_50_fu_949_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_29_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_1025_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1029_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_79_fu_1039_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_10_fu_1009_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln581_30_fu_999_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln571_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_10_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_10_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_10_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_10_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_10_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_10_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_10_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_10_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1055_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln586_10_fu_1035_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln585_30_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_29_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_10_fu_1047_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln582_10_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_48_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_67_fu_1127_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln603_68_fu_1141_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln603_49_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_50_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_69_fu_1155_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal c_V_fu_890_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal s_V_fu_1169_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_80_fu_1185_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_1201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_1233_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_fu_1233_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_29_fu_1225_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1193_fu_1238_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1193_fu_1238_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_30_fu_1229_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_fu_1233_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1193_fu_1238_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_1243_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_10_fu_1259_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_10_fu_1259_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1264_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1264_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1264_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_10_fu_1259_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_22_fu_1269_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp_R_V_fu_1249_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal temp_I_V_fu_1275_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_275 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_275_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_275_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_275_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_275_ap_ready,
        t_in => select_ln885_reg_1318,
        do_cos => grp_sin_or_cos_double_s_fu_275_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_275_ap_return);

    grp_sin_or_cos_double_s_fu_294 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_294_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_294_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_294_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_294_ap_ready,
        t_in => select_ln885_reg_1318,
        do_cos => grp_sin_or_cos_double_s_fu_294_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_294_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_phi_mux_i_phi_fu_258_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_275_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_275_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sin_or_cos_double_s_fu_275_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_275_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_275_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_294_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_294_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sin_or_cos_double_s_fu_294_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_294_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_294_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_266 <= i_12_reg_1386;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_266 <= zext_ln891_reg_1313;
            end if; 
        end if;
    end process;

    i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_reg_253 <= ap_const_lv1_1;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_253 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    tmp_V_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                tmp_V_reg_242 <= a_V_reg_1324;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_V_reg_242 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_i_phi_fu_258_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                a_V_reg_1324 <= a_V_fu_613_p2;
                select_ln885_reg_1318 <= select_ln885_fu_605_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1195_p2 = ap_const_lv1_1))) then
                i_12_reg_1386 <= i_12_fu_1219_p2;
                sext_ln55_reg_1354 <= sext_ln55_fu_1207_p1;
                sext_ln57_reg_1370 <= sext_ln57_fu_1213_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln1118_28_reg_1345 <= sext_ln1118_28_fu_1181_p1;
                sext_ln1118_reg_1339 <= sext_ln1118_fu_1177_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                v_assign_reg_1329 <= grp_sin_or_cos_double_s_fu_275_ap_return;
                v_assign_s_reg_1334 <= grp_sin_or_cos_double_s_fu_294_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln891_reg_1313(0) <= zext_ln891_fu_313_p1(0);
            end if;
        end if;
    end process;
    zext_ln891_reg_1313(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_phi_mux_i_phi_fu_258_p4, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state6, icmp_ln53_fu_1195_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_phi_mux_i_phi_fu_258_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln53_fu_1195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    F2_10_fu_963_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_923_p1));
    F2_fu_684_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_1_fu_644_p1));
    Out_I_V_address0 <= sext_ln55_reg_1354(10 - 1 downto 0);
    Out_I_V_address1 <= sext_ln57_reg_1370(10 - 1 downto 0);

    Out_I_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_I_V_ce0 <= ap_const_logic_1;
        else 
            Out_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_I_V_ce1 <= ap_const_logic_1;
        else 
            Out_I_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_I_V_d0 <= std_logic_vector(unsigned(X_I_V_q1) - unsigned(temp_I_V_fu_1275_p4));
    Out_I_V_d1 <= std_logic_vector(unsigned(X_I_V_q1) + unsigned(temp_I_V_fu_1275_p4));

    Out_I_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_I_V_we0 <= ap_const_logic_1;
        else 
            Out_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_V_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_I_V_we1 <= ap_const_logic_1;
        else 
            Out_I_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_V_address0 <= sext_ln55_reg_1354(10 - 1 downto 0);
    Out_R_V_address1 <= sext_ln57_reg_1370(10 - 1 downto 0);

    Out_R_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_R_V_ce0 <= ap_const_logic_1;
        else 
            Out_R_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_R_V_ce1 <= ap_const_logic_1;
        else 
            Out_R_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_V_d0 <= std_logic_vector(unsigned(X_R_V_q1) - unsigned(temp_R_V_fu_1249_p4));
    Out_R_V_d1 <= std_logic_vector(unsigned(X_R_V_q1) + unsigned(temp_R_V_fu_1249_p4));

    Out_R_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_R_V_we0 <= ap_const_logic_1;
        else 
            Out_R_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_V_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Out_R_V_we1 <= ap_const_logic_1;
        else 
            Out_R_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_V_address0 <= sext_ln55_fu_1207_p1(10 - 1 downto 0);
    X_I_V_address1 <= sext_ln57_fu_1213_p1(10 - 1 downto 0);

    X_I_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            X_I_V_ce0 <= ap_const_logic_1;
        else 
            X_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_V_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            X_I_V_ce1 <= ap_const_logic_1;
        else 
            X_I_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_V_address0 <= sext_ln55_fu_1207_p1(10 - 1 downto 0);
    X_R_V_address1 <= sext_ln57_fu_1213_p1(10 - 1 downto 0);

    X_R_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            X_R_V_ce0 <= ap_const_logic_1;
        else 
            X_R_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_V_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            X_R_V_ce1 <= ap_const_logic_1;
        else 
            X_R_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_V_fu_613_p2 <= std_logic_vector(signed(ap_const_lv14_26DE) + signed(tmp_V_reg_242));
    a_fu_417_p2 <= (icmp_ln897_fu_379_p2 and icmp_ln897_1_fu_411_p2);
    add_ln581_1_fu_696_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_fu_684_p2));
    add_ln581_fu_975_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_10_fu_963_p2));
    add_ln899_fu_437_p2 <= std_logic_vector(signed(ap_const_lv22_3FFFCB) + signed(trunc_ln894_fu_359_p1));
    add_ln908_fu_485_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_fu_353_p2));
    add_ln915_fu_575_p2 <= std_logic_vector(unsigned(sub_ln915_fu_569_p2) + unsigned(select_ln915_fu_557_p3));
    and_ln581_10_fu_1085_p2 <= (xor_ln582_10_fu_1079_p2 and icmp_ln581_fu_969_p2);
    and_ln581_fu_806_p2 <= (xor_ln582_fu_800_p2 and icmp_ln581_1_fu_690_p2);
    and_ln582_10_fu_1067_p2 <= (xor_ln571_10_fu_1061_p2 and icmp_ln582_fu_1003_p2);
    and_ln582_fu_788_p2 <= (xor_ln571_fu_782_p2 and icmp_ln582_1_fu_724_p2);
    and_ln585_28_fu_824_p2 <= (icmp_ln585_1_fu_734_p2 and and_ln581_fu_806_p2);
    and_ln585_29_fu_1097_p2 <= (xor_ln585_10_fu_1091_p2 and and_ln581_10_fu_1085_p2);
    and_ln585_30_fu_1103_p2 <= (icmp_ln585_fu_1013_p2 and and_ln581_10_fu_1085_p2);
    and_ln585_fu_818_p2 <= (xor_ln585_fu_812_p2 and and_ln581_fu_806_p2);
    and_ln603_10_fu_1121_p2 <= (xor_ln581_10_fu_1115_p2 and icmp_ln603_fu_1019_p2);
    and_ln603_fu_842_p2 <= (xor_ln581_fu_836_p2 and icmp_ln603_1_fu_740_p2);
    and_ln899_fu_451_p2 <= (xor_ln899_fu_431_p2 and p_Result_153_fu_443_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_275_ap_done, grp_sin_or_cos_double_s_fu_294_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_294_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_275_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_phi_mux_i_phi_fu_258_p4)
    begin
        if (((ap_phi_mux_i_phi_fu_258_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_phi_fu_258_p4 <= i_reg_253;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_phi_mux_i_phi_fu_258_p4)
    begin
        if (((ap_phi_mux_i_phi_fu_258_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_750_p2 <= std_logic_vector(shift_right(signed(man_V_47_fu_670_p3),to_integer(unsigned('0' & zext_ln586_1_fu_746_p1(31-1 downto 0)))));
    ashr_ln586_fu_1029_p2 <= std_logic_vector(shift_right(signed(man_V_50_fu_949_p3),to_integer(unsigned('0' & zext_ln586_fu_1025_p1(31-1 downto 0)))));
    bitcast_ln729_fu_601_p1 <= p_Result_160_fu_589_p5;
    c_V_fu_890_p3 <= 
        select_ln603_65_fu_876_p3 when (or_ln603_47_fu_884_p2(0) = '1') else 
        ap_const_lv22_0;
    exp_tmp_V_10_fu_913_p4 <= ireg_V_10_fu_898_p1(62 downto 52);
    exp_tmp_V_fu_634_p4 <= ireg_V_fu_619_p1(62 downto 52);
    grp_sin_or_cos_double_s_fu_275_ap_start <= grp_sin_or_cos_double_s_fu_275_ap_start_reg;
    grp_sin_or_cos_double_s_fu_275_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_294_ap_start <= grp_sin_or_cos_double_s_fu_294_ap_start_reg;
    grp_sin_or_cos_double_s_fu_294_do_cos <= ap_const_logic_0;
    i_12_fu_1219_p2 <= std_logic_vector(signed(i_0_reg_266) + signed(ap_const_lv32_2));
    i_lower_fu_1201_p2 <= std_logic_vector(signed(i_0_reg_266) + signed(ap_const_lv32_1));
    icmp_ln53_fu_1195_p2 <= "1" when (signed(tmp_80_fu_1185_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln571_1_fu_678_p2 <= "1" when (trunc_ln556_fu_622_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_957_p2 <= "1" when (trunc_ln556_10_fu_901_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_690_p2 <= "1" when (signed(F2_fu_684_p2) > signed(ap_const_lv12_B)) else "0";
    icmp_ln581_fu_969_p2 <= "1" when (signed(F2_10_fu_963_p2) > signed(ap_const_lv12_B)) else "0";
    icmp_ln582_1_fu_724_p2 <= "1" when (F2_fu_684_p2 = ap_const_lv12_B) else "0";
    icmp_ln582_fu_1003_p2 <= "1" when (F2_10_fu_963_p2 = ap_const_lv12_B) else "0";
    icmp_ln585_1_fu_734_p2 <= "1" when (unsigned(sh_amt_fu_708_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_1013_p2 <= "1" when (unsigned(sh_amt_10_fu_987_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_740_p2 <= "1" when (unsigned(sh_amt_fu_708_p3) < unsigned(ap_const_lv12_16)) else "0";
    icmp_ln603_fu_1019_p2 <= "1" when (unsigned(sh_amt_10_fu_987_p3) < unsigned(ap_const_lv12_16)) else "0";
    icmp_ln885_fu_317_p2 <= "1" when (tmp_V_reg_242 = ap_const_lv14_0) else "0";
    icmp_ln897_1_fu_411_p2 <= "0" when (p_Result_152_fu_405_p2 = ap_const_lv22_0) else "1";
    icmp_ln897_fu_379_p2 <= "1" when (signed(tmp_fu_369_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_479_p2 <= "1" when (signed(lsb_index_fu_363_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_10_fu_898_p1 <= v_assign_s_reg_1334;
    ireg_V_fu_619_p1 <= v_assign_reg_1329;
    
    l_fu_345_p3_proc : process(p_Result_159_fu_337_p3)
    begin
        l_fu_345_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_159_fu_337_p3(i) = '1' then
                l_fu_345_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_363_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_353_p2));
    lshr_ln897_fu_399_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv22_3FFFFF),to_integer(unsigned('0' & zext_ln897_fu_395_p1(22-1 downto 0)))));
    lshr_ln908_fu_491_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_10_fu_475_p1),to_integer(unsigned('0' & add_ln908_fu_485_p2(31-1 downto 0)))));
    m_47_fu_517_p3 <= 
        zext_ln908_fu_497_p1 when (icmp_ln908_fu_479_p2(0) = '1') else 
        shl_ln908_fu_511_p2;
    m_48_fu_529_p2 <= std_logic_vector(unsigned(zext_ln911_fu_525_p1) + unsigned(m_47_fu_517_p3));
    m_51_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_535_p4),64));
    m_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln891_fu_323_p1),64));
    m_s_fu_535_p4 <= m_48_fu_529_p2(63 downto 1);
    man_V_46_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_162_fu_660_p1));
    man_V_47_fu_670_p3 <= 
        man_V_46_fu_664_p2 when (p_Result_161_fu_626_p3(0) = '1') else 
        p_Result_162_fu_660_p1;
    man_V_49_fu_943_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_164_fu_939_p1));
    man_V_50_fu_949_p3 <= 
        man_V_49_fu_943_p2 when (p_Result_163_fu_905_p3(0) = '1') else 
        p_Result_164_fu_939_p1;
    mul_ln1192_fu_1264_p0 <= sext_ln1118_28_reg_1345(22 - 1 downto 0);
    mul_ln1192_fu_1264_p1 <= sext_ln1118_29_fu_1225_p1(22 - 1 downto 0);
    mul_ln1192_fu_1264_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_1264_p0) * signed(mul_ln1192_fu_1264_p1))), 33));
    mul_ln1193_fu_1238_p0 <= sext_ln1118_28_reg_1345(22 - 1 downto 0);
    mul_ln1193_fu_1238_p1 <= sext_ln1118_30_fu_1229_p1(22 - 1 downto 0);
    mul_ln1193_fu_1238_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1193_fu_1238_p0) * signed(mul_ln1193_fu_1238_p1))), 33));
    mul_ln700_10_fu_1259_p0 <= sext_ln1118_30_fu_1229_p1(22 - 1 downto 0);
    mul_ln700_10_fu_1259_p1 <= sext_ln1118_reg_1339(22 - 1 downto 0);
    mul_ln700_10_fu_1259_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_10_fu_1259_p0) * signed(mul_ln700_10_fu_1259_p1))), 33));
    mul_ln700_fu_1233_p0 <= sext_ln1118_reg_1339(22 - 1 downto 0);
    mul_ln700_fu_1233_p1 <= sext_ln1118_29_fu_1225_p1(22 - 1 downto 0);
    mul_ln700_fu_1233_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_1233_p0) * signed(mul_ln700_fu_1233_p1))), 33));
    or_ln581_10_fu_1109_p2 <= (or_ln582_10_fu_1073_p2 or icmp_ln581_fu_969_p2);
    or_ln581_fu_830_p2 <= (or_ln582_fu_794_p2 or icmp_ln581_1_fu_690_p2);
    or_ln582_10_fu_1073_p2 <= (icmp_ln582_fu_1003_p2 or icmp_ln571_fu_957_p2);
    or_ln582_fu_794_p2 <= (icmp_ln582_1_fu_724_p2 or icmp_ln571_1_fu_678_p2);
    or_ln603_46_fu_870_p2 <= (and_ln585_fu_818_p2 or and_ln582_fu_788_p2);
    or_ln603_47_fu_884_p2 <= (or_ln603_fu_856_p2 or or_ln603_46_fu_870_p2);
    or_ln603_48_fu_1135_p2 <= (and_ln603_10_fu_1121_p2 or and_ln585_30_fu_1103_p2);
    or_ln603_49_fu_1149_p2 <= (and_ln585_29_fu_1097_p2 or and_ln582_10_fu_1067_p2);
    or_ln603_50_fu_1163_p2 <= (or_ln603_49_fu_1149_p2 or or_ln603_48_fu_1135_p2);
    or_ln603_fu_856_p2 <= (and_ln603_fu_842_p2 or and_ln585_28_fu_824_p2);
    or_ln899_fu_457_p2 <= (and_ln899_fu_451_p2 or a_fu_417_p2);
    or_ln_fu_463_p3 <= (ap_const_lv31_0 & or_ln899_fu_457_p2);
    p_Result_152_fu_405_p2 <= (sext_ln891_fu_323_p1 and lshr_ln897_fu_399_p2);
    p_Result_153_fu_443_p3 <= sext_ln891_fu_323_p1(to_integer(unsigned(add_ln899_fu_437_p2)) downto to_integer(unsigned(add_ln899_fu_437_p2))) when (to_integer(unsigned(add_ln899_fu_437_p2))>= 0 and to_integer(unsigned(add_ln899_fu_437_p2))<=21) else "-";
    p_Result_159_fu_337_p3 <= (ap_const_lv10_3FF & p_Result_s_fu_327_p4);
    p_Result_160_fu_589_p5 <= (tmp_4_fu_581_p3 & m_51_fu_545_p1(51 downto 0));
    p_Result_161_fu_626_p3 <= ireg_V_fu_619_p1(63 downto 63);
    p_Result_162_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_652_p3),54));
    p_Result_163_fu_905_p3 <= ireg_V_10_fu_898_p1(63 downto 63);
    p_Result_164_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_931_p3),54));
    
    p_Result_s_fu_327_p4_proc : process(sext_ln891_fu_323_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable p_Result_s_fu_327_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_15(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sext_ln891_fu_323_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_15(5-1 downto 0)));
            for p_Result_s_fu_327_p4_i in 0 to 22-1 loop
                v0_cpy(p_Result_s_fu_327_p4_i) := sext_ln891_fu_323_p1(22-1-p_Result_s_fu_327_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(22-1 downto 0)))));
        res_mask := res_mask(22-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_327_p4 <= resvalue(22-1 downto 0);
    end process;

    ret_V_22_fu_1269_p2 <= std_logic_vector(unsigned(mul_ln1192_fu_1264_p2) + unsigned(mul_ln700_10_fu_1259_p2));
    ret_V_fu_1243_p2 <= std_logic_vector(unsigned(mul_ln700_fu_1233_p2) - unsigned(mul_ln1193_fu_1238_p2));
    s_V_fu_1169_p3 <= 
        select_ln603_69_fu_1155_p3 when (or_ln603_50_fu_1163_p2(0) = '1') else 
        ap_const_lv22_0;
    select_ln588_10_fu_1047_p3 <= 
        ap_const_lv22_3FFFFF when (tmp_79_fu_1039_p3(0) = '1') else 
        ap_const_lv22_0;
    select_ln588_fu_768_p3 <= 
        ap_const_lv22_3FFFFF when (tmp_77_fu_760_p3(0) = '1') else 
        ap_const_lv22_0;
    select_ln603_64_fu_862_p3 <= 
        select_ln588_fu_768_p3 when (and_ln585_fu_818_p2(0) = '1') else 
        trunc_ln583_fu_730_p1;
    select_ln603_65_fu_876_p3 <= 
        select_ln603_fu_848_p3 when (or_ln603_fu_856_p2(0) = '1') else 
        select_ln603_64_fu_862_p3;
    select_ln603_67_fu_1127_p3 <= 
        shl_ln604_fu_1055_p2 when (and_ln603_10_fu_1121_p2(0) = '1') else 
        trunc_ln586_10_fu_1035_p1;
    select_ln603_68_fu_1141_p3 <= 
        select_ln588_10_fu_1047_p3 when (and_ln585_29_fu_1097_p2(0) = '1') else 
        trunc_ln583_10_fu_1009_p1;
    select_ln603_69_fu_1155_p3 <= 
        select_ln603_67_fu_1127_p3 when (or_ln603_48_fu_1135_p2(0) = '1') else 
        select_ln603_68_fu_1141_p3;
    select_ln603_fu_848_p3 <= 
        shl_ln604_1_fu_776_p2 when (and_ln603_fu_842_p2(0) = '1') else 
        trunc_ln586_fu_756_p1;
    select_ln885_fu_605_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_fu_317_p2(0) = '1') else 
        bitcast_ln729_fu_601_p1;
    select_ln915_fu_557_p3 <= 
        ap_const_lv11_3FF when (tmp_75_fu_549_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1118_28_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_V_fu_1169_p3),33));

        sext_ln1118_29_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_R_V_q0),33));

        sext_ln1118_30_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_I_V_q0),33));

        sext_ln1118_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_V_fu_890_p3),33));

        sext_ln55_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_1201_p2),64));

        sext_ln57_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_266),64));

        sext_ln581_28_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_708_p3),22));

        sext_ln581_29_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_10_fu_987_p3),32));

        sext_ln581_30_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_10_fu_987_p3),22));

        sext_ln581_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_708_p3),32));

        sext_ln891_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_reg_242),22));

    sh_amt_10_fu_987_p3 <= 
        add_ln581_fu_975_p2 when (icmp_ln581_fu_969_p2(0) = '1') else 
        sub_ln581_fu_981_p2;
    sh_amt_fu_708_p3 <= 
        add_ln581_1_fu_696_p2 when (icmp_ln581_1_fu_690_p2(0) = '1') else 
        sub_ln581_1_fu_702_p2;
    shl_ln604_1_fu_776_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_730_p1),to_integer(unsigned('0' & sext_ln581_28_fu_720_p1(22-1 downto 0)))));
    shl_ln604_fu_1055_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_10_fu_1009_p1),to_integer(unsigned('0' & sext_ln581_30_fu_999_p1(22-1 downto 0)))));
    shl_ln908_fu_511_p2 <= std_logic_vector(shift_left(unsigned(m_fu_471_p1),to_integer(unsigned('0' & zext_ln908_1_fu_507_p1(31-1 downto 0)))));
    sub_ln581_1_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_fu_684_p2));
    sub_ln581_fu_981_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_10_fu_963_p2));
    sub_ln894_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv32_16) - unsigned(l_fu_345_p3));
    sub_ln897_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv5_C) - unsigned(trunc_ln897_fu_385_p1));
    sub_ln908_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_fu_353_p2));
    sub_ln915_fu_569_p2 <= std_logic_vector(unsigned(ap_const_lv11_B) - unsigned(trunc_ln893_fu_565_p1));
    temp_I_V_fu_1275_p4 <= ret_V_22_fu_1269_p2(32 downto 11);
    temp_R_V_fu_1249_p4 <= ret_V_fu_1243_p2(32 downto 11);
    tmp_4_fu_581_p3 <= (ap_const_lv1_0 & add_ln915_fu_575_p2);
    tmp_5_fu_652_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_648_p1);
    tmp_6_fu_931_p3 <= (ap_const_lv1_1 & trunc_ln565_10_fu_927_p1);
    tmp_74_fu_423_p3 <= lsb_index_fu_363_p2(31 downto 31);
    tmp_75_fu_549_p3 <= m_48_fu_529_p2(54 downto 54);
    tmp_77_fu_760_p3 <= ireg_V_fu_619_p1(63 downto 63);
    tmp_79_fu_1039_p3 <= ireg_V_10_fu_898_p1(63 downto 63);
    tmp_80_fu_1185_p4 <= i_0_reg_266(31 downto 10);
    tmp_fu_369_p4 <= lsb_index_fu_363_p2(31 downto 1);
    trunc_ln556_10_fu_901_p1 <= ireg_V_10_fu_898_p1(63 - 1 downto 0);
    trunc_ln556_fu_622_p1 <= ireg_V_fu_619_p1(63 - 1 downto 0);
    trunc_ln565_10_fu_927_p1 <= ireg_V_10_fu_898_p1(52 - 1 downto 0);
    trunc_ln565_fu_648_p1 <= ireg_V_fu_619_p1(52 - 1 downto 0);
    trunc_ln583_10_fu_1009_p1 <= man_V_50_fu_949_p3(22 - 1 downto 0);
    trunc_ln583_fu_730_p1 <= man_V_47_fu_670_p3(22 - 1 downto 0);
    trunc_ln586_10_fu_1035_p1 <= ashr_ln586_fu_1029_p2(22 - 1 downto 0);
    trunc_ln586_fu_756_p1 <= ashr_ln586_1_fu_750_p2(22 - 1 downto 0);
    trunc_ln893_fu_565_p1 <= l_fu_345_p3(11 - 1 downto 0);
    trunc_ln894_fu_359_p1 <= sub_ln894_fu_353_p2(22 - 1 downto 0);
    trunc_ln897_fu_385_p1 <= sub_ln894_fu_353_p2(5 - 1 downto 0);
    xor_ln571_10_fu_1061_p2 <= (icmp_ln571_fu_957_p2 xor ap_const_lv1_1);
    xor_ln571_fu_782_p2 <= (icmp_ln571_1_fu_678_p2 xor ap_const_lv1_1);
    xor_ln581_10_fu_1115_p2 <= (or_ln581_10_fu_1109_p2 xor ap_const_lv1_1);
    xor_ln581_fu_836_p2 <= (or_ln581_fu_830_p2 xor ap_const_lv1_1);
    xor_ln582_10_fu_1079_p2 <= (or_ln582_10_fu_1073_p2 xor ap_const_lv1_1);
    xor_ln582_fu_800_p2 <= (or_ln582_fu_794_p2 xor ap_const_lv1_1);
    xor_ln585_10_fu_1091_p2 <= (icmp_ln585_fu_1013_p2 xor ap_const_lv1_1);
    xor_ln585_fu_812_p2 <= (icmp_ln585_1_fu_734_p2 xor ap_const_lv1_1);
    xor_ln899_fu_431_p2 <= (tmp_74_fu_423_p3 xor ap_const_lv1_1);
    zext_ln461_1_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_634_p4),12));
    zext_ln461_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_10_fu_913_p4),12));
    zext_ln586_1_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_716_p1),54));
    zext_ln586_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_29_fu_995_p1),54));
    zext_ln891_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_253),32));
    zext_ln897_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_389_p2),22));
    zext_ln907_10_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln891_fu_323_p1),32));
    zext_ln908_1_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_501_p2),64));
    zext_ln908_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_491_p2),64));
    zext_ln911_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_463_p3),64));
end behav;
