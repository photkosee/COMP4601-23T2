// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _bit_reverse_HH_
#define _bit_reverse_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct bit_reverse : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > X_R_V_address0;
    sc_out< sc_logic > X_R_V_ce0;
    sc_in< sc_lv<22> > X_R_V_q0;
    sc_out< sc_lv<10> > X_I_V_address0;
    sc_out< sc_logic > X_I_V_ce0;
    sc_in< sc_lv<22> > X_I_V_q0;
    sc_out< sc_lv<10> > OUT_R_V_address0;
    sc_out< sc_logic > OUT_R_V_ce0;
    sc_out< sc_logic > OUT_R_V_we0;
    sc_out< sc_lv<22> > OUT_R_V_d0;
    sc_out< sc_lv<10> > OUT_I_V_address0;
    sc_out< sc_logic > OUT_I_V_ce0;
    sc_out< sc_logic > OUT_I_V_we0;
    sc_out< sc_lv<22> > OUT_I_V_d0;


    // Module declarations
    bit_reverse(sc_module_name name);
    SC_HAS_PROCESS(bit_reverse);

    ~bit_reverse();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > trunc_ln22_fu_173_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > zext_ln22_fu_177_p1;
    sc_signal< sc_lv<32> > zext_ln22_reg_259;
    sc_signal< sc_lv<11> > i_13_fu_187_p2;
    sc_signal< sc_lv<11> > i_13_reg_267;
    sc_signal< sc_lv<4> > i_fu_199_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > rev_fu_213_p3;
    sc_signal< sc_lv<1> > icmp_ln8_fu_193_p2;
    sc_signal< sc_lv<10> > zext_ln10_fu_231_p1;
    sc_signal< sc_lv<1> > icmp_ln24_fu_235_p2;
    sc_signal< sc_lv<1> > icmp_ln24_reg_290;
    sc_signal< sc_lv<64> > zext_ln27_fu_240_p1;
    sc_signal< sc_lv<64> > zext_ln27_reg_294;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<11> > input_assign_reg_130;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > reversed_reg_142;
    sc_signal< sc_lv<1> > icmp_ln22_fu_181_p2;
    sc_signal< sc_lv<4> > i_0_i_reg_153;
    sc_signal< sc_lv<10> > p_0_i_reg_164;
    sc_signal< sc_lv<64> > zext_ln26_fu_246_p1;
    sc_signal< sc_lv<31> > trunc_ln9_fu_205_p1;
    sc_signal< sc_lv<1> > trunc_ln8_fu_209_p1;
    sc_signal< sc_lv<9> > input_assign_1_fu_221_p4;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_OUT_I_V_address0();
    void thread_OUT_I_V_ce0();
    void thread_OUT_I_V_d0();
    void thread_OUT_I_V_we0();
    void thread_OUT_R_V_address0();
    void thread_OUT_R_V_ce0();
    void thread_OUT_R_V_d0();
    void thread_OUT_R_V_we0();
    void thread_X_I_V_address0();
    void thread_X_I_V_ce0();
    void thread_X_R_V_address0();
    void thread_X_R_V_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_13_fu_187_p2();
    void thread_i_fu_199_p2();
    void thread_icmp_ln22_fu_181_p2();
    void thread_icmp_ln24_fu_235_p2();
    void thread_icmp_ln8_fu_193_p2();
    void thread_input_assign_1_fu_221_p4();
    void thread_rev_fu_213_p3();
    void thread_trunc_ln22_fu_173_p1();
    void thread_trunc_ln8_fu_209_p1();
    void thread_trunc_ln9_fu_205_p1();
    void thread_zext_ln10_fu_231_p1();
    void thread_zext_ln22_fu_177_p1();
    void thread_zext_ln26_fu_246_p1();
    void thread_zext_ln27_fu_240_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
