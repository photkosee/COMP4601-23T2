-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fft_stage_127_W_rbkb_rom is 
    generic(
             DWIDTH     : integer := 13; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fft_stage_127_W_rbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0100000000000", 1 to 5=> "0011111111111", 6 to 7=> "0011111111110", 
    8 => "0011111111101", 9 to 10=> "0011111111100", 11 => "0011111111011", 
    12 => "0011111111010", 13 => "0011111111001", 14 => "0011111111000", 
    15 => "0011111110111", 16 => "0011111110110", 17 => "0011111110100", 
    18 => "0011111110011", 19 => "0011111110010", 20 => "0011111110000", 
    21 => "0011111101111", 22 => "0011111101101", 23 => "0011111101011", 
    24 => "0011111101001", 25 => "0011111100111", 26 => "0011111100101", 
    27 => "0011111100011", 28 => "0011111100001", 29 => "0011111011111", 
    30 => "0011111011101", 31 => "0011111011011", 32 => "0011111011000", 
    33 => "0011111010110", 34 => "0011111010011", 35 => "0011111010000", 
    36 => "0011111001110", 37 => "0011111001011", 38 => "0011111001000", 
    39 => "0011111000101", 40 => "0011111000010", 41 => "0011110111111", 
    42 => "0011110111100", 43 => "0011110111001", 44 => "0011110110101", 
    45 => "0011110110010", 46 => "0011110101110", 47 => "0011110101011", 
    48 => "0011110100111", 49 => "0011110100100", 50 => "0011110100000", 
    51 => "0011110011100", 52 => "0011110011000", 53 => "0011110010100", 
    54 => "0011110010000", 55 => "0011110001100", 56 => "0011110001000", 
    57 => "0011110000100", 58 => "0011101111111", 59 => "0011101111011", 
    60 => "0011101110110", 61 => "0011101110010", 62 => "0011101101101", 
    63 => "0011101101000", 64 => "0011101100100", 65 => "0011101011111", 
    66 => "0011101011010", 67 => "0011101010101", 68 => "0011101010000", 
    69 => "0011101001011", 70 => "0011101000101", 71 => "0011101000000", 
    72 => "0011100111011", 73 => "0011100110101", 74 => "0011100110000", 
    75 => "0011100101010", 76 => "0011100100101", 77 => "0011100011111", 
    78 => "0011100011001", 79 => "0011100010100", 80 => "0011100001110", 
    81 => "0011100001000", 82 => "0011100000010", 83 => "0011011111100", 
    84 => "0011011110101", 85 => "0011011101111", 86 => "0011011101001", 
    87 => "0011011100011", 88 => "0011011011100", 89 => "0011011010110", 
    90 => "0011011001111", 91 => "0011011001000", 92 => "0011011000010", 
    93 => "0011010111011", 94 => "0011010110100", 95 => "0011010101101", 
    96 => "0011010100110", 97 => "0011010011111", 98 => "0011010011000", 
    99 => "0011010010001", 100 => "0011010001010", 101 => "0011010000011", 
    102 => "0011001111011", 103 => "0011001110100", 104 => "0011001101100", 
    105 => "0011001100101", 106 => "0011001011101", 107 => "0011001010110", 
    108 => "0011001001110", 109 => "0011001000110", 110 => "0011000111110", 
    111 => "0011000110111", 112 => "0011000101111", 113 => "0011000100111", 
    114 => "0011000011111", 115 => "0011000010110", 116 => "0011000001110", 
    117 => "0011000000110", 118 => "0010111111110", 119 => "0010111110101", 
    120 => "0010111101101", 121 => "0010111100101", 122 => "0010111011100", 
    123 => "0010111010011", 124 => "0010111001011", 125 => "0010111000010", 
    126 => "0010110111001", 127 => "0010110110001", 128 => "0010110101000", 
    129 => "0010110011111", 130 => "0010110010110", 131 => "0010110001101", 
    132 => "0010110000100", 133 => "0010101111011", 134 => "0010101110001", 
    135 => "0010101101000", 136 => "0010101011111", 137 => "0010101010110", 
    138 => "0010101001100", 139 => "0010101000011", 140 => "0010100111001", 
    141 => "0010100110000", 142 => "0010100100110", 143 => "0010100011100", 
    144 => "0010100010011", 145 => "0010100001001", 146 => "0010011111111", 
    147 => "0010011110101", 148 => "0010011101011", 149 => "0010011100010", 
    150 => "0010011011000", 151 => "0010011001110", 152 => "0010011000011", 
    153 => "0010010111001", 154 => "0010010101111", 155 => "0010010100101", 
    156 => "0010010011011", 157 => "0010010010000", 158 => "0010010000110", 
    159 => "0010001111100", 160 => "0010001110001", 161 => "0010001100111", 
    162 => "0010001011100", 163 => "0010001010010", 164 => "0010001000111", 
    165 => "0010000111101", 166 => "0010000110010", 167 => "0010000100111", 
    168 => "0010000011100", 169 => "0010000010010", 170 => "0010000000111", 
    171 => "0001111111100", 172 => "0001111110001", 173 => "0001111100110", 
    174 => "0001111011011", 175 => "0001111010000", 176 => "0001111000101", 
    177 => "0001110111010", 178 => "0001110101111", 179 => "0001110100100", 
    180 => "0001110011000", 181 => "0001110001101", 182 => "0001110000010", 
    183 => "0001101110110", 184 => "0001101101011", 185 => "0001101100000", 
    186 => "0001101010100", 187 => "0001101001001", 188 => "0001100111101", 
    189 => "0001100110010", 190 => "0001100100110", 191 => "0001100011011", 
    192 => "0001100001111", 193 => "0001100000100", 194 => "0001011111000", 
    195 => "0001011101100", 196 => "0001011100001", 197 => "0001011010101", 
    198 => "0001011001001", 199 => "0001010111101", 200 => "0001010110001", 
    201 => "0001010100110", 202 => "0001010011010", 203 => "0001010001110", 
    204 => "0001010000010", 205 => "0001001110110", 206 => "0001001101010", 
    207 => "0001001011110", 208 => "0001001010010", 209 => "0001001000110", 
    210 => "0001000111010", 211 => "0001000101110", 212 => "0001000100010", 
    213 => "0001000010110", 214 => "0001000001001", 215 => "0000111111101", 
    216 => "0000111110001", 217 => "0000111100101", 218 => "0000111011001", 
    219 => "0000111001100", 220 => "0000111000000", 221 => "0000110110100", 
    222 => "0000110101000", 223 => "0000110011011", 224 => "0000110001111", 
    225 => "0000110000011", 226 => "0000101110110", 227 => "0000101101010", 
    228 => "0000101011110", 229 => "0000101010001", 230 => "0000101000101", 
    231 => "0000100111000", 232 => "0000100101100", 233 => "0000100100000", 
    234 => "0000100010011", 235 => "0000100000111", 236 => "0000011111010", 
    237 => "0000011101110", 238 => "0000011100001", 239 => "0000011010101", 
    240 => "0000011001000", 241 => "0000010111100", 242 => "0000010101111", 
    243 => "0000010100011", 244 => "0000010010110", 245 => "0000010001010", 
    246 => "0000001111101", 247 => "0000001110001", 248 => "0000001100100", 
    249 => "0000001010111", 250 => "0000001001011", 251 => "0000000111110", 
    252 => "0000000110010", 253 => "0000000100101", 254 => "0000000011001", 
    255 => "0000000001100", 256 => "0000000000000", 257 => "1111111110011", 
    258 => "1111111100110", 259 => "1111111011010", 260 => "1111111001101", 
    261 => "1111111000001", 262 => "1111110110100", 263 => "1111110101000", 
    264 => "1111110011011", 265 => "1111110001110", 266 => "1111110000010", 
    267 => "1111101110101", 268 => "1111101101001", 269 => "1111101011100", 
    270 => "1111101010000", 271 => "1111101000011", 272 => "1111100110111", 
    273 => "1111100101010", 274 => "1111100011110", 275 => "1111100010001", 
    276 => "1111100000101", 277 => "1111011111000", 278 => "1111011101100", 
    279 => "1111011011111", 280 => "1111011010011", 281 => "1111011000111", 
    282 => "1111010111010", 283 => "1111010101110", 284 => "1111010100001", 
    285 => "1111010010101", 286 => "1111010001001", 287 => "1111001111100", 
    288 => "1111001110000", 289 => "1111001100100", 290 => "1111001010111", 
    291 => "1111001001011", 292 => "1111000111111", 293 => "1111000110011", 
    294 => "1111000100110", 295 => "1111000011010", 296 => "1111000001110", 
    297 => "1111000000010", 298 => "1110111110110", 299 => "1110111101001", 
    300 => "1110111011101", 301 => "1110111010001", 302 => "1110111000101", 
    303 => "1110110111001", 304 => "1110110101101", 305 => "1110110100001", 
    306 => "1110110010101", 307 => "1110110001001", 308 => "1110101111101", 
    309 => "1110101110001", 310 => "1110101100101", 311 => "1110101011001", 
    312 => "1110101001110", 313 => "1110101000010", 314 => "1110100110110", 
    315 => "1110100101010", 316 => "1110100011110", 317 => "1110100010011", 
    318 => "1110100000111", 319 => "1110011111011", 320 => "1110011110000", 
    321 => "1110011100100", 322 => "1110011011001", 323 => "1110011001101", 
    324 => "1110011000010", 325 => "1110010110110", 326 => "1110010101011", 
    327 => "1110010011111", 328 => "1110010010100", 329 => "1110010001001", 
    330 => "1110001111101", 331 => "1110001110010", 332 => "1110001100111", 
    333 => "1110001011011", 334 => "1110001010000", 335 => "1110001000101", 
    336 => "1110000111010", 337 => "1110000101111", 338 => "1110000100100", 
    339 => "1110000011001", 340 => "1110000001110", 341 => "1110000000011", 
    342 => "1101111111000", 343 => "1101111101101", 344 => "1101111100011", 
    345 => "1101111011000", 346 => "1101111001101", 347 => "1101111000010", 
    348 => "1101110111000", 349 => "1101110101101", 350 => "1101110100011", 
    351 => "1101110011000", 352 => "1101110001110", 353 => "1101110000011", 
    354 => "1101101111001", 355 => "1101101101111", 356 => "1101101100100", 
    357 => "1101101011010", 358 => "1101101010000", 359 => "1101101000110", 
    360 => "1101100111100", 361 => "1101100110001", 362 => "1101100100111", 
    363 => "1101100011101", 364 => "1101100010100", 365 => "1101100001010", 
    366 => "1101100000000", 367 => "1101011110110", 368 => "1101011101100", 
    369 => "1101011100011", 370 => "1101011011001", 371 => "1101011001111", 
    372 => "1101011000110", 373 => "1101010111100", 374 => "1101010110011", 
    375 => "1101010101001", 376 => "1101010100000", 377 => "1101010010111", 
    378 => "1101010001110", 379 => "1101010000100", 380 => "1101001111011", 
    381 => "1101001110010", 382 => "1101001101001", 383 => "1101001100000", 
    384 => "1101001010111", 385 => "1101001001110", 386 => "1101001000110", 
    387 => "1101000111101", 388 => "1101000110100", 389 => "1101000101100", 
    390 => "1101000100011", 391 => "1101000011010", 392 => "1101000010010", 
    393 => "1101000001010", 394 => "1101000000001", 395 => "1100111111001", 
    396 => "1100111110001", 397 => "1100111101001", 398 => "1100111100000", 
    399 => "1100111011000", 400 => "1100111010000", 401 => "1100111001000", 
    402 => "1100111000001", 403 => "1100110111001", 404 => "1100110110001", 
    405 => "1100110101001", 406 => "1100110100010", 407 => "1100110011010", 
    408 => "1100110010011", 409 => "1100110001011", 410 => "1100110000100", 
    411 => "1100101111100", 412 => "1100101110101", 413 => "1100101101110", 
    414 => "1100101100111", 415 => "1100101100000", 416 => "1100101011001", 
    417 => "1100101010010", 418 => "1100101001011", 419 => "1100101000100", 
    420 => "1100100111101", 421 => "1100100110111", 422 => "1100100110000", 
    423 => "1100100101001", 424 => "1100100100011", 425 => "1100100011100", 
    426 => "1100100010110", 427 => "1100100010000", 428 => "1100100001010", 
    429 => "1100100000011", 430 => "1100011111101", 431 => "1100011110111", 
    432 => "1100011110001", 433 => "1100011101011", 434 => "1100011100110", 
    435 => "1100011100000", 436 => "1100011011010", 437 => "1100011010101", 
    438 => "1100011001111", 439 => "1100011001010", 440 => "1100011000100", 
    441 => "1100010111111", 442 => "1100010111010", 443 => "1100010110100", 
    444 => "1100010101111", 445 => "1100010101010", 446 => "1100010100101", 
    447 => "1100010100000", 448 => "1100010011011", 449 => "1100010010111", 
    450 => "1100010010010", 451 => "1100010001101", 452 => "1100010001001", 
    453 => "1100010000100", 454 => "1100010000000", 455 => "1100001111011", 
    456 => "1100001110111", 457 => "1100001110011", 458 => "1100001101111", 
    459 => "1100001101011", 460 => "1100001100111", 461 => "1100001100011", 
    462 => "1100001011111", 463 => "1100001011011", 464 => "1100001011000", 
    465 => "1100001010100", 466 => "1100001010001", 467 => "1100001001101", 
    468 => "1100001001010", 469 => "1100001000110", 470 => "1100001000011", 
    471 => "1100001000000", 472 => "1100000111101", 473 => "1100000111010", 
    474 => "1100000110111", 475 => "1100000110100", 476 => "1100000110001", 
    477 => "1100000101111", 478 => "1100000101100", 479 => "1100000101001", 
    480 => "1100000100111", 481 => "1100000100100", 482 => "1100000100010", 
    483 => "1100000100000", 484 => "1100000011110", 485 => "1100000011100", 
    486 => "1100000011010", 487 => "1100000011000", 488 => "1100000010110", 
    489 => "1100000010100", 490 => "1100000010010", 491 => "1100000010000", 
    492 => "1100000001111", 493 => "1100000001101", 494 => "1100000001100", 
    495 => "1100000001011", 496 => "1100000001001", 497 => "1100000001000", 
    498 => "1100000000111", 499 => "1100000000110", 500 => "1100000000101", 
    501 => "1100000000100", 502 to 503=> "1100000000011", 504 => "1100000000010", 
    505 to 506=> "1100000000001", 507 to 511=> "1100000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity fft_stage_127_W_rbkb is
    generic (
        DataWidth : INTEGER := 13;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fft_stage_127_W_rbkb is
    component fft_stage_127_W_rbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fft_stage_127_W_rbkb_rom_U :  component fft_stage_127_W_rbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


