-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage35 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_V9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V9_ce0 : OUT STD_LOGIC;
    X_R_V9_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_R_V9_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V9_ce1 : OUT STD_LOGIC;
    X_R_V9_q1 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V18_ce0 : OUT STD_LOGIC;
    X_I_V18_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V18_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V18_ce1 : OUT STD_LOGIC;
    X_I_V18_q1 : IN STD_LOGIC_VECTOR (21 downto 0);
    Out_R_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_V_ce0 : OUT STD_LOGIC;
    Out_R_V_we0 : OUT STD_LOGIC;
    Out_R_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_R_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_V_ce1 : OUT STD_LOGIC;
    Out_R_V_we1 : OUT STD_LOGIC;
    Out_R_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_I_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_V_ce0 : OUT STD_LOGIC;
    Out_I_V_we0 : OUT STD_LOGIC;
    Out_I_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    Out_I_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_V_ce1 : OUT STD_LOGIC;
    Out_I_V_we1 : OUT STD_LOGIC;
    Out_I_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of fft_stage35 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_real_V62_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real_V62_ce0 : STD_LOGIC;
    signal W_real_V62_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal W_imag_V54_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag_V54_ce0 : STD_LOGIC;
    signal W_imag_V54_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_176 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln47_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln47_reg_305_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_193_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln55_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_314_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_332 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_332_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal c_V_reg_344 : STD_LOGIC_VECTOR (12 downto 0);
    signal s_V_reg_349 : STD_LOGIC_VECTOR (11 downto 0);
    signal X_R_V9_load_reg_354 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_lower_fu_205_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_281_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_290_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp_R_V_fu_229_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal temp_I_V_fu_238_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_fu_275_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_fu_216_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_1_fu_219_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_281_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_222_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_3_fu_226_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_fu_275_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_fu_298_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1192_fu_298_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_298_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component fft_streaming_mulxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fft_streaming_macyd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fft_streaming_maczec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fft_streaming_mulAem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fft_stage_127_W_rbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component fft_stage_127_W_icud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    W_real_V62_U : component fft_stage_127_W_rbkb
    generic map (
        DataWidth => 13,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_real_V62_address0,
        ce0 => W_real_V62_ce0,
        q0 => W_real_V62_q0);

    W_imag_V54_U : component fft_stage_127_W_icud
    generic map (
        DataWidth => 12,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_imag_V54_address0,
        ce0 => W_imag_V54_ce0,
        q0 => W_imag_V54_q0);

    fft_streaming_mulxdS_U79 : component fft_streaming_mulxdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 13,
        dout_WIDTH => 33)
    port map (
        din0 => mul_ln700_fu_275_p0,
        din1 => mul_ln700_fu_275_p1,
        dout => mul_ln700_fu_275_p2);

    fft_streaming_macyd2_U80 : component fft_streaming_macyd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 12,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        din0 => grp_fu_281_p0,
        din1 => grp_fu_281_p1,
        din2 => mul_ln700_fu_275_p2,
        dout => grp_fu_281_p3);

    fft_streaming_maczec_U81 : component fft_streaming_maczec
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 13,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        din0 => grp_fu_290_p0,
        din1 => grp_fu_290_p1,
        din2 => mul_ln1192_fu_298_p2,
        dout => grp_fu_290_p3);

    fft_streaming_mulAem_U82 : component fft_streaming_mulAem
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 12,
        dout_WIDTH => 33)
    port map (
        din0 => mul_ln1192_fu_298_p0,
        din1 => mul_ln1192_fu_298_p1,
        dout => mul_ln1192_fu_298_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln47_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_176 <= j_fu_193_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_176 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln47_reg_305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                X_R_V9_load_reg_354 <= X_R_V9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln47_reg_305 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                c_V_reg_344 <= W_real_V62_q0;
                s_V_reg_349 <= W_imag_V54_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln47_reg_305 <= icmp_ln47_fu_187_p2;
                icmp_ln47_reg_305_pp0_iter1_reg <= icmp_ln47_reg_305;
                    zext_ln55_reg_314_pp0_iter1_reg(9 downto 0) <= zext_ln55_reg_314(9 downto 0);
                    zext_ln58_reg_332_pp0_iter1_reg(9 downto 0) <= zext_ln58_reg_332(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln47_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln55_reg_314(9 downto 0) <= zext_ln55_fu_199_p1(9 downto 0);
                    zext_ln58_reg_332(9 downto 0) <= zext_ln58_fu_211_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln55_reg_314(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln55_reg_314_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_332(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_332_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln47_fu_187_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln47_fu_187_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln47_fu_187_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Out_I_V_address0 <= zext_ln58_reg_332_pp0_iter1_reg(10 - 1 downto 0);
    Out_I_V_address1 <= zext_ln55_reg_314_pp0_iter1_reg(10 - 1 downto 0);

    Out_I_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_I_V_ce0 <= ap_const_logic_1;
        else 
            Out_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_I_V_ce1 <= ap_const_logic_1;
        else 
            Out_I_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_I_V_d0 <= std_logic_vector(unsigned(X_I_V18_q1) - unsigned(temp_I_V_fu_238_p4));
    Out_I_V_d1 <= std_logic_vector(unsigned(X_I_V18_q1) + unsigned(temp_I_V_fu_238_p4));

    Out_I_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln47_reg_305_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln47_reg_305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_I_V_we0 <= ap_const_logic_1;
        else 
            Out_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln47_reg_305_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln47_reg_305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_I_V_we1 <= ap_const_logic_1;
        else 
            Out_I_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_V_address0 <= zext_ln58_reg_332_pp0_iter1_reg(10 - 1 downto 0);
    Out_R_V_address1 <= zext_ln55_reg_314_pp0_iter1_reg(10 - 1 downto 0);

    Out_R_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_R_V_ce0 <= ap_const_logic_1;
        else 
            Out_R_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_R_V_ce1 <= ap_const_logic_1;
        else 
            Out_R_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_V_d0 <= std_logic_vector(unsigned(X_R_V9_q1) - unsigned(temp_R_V_fu_229_p4));
    Out_R_V_d1 <= std_logic_vector(unsigned(X_R_V9_q1) + unsigned(temp_R_V_fu_229_p4));

    Out_R_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln47_reg_305_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln47_reg_305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_R_V_we0 <= ap_const_logic_1;
        else 
            Out_R_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln47_reg_305_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln47_reg_305_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Out_R_V_we1 <= ap_const_logic_1;
        else 
            Out_R_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    W_imag_V54_address0 <= zext_ln55_fu_199_p1(9 - 1 downto 0);

    W_imag_V54_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            W_imag_V54_ce0 <= ap_const_logic_1;
        else 
            W_imag_V54_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_real_V62_address0 <= zext_ln55_fu_199_p1(9 - 1 downto 0);

    W_real_V62_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            W_real_V62_ce0 <= ap_const_logic_1;
        else 
            W_real_V62_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_V18_address0 <= zext_ln58_reg_332(10 - 1 downto 0);
    X_I_V18_address1 <= zext_ln55_reg_314(10 - 1 downto 0);

    X_I_V18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            X_I_V18_ce0 <= ap_const_logic_1;
        else 
            X_I_V18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_V18_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            X_I_V18_ce1 <= ap_const_logic_1;
        else 
            X_I_V18_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_V9_address0 <= zext_ln58_fu_211_p1(10 - 1 downto 0);
    X_R_V9_address1 <= zext_ln55_reg_314(10 - 1 downto 0);

    X_R_V9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_R_V9_ce0 <= ap_const_logic_1;
        else 
            X_R_V9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_V9_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            X_R_V9_ce1 <= ap_const_logic_1;
        else 
            X_R_V9_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln47_fu_187_p2)
    begin
        if ((icmp_ln47_fu_187_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_281_p0 <= sext_ln1118_2_fu_222_p1(22 - 1 downto 0);
    grp_fu_281_p1 <= sext_ln1118_3_fu_226_p1(12 - 1 downto 0);
    grp_fu_290_p0 <= sext_ln1118_2_fu_222_p1(22 - 1 downto 0);
    grp_fu_290_p1 <= sext_ln1118_1_fu_219_p1(13 - 1 downto 0);
    i_lower_fu_205_p2 <= (i_reg_176 xor ap_const_lv10_200);
    icmp_ln47_fu_187_p2 <= "1" when (i_reg_176 = ap_const_lv10_200) else "0";
    j_fu_193_p2 <= std_logic_vector(unsigned(i_reg_176) + unsigned(ap_const_lv10_1));
    mul_ln1192_fu_298_p0 <= sext_ln1118_fu_216_p1(22 - 1 downto 0);
    mul_ln1192_fu_298_p1 <= sext_ln1118_3_fu_226_p1(12 - 1 downto 0);
    mul_ln700_fu_275_p0 <= sext_ln1118_fu_216_p1(22 - 1 downto 0);
    mul_ln700_fu_275_p1 <= sext_ln1118_1_fu_219_p1(13 - 1 downto 0);
        sext_ln1118_1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_V_reg_344),33));

        sext_ln1118_2_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_I_V18_q0),33));

        sext_ln1118_3_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_V_reg_349),33));

        sext_ln1118_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_R_V9_load_reg_354),33));

    temp_I_V_fu_238_p4 <= grp_fu_290_p3(32 downto 11);
    temp_R_V_fu_229_p4 <= grp_fu_281_p3(32 downto 11);
    zext_ln55_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_176),64));
    zext_ln58_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_lower_fu_205_p2),64));
end behav;
