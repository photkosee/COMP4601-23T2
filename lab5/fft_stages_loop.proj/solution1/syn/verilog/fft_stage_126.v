// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_stage_126 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        X_R_0_V_address0,
        X_R_0_V_ce0,
        X_R_0_V_q0,
        X_R_0_V_address1,
        X_R_0_V_ce1,
        X_R_0_V_q1,
        X_I_0_V_address0,
        X_I_0_V_ce0,
        X_I_0_V_q0,
        X_I_0_V_address1,
        X_I_0_V_ce1,
        X_I_0_V_q1,
        Out_R_1_V_address0,
        Out_R_1_V_ce0,
        Out_R_1_V_we0,
        Out_R_1_V_d0,
        Out_R_1_V_address1,
        Out_R_1_V_ce1,
        Out_R_1_V_we1,
        Out_R_1_V_d1,
        Out_I_1_V_address0,
        Out_I_1_V_ce0,
        Out_I_1_V_we0,
        Out_I_1_V_d0,
        Out_I_1_V_address1,
        Out_I_1_V_ce1,
        Out_I_1_V_we1,
        Out_I_1_V_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] X_R_0_V_address0;
output   X_R_0_V_ce0;
input  [21:0] X_R_0_V_q0;
output  [9:0] X_R_0_V_address1;
output   X_R_0_V_ce1;
input  [21:0] X_R_0_V_q1;
output  [9:0] X_I_0_V_address0;
output   X_I_0_V_ce0;
input  [21:0] X_I_0_V_q0;
output  [9:0] X_I_0_V_address1;
output   X_I_0_V_ce1;
input  [21:0] X_I_0_V_q1;
output  [9:0] Out_R_1_V_address0;
output   Out_R_1_V_ce0;
output   Out_R_1_V_we0;
output  [21:0] Out_R_1_V_d0;
output  [9:0] Out_R_1_V_address1;
output   Out_R_1_V_ce1;
output   Out_R_1_V_we1;
output  [21:0] Out_R_1_V_d1;
output  [9:0] Out_I_1_V_address0;
output   Out_I_1_V_ce0;
output   Out_I_1_V_we0;
output  [21:0] Out_I_1_V_d0;
output  [9:0] Out_I_1_V_address1;
output   Out_I_1_V_ce1;
output   Out_I_1_V_we1;
output  [21:0] Out_I_1_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_R_0_V_ce0;
reg X_R_0_V_ce1;
reg X_I_0_V_ce0;
reg X_I_0_V_ce1;
reg Out_R_1_V_ce0;
reg Out_R_1_V_we0;
reg Out_R_1_V_ce1;
reg Out_R_1_V_we1;
reg Out_I_1_V_ce0;
reg Out_I_1_V_we0;
reg Out_I_1_V_ce1;
reg Out_I_1_V_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] t_0_reg_142;
wire   [0:0] icmp_ln50_fu_153_p2;
reg   [0:0] icmp_ln50_reg_217;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] t_fu_159_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln58_fu_177_p1;
reg   [63:0] zext_ln58_reg_226;
wire   [63:0] zext_ln60_fu_183_p1;
reg   [63:0] zext_ln60_reg_242;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire   [9:0] i_fu_165_p2;
wire   [9:0] i_lower_fu_171_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_0_reg_142 <= t_fu_159_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_0_reg_142 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_217 <= icmp_ln50_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln58_reg_226[9 : 1] <= zext_ln58_fu_177_p1[9 : 1];
        zext_ln60_reg_242[9 : 1] <= zext_ln60_fu_183_p1[9 : 1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_I_1_V_ce0 = 1'b1;
    end else begin
        Out_I_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_I_1_V_ce1 = 1'b1;
    end else begin
        Out_I_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_reg_217 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_I_1_V_we0 = 1'b1;
    end else begin
        Out_I_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_reg_217 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_I_1_V_we1 = 1'b1;
    end else begin
        Out_I_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_R_1_V_ce0 = 1'b1;
    end else begin
        Out_R_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_R_1_V_ce1 = 1'b1;
    end else begin
        Out_R_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_reg_217 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_R_1_V_we0 = 1'b1;
    end else begin
        Out_R_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_reg_217 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Out_R_1_V_we1 = 1'b1;
    end else begin
        Out_R_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_0_V_ce0 = 1'b1;
    end else begin
        X_I_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_0_V_ce1 = 1'b1;
    end else begin
        X_I_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_0_V_ce0 = 1'b1;
    end else begin
        X_R_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_0_V_ce1 = 1'b1;
    end else begin
        X_R_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_153_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln50_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln50_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_I_1_V_address0 = zext_ln58_reg_226;

assign Out_I_1_V_address1 = zext_ln60_reg_242;

assign Out_I_1_V_d0 = (X_I_0_V_q1 - X_I_0_V_q0);

assign Out_I_1_V_d1 = (X_I_0_V_q1 + X_I_0_V_q0);

assign Out_R_1_V_address0 = zext_ln58_reg_226;

assign Out_R_1_V_address1 = zext_ln60_reg_242;

assign Out_R_1_V_d0 = (X_R_0_V_q1 - X_R_0_V_q0);

assign Out_R_1_V_d1 = (X_R_0_V_q1 + X_R_0_V_q0);

assign X_I_0_V_address0 = zext_ln58_fu_177_p1;

assign X_I_0_V_address1 = zext_ln60_fu_183_p1;

assign X_R_0_V_address0 = zext_ln58_fu_177_p1;

assign X_R_0_V_address1 = zext_ln60_fu_183_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_165_p2 = t_0_reg_142 << 10'd1;

assign i_lower_fu_171_p2 = (i_fu_165_p2 | 10'd1);

assign icmp_ln50_fu_153_p2 = ((t_0_reg_142 == 10'd512) ? 1'b1 : 1'b0);

assign t_fu_159_p2 = (t_0_reg_142 + 10'd1);

assign zext_ln58_fu_177_p1 = i_lower_fu_171_p2;

assign zext_ln60_fu_183_p1 = i_fu_165_p2;

always @ (posedge ap_clk) begin
    zext_ln58_reg_226[0] <= 1'b1;
    zext_ln58_reg_226[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln60_reg_242[0] <= 1'b0;
    zext_ln60_reg_242[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //fft_stage_126
