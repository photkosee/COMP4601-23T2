// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fft_stage_126_HH_
#define _fft_stage_126_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fft_stage_126 : public sc_module {
    // Port declarations 35
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > X_R_0_V_address0;
    sc_out< sc_logic > X_R_0_V_ce0;
    sc_in< sc_lv<22> > X_R_0_V_q0;
    sc_out< sc_lv<10> > X_R_0_V_address1;
    sc_out< sc_logic > X_R_0_V_ce1;
    sc_in< sc_lv<22> > X_R_0_V_q1;
    sc_out< sc_lv<10> > X_I_0_V_address0;
    sc_out< sc_logic > X_I_0_V_ce0;
    sc_in< sc_lv<22> > X_I_0_V_q0;
    sc_out< sc_lv<10> > X_I_0_V_address1;
    sc_out< sc_logic > X_I_0_V_ce1;
    sc_in< sc_lv<22> > X_I_0_V_q1;
    sc_out< sc_lv<10> > Out_R_1_V_address0;
    sc_out< sc_logic > Out_R_1_V_ce0;
    sc_out< sc_logic > Out_R_1_V_we0;
    sc_out< sc_lv<22> > Out_R_1_V_d0;
    sc_out< sc_lv<10> > Out_R_1_V_address1;
    sc_out< sc_logic > Out_R_1_V_ce1;
    sc_out< sc_logic > Out_R_1_V_we1;
    sc_out< sc_lv<22> > Out_R_1_V_d1;
    sc_out< sc_lv<10> > Out_I_1_V_address0;
    sc_out< sc_logic > Out_I_1_V_ce0;
    sc_out< sc_logic > Out_I_1_V_we0;
    sc_out< sc_lv<22> > Out_I_1_V_d0;
    sc_out< sc_lv<10> > Out_I_1_V_address1;
    sc_out< sc_logic > Out_I_1_V_ce1;
    sc_out< sc_logic > Out_I_1_V_we1;
    sc_out< sc_lv<22> > Out_I_1_V_d1;


    // Module declarations
    fft_stage_126(sc_module_name name);
    SC_HAS_PROCESS(fft_stage_126);

    ~fft_stage_126();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > t_0_reg_142;
    sc_signal< sc_lv<1> > icmp_ln50_fu_153_p2;
    sc_signal< sc_lv<1> > icmp_ln50_reg_217;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > t_fu_159_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln58_fu_177_p1;
    sc_signal< sc_lv<64> > zext_ln58_reg_226;
    sc_signal< sc_lv<64> > zext_ln60_fu_183_p1;
    sc_signal< sc_lv<64> > zext_ln60_reg_242;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<10> > i_fu_165_p2;
    sc_signal< sc_lv<10> > i_lower_fu_171_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Out_I_1_V_address0();
    void thread_Out_I_1_V_address1();
    void thread_Out_I_1_V_ce0();
    void thread_Out_I_1_V_ce1();
    void thread_Out_I_1_V_d0();
    void thread_Out_I_1_V_d1();
    void thread_Out_I_1_V_we0();
    void thread_Out_I_1_V_we1();
    void thread_Out_R_1_V_address0();
    void thread_Out_R_1_V_address1();
    void thread_Out_R_1_V_ce0();
    void thread_Out_R_1_V_ce1();
    void thread_Out_R_1_V_d0();
    void thread_Out_R_1_V_d1();
    void thread_Out_R_1_V_we0();
    void thread_Out_R_1_V_we1();
    void thread_X_I_0_V_address0();
    void thread_X_I_0_V_address1();
    void thread_X_I_0_V_ce0();
    void thread_X_I_0_V_ce1();
    void thread_X_R_0_V_address0();
    void thread_X_R_0_V_address1();
    void thread_X_R_0_V_ce0();
    void thread_X_R_0_V_ce1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_fu_165_p2();
    void thread_i_lower_fu_171_p2();
    void thread_icmp_ln50_fu_153_p2();
    void thread_t_fu_159_p2();
    void thread_zext_ln58_fu_177_p1();
    void thread_zext_ln60_fu_183_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
