-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_4_ce0 : STD_LOGIC;
    signal fourth_order_double_4_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_5_ce0 : STD_LOGIC;
    signal fourth_order_double_5_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_6_ce0 : STD_LOGIC;
    signal fourth_order_double_6_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_7_ce0 : STD_LOGIC;
    signal fourth_order_double_7_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_s_ce0 : STD_LOGIC;
    signal fourth_order_double_s_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_s_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_286_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_reg_1127 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_1_fu_296_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_1_reg_1134 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1140 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln601_fu_335_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln601_reg_1151 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln833_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_29_reg_1172 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln_i_reg_1178 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_30_fu_416_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_30_reg_1183 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Mx_V_reg_1189 : STD_LOGIC_VECTOR (62 downto 0);
    signal Ex_V_fu_510_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1196 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1208 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_575_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_V_fu_606_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1234 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_5_fu_620_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_5_reg_1239 : STD_LOGIC_VECTOR (97 downto 0);
    signal B_squared_V_reg_1244 : STD_LOGIC_VECTOR (48 downto 0);
    signal xor_ln29_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_third_power_V_reg_1280 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal fourth_order_double_14_reg_1285 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_reg_1290 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_14_fu_799_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_14_reg_1295 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_8_fu_839_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_8_reg_1300 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal cos_basis_fu_850_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal result_V_reg_1310 : STD_LOGIC_VECTOR (62 downto 0);
    signal ret_V_fu_898_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_reg_1315 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_scaled_fixed2ieee_fu_268_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_268_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_scaled_fixed2ieee_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln635_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_1_fu_306_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_V_fu_312_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_320_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln744_fu_346_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_17_fu_349_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ret_V_11_fu_355_p4 : STD_LOGIC_VECTOR (169 downto 0);
    signal p_Result_15_fu_339_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal add_ln114_fu_404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln745_fu_422_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_426_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_7_fu_431_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_i_i_39_fu_438_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_16_fu_448_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_8_fu_456_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_17_fu_466_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_474_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_zeros_V_fu_482_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1253_fu_486_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal r_V_18_fu_490_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal select_ln482_fu_409_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln655_fu_506_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1334_fu_534_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_537_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_543_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_fu_554_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_558_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_3_fu_563_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_19_fu_568_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal B_trunc_V_fu_610_p4 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_20_fu_624_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_20_fu_624_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_20_fu_624_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal xor_ln29_fu_640_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_596_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_fu_652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_21_fu_672_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_21_fu_672_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_8_fu_669_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_21_fu_672_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_22_fu_687_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_22_fu_687_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_22_fu_687_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_23_fu_718_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_23_fu_718_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_23_fu_718_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_24_fu_741_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_24_fu_741_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_24_fu_741_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal B_fourth_power_V_fu_693_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_26_fu_765_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_26_fu_765_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_26_fu_765_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal t1_V_fu_703_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln1_fu_724_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal lhs_V_1_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_2_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln662_1_fu_747_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_13_fu_789_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln657_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_25_fu_811_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_25_fu_811_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_25_fu_811_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal tmp_3_fu_817_p4 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln657_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_15_fu_831_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln657_1_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cos_basis_fu_850_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln272_1_fu_863_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_27_fu_877_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_27_fu_877_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_27_fu_877_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal select_ln272_fu_856_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_894_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_25_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_20_fu_931_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_937_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_975_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln307_fu_1028_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_fu_1013_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_909_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_917_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln300_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln307_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_1045_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln307_fu_1028_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln311_1_fu_1053_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln300_1_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_2_fu_1086_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_3_fu_927_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Repl2_3_fu_1060_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_9_fu_1068_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_10_fu_1099_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_21_fu_1107_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln512_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_373_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_373_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal r_V_23_fu_718_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_24_fu_741_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal r_V_25_fu_811_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_25_fu_811_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_26_fu_765_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_26_fu_765_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_27_fu_877_p10 : STD_LOGIC_VECTOR (125 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_mul_170ns_53nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component fft_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fft_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sin_or_cos_doublebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component sin_or_cos_doublecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component sin_or_cos_doubledEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component sin_or_cos_doubleeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component sin_or_cos_doublefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sin_or_cos_doubleg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component sin_or_cos_doublebkb
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_4_U : component sin_or_cos_doublecud
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_4_address0,
        ce0 => fourth_order_double_4_ce0,
        q0 => fourth_order_double_4_q0);

    fourth_order_double_5_U : component sin_or_cos_doubledEe
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_5_address0,
        ce0 => fourth_order_double_5_ce0,
        q0 => fourth_order_double_5_q0);

    fourth_order_double_6_U : component sin_or_cos_doubleeOg
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_6_address0,
        ce0 => fourth_order_double_6_ce0,
        q0 => fourth_order_double_6_q0);

    fourth_order_double_7_U : component sin_or_cos_doublefYi
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_7_address0,
        ce0 => fourth_order_double_7_ce0,
        q0 => fourth_order_double_7_q0);

    fourth_order_double_s_U : component sin_or_cos_doubleg8j
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_s_address0,
        ce0 => fourth_order_double_s_ce0,
        q0 => fourth_order_double_s_q0);

    grp_scaled_fixed2ieee_fu_268 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_268_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_268_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_268_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_268_ap_ready,
        in_V => result_V_reg_1310,
        prescale => ret_V_reg_1315,
        ap_return => grp_scaled_fixed2ieee_fu_268_ap_return);

    fft_mul_170ns_53nhbi_U8 : component fft_mul_170ns_53nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    fft_mux_83_1_1_1_U9 : component fft_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_30_reg_1183,
        dout => tmp_fu_575_p10);

    fft_mux_164_1_1_1_U10 : component fft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_931_p3,
        dout => tmp_1_fu_937_p18);

    fft_mux_164_1_1_1_U11 : component fft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_931_p3,
        dout => tmp_2_fu_975_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_scaled_fixed2ieee_fu_268_ap_done = ap_const_logic_1))) then 
                    ap_return_preg <= bitcast_ln512_fu_1117_p1;
                end if; 
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_scaled_fixed2ieee_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                B_V_reg_1234 <= B_V_fu_606_p1;
                B_squared_V_reg_1244 <= r_V_20_fu_624_p2(97 downto 49);
                    r_V_5_reg_1239(48 downto 0) <= r_V_5_fu_620_p1(48 downto 0);
                tmp_reg_1228 <= tmp_fu_575_p10;
                xor_ln29_reg_1250 <= xor_ln29_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                B_third_power_V_reg_1280 <= r_V_21_fu_672_p2(97 downto 56);
                fourth_order_double_14_reg_1285 <= fourth_order_double_7_q0;
                ret_V_14_reg_1295 <= ret_V_14_fu_799_p2;
                tmp_4_reg_1290 <= r_V_26_fu_765_p2(59 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Ex_V_reg_1196 <= Ex_V_fu_510_p2;
                Mx_V_reg_1189 <= r_V_18_fu_490_p2(123 downto 61);
                icmp_ln833_2_reg_1214 <= icmp_ln833_2_fu_529_p2;
                icmp_ln833_reg_1208 <= icmp_ln833_fu_524_p2;
                isNeg_reg_1202 <= Ex_V_fu_510_p2(10 downto 10);
                p_Val2_30_reg_1183 <= p_Val2_30_fu_416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                closepath_reg_1140 <= closepath_fu_300_p2;
                p_Result_s_reg_1121 <= p_Val2_s_fu_274_p1(63 downto 63);
                tmp_V_1_reg_1134 <= tmp_V_1_fu_296_p1;
                tmp_V_reg_1127 <= p_Val2_s_fu_274_p1(62 downto 52);
                trunc_ln601_reg_1151 <= trunc_ln601_fu_335_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cos_basis_reg_1305 <= cos_basis_fu_850_p3;
                result_V_reg_1310 <= r_V_27_fu_877_p2(125 downto 63);
                ret_V_reg_1315 <= ret_V_fu_898_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln833_1_reg_1166 <= icmp_ln833_1_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_29_reg_1172 <= grp_fu_373_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ret_V_8_reg_1300 <= ret_V_8_fu_839_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1140 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln_i_reg_1178 <= grp_fu_373_p2(169 downto 167);
            end if;
        end if;
    end process;
    r_V_5_reg_1239(97 downto 49) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_scaled_fixed2ieee_fu_268_ap_done, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_scaled_fixed2ieee_fu_268_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    B_V_fu_606_p1 <= r_V_19_fu_568_p3(56 - 1 downto 0);
    B_fourth_power_V_fu_693_p4 <= r_V_22_fu_687_p2(97 downto 63);
    B_trunc_V_fu_610_p4 <= r_V_19_fu_568_p3(55 downto 7);
    Ex_V_fu_510_p2 <= std_logic_vector(unsigned(select_ln482_fu_409_p3) - unsigned(zext_ln655_fu_506_p1));
    Mx_bits_V_1_fu_426_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_29_reg_1172));
    Mx_zeros_V_fu_482_p1 <= tmp_i_i_fu_474_p3(6 - 1 downto 0);
    add_ln114_1_fu_306_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(tmp_V_fu_286_p4));
    add_ln114_fu_404_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(tmp_V_reg_1127));
    addr_V_fu_312_p3 <= 
        ap_const_lv11_4A when (closepath_fu_300_p2(0) = '1') else 
        add_ln114_1_fu_306_p2;
    and_ln300_1_fu_1076_p2 <= (icmp_ln833_reg_1208 and icmp_ln833_1_reg_1166);
    and_ln300_fu_1020_p2 <= (icmp_ln833_reg_1208 and icmp_ln833_1_reg_1166);
    and_ln307_fu_1024_p2 <= (xor_ln29_reg_1250 and p_Result_s_reg_1121);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_scaled_fixed2ieee_fu_268_ap_done, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_scaled_fixed2ieee_fu_268_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_scaled_fixed2ieee_fu_268_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_scaled_fixed2ieee_fu_268_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_scaled_fixed2ieee_fu_268_ap_done, ap_CS_fsm_state9, bitcast_ln512_fu_1117_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_scaled_fixed2ieee_fu_268_ap_done = ap_const_logic_1))) then 
            ap_return <= bitcast_ln512_fu_1117_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln512_fu_1117_p1 <= p_Result_21_fu_1107_p4;
    closepath_fu_300_p2 <= "1" when (unsigned(tmp_V_fu_286_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    cos_basis_fu_850_p0 <= (0=>do_cos, others=>'-');
    cos_basis_fu_850_p3 <= 
        xor_ln271_fu_845_p2 when (cos_basis_fu_850_p0(0) = '1') else 
        tmp_reg_1228;
    fourth_order_double_4_address0 <= zext_ln498_fu_660_p1(8 - 1 downto 0);

    fourth_order_double_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_4_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_5_address0 <= zext_ln498_fu_660_p1(8 - 1 downto 0);

    fourth_order_double_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_5_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_6_address0 <= zext_ln498_fu_660_p1(8 - 1 downto 0);

    fourth_order_double_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_6_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_7_address0 <= zext_ln498_fu_660_p1(8 - 1 downto 0);

    fourth_order_double_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_7_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_s_address0 <= zext_ln498_fu_660_p1(8 - 1 downto 0);

    fourth_order_double_s_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_s_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_373_p0 <= grp_fu_373_p00(170 - 1 downto 0);
    grp_fu_373_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_11_fu_355_p4),223));
    grp_fu_373_p1 <= grp_fu_373_p10(53 - 1 downto 0);
    grp_fu_373_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_15_fu_339_p3),223));
    grp_scaled_fixed2ieee_fu_268_ap_start <= grp_scaled_fixed2ieee_fu_268_ap_start_reg;
    icmp_ln833_1_fu_379_p2 <= "1" when (tmp_V_1_reg_1134 = ap_const_lv52_0) else "0";
    icmp_ln833_2_fu_529_p2 <= "1" when (tmp_V_reg_1127 = ap_const_lv11_7FF) else "0";
    icmp_ln833_fu_524_p2 <= "1" when (tmp_V_reg_1127 = ap_const_lv11_0) else "0";
        lhs_V_1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_fu_703_p3),64));

    or_ln300_fu_1094_p2 <= (icmp_ln833_2_reg_1214 or and_ln300_fu_1020_p2);
    or_ln311_fu_1040_p2 <= (select_ln271_fu_1013_p3 or icmp_ln833_2_reg_1214);
    p_Repl2_3_fu_1060_p3 <= 
        and_ln307_fu_1024_p2 when (and_ln300_fu_1020_p2(0) = '1') else 
        select_ln311_fu_1045_p3;
    p_Result_15_fu_339_p3 <= (ap_const_lv1_1 & tmp_V_1_reg_1134);
    p_Result_16_fu_448_p3 <= (p_Result_i_i_39_fu_438_p4 & ap_const_lv1_1);
    p_Result_17_fu_466_p3 <= (ap_const_lv2_3 & p_Result_8_fu_456_p4);
    p_Result_18_fu_652_p3 <= (sin_basis_fu_646_p2 & p_Result_i_fu_596_p4);
    p_Result_19_fu_909_p3 <= p_Val2_25_fu_905_p1(63 downto 63);
    p_Result_20_fu_931_p3 <= (p_Result_s_reg_1121 & p_Val2_30_reg_1183);
    p_Result_21_fu_1107_p4 <= ((p_Repl2_3_fu_1060_p3 & ret_V_9_fu_1068_p3) & ret_V_10_fu_1099_p3);
    
    p_Result_8_fu_456_p4_proc : process(p_Result_16_fu_448_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_8_fu_456_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_16_fu_448_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_8_fu_456_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_8_fu_456_p4_i) := p_Result_16_fu_448_p3(62-1-p_Result_8_fu_456_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_8_fu_456_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_i_fu_596_p4 <= r_V_19_fu_568_p3(62 downto 56);
    p_Result_i_i_39_fu_438_p4 <= p_Val2_7_fu_431_p3(123 downto 63);
    p_Result_i_i_fu_320_p4 <= addr_V_fu_312_p3(10 downto 7);
    p_Val2_25_fu_905_p1 <= grp_scaled_fixed2ieee_fu_268_ap_return;
    p_Val2_30_fu_416_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1140(0) = '1') else 
        trunc_ln_i_reg_1178;
    p_Val2_7_fu_431_p3 <= 
        Mx_bits_V_1_fu_426_p2 when (trunc_ln745_fu_422_p1(0) = '1') else 
        p_Val2_29_reg_1172;
    p_Val2_s_fu_274_p1 <= t_in;
    r_V_17_fu_349_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_V_q0),to_integer(unsigned('0' & zext_ln744_fu_346_p1(31-1 downto 0)))));
    r_V_18_fu_490_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_7_fu_431_p3),to_integer(unsigned('0' & zext_ln1253_fu_486_p1(31-1 downto 0)))));
    r_V_19_fu_568_p3 <= 
        r_V_fu_558_p2 when (isNeg_reg_1202(0) = '1') else 
        r_V_3_fu_563_p2;
    r_V_20_fu_624_p0 <= r_V_5_fu_620_p1(49 - 1 downto 0);
    r_V_20_fu_624_p1 <= r_V_5_fu_620_p1(49 - 1 downto 0);
    r_V_20_fu_624_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_20_fu_624_p0) * unsigned(r_V_20_fu_624_p1), 98));
    r_V_21_fu_672_p0 <= r_V_5_reg_1239(49 - 1 downto 0);
    r_V_21_fu_672_p1 <= r_V_8_fu_669_p1(49 - 1 downto 0);
    r_V_21_fu_672_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_21_fu_672_p0) * unsigned(r_V_21_fu_672_p1), 98));
    r_V_22_fu_687_p0 <= r_V_8_fu_669_p1(49 - 1 downto 0);
    r_V_22_fu_687_p1 <= r_V_8_fu_669_p1(49 - 1 downto 0);
    r_V_22_fu_687_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_22_fu_687_p0) * unsigned(r_V_22_fu_687_p1), 98));
    r_V_23_fu_718_p0 <= r_V_23_fu_718_p00(56 - 1 downto 0);
    r_V_23_fu_718_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1234),108));
    r_V_23_fu_718_p1 <= fourth_order_double_5_q0;
    r_V_23_fu_718_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_23_fu_718_p0) * signed(r_V_23_fu_718_p1))), 108));
    r_V_24_fu_741_p0 <= r_V_24_fu_741_p00(49 - 1 downto 0);
    r_V_24_fu_741_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1244),93));
    r_V_24_fu_741_p1 <= fourth_order_double_6_q0;
    r_V_24_fu_741_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_24_fu_741_p0) * signed(r_V_24_fu_741_p1))), 93));
    r_V_25_fu_811_p0 <= r_V_25_fu_811_p00(42 - 1 downto 0);
    r_V_25_fu_811_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_third_power_V_reg_1280),75));
    r_V_25_fu_811_p1 <= r_V_25_fu_811_p10(33 - 1 downto 0);
    r_V_25_fu_811_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_14_reg_1285),75));
    r_V_25_fu_811_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_25_fu_811_p0) * unsigned(r_V_25_fu_811_p1), 75));
    r_V_26_fu_765_p0 <= r_V_26_fu_765_p00(35 - 1 downto 0);
    r_V_26_fu_765_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_fourth_power_V_fu_693_p4),60));
    r_V_26_fu_765_p1 <= r_V_26_fu_765_p10(25 - 1 downto 0);
    r_V_26_fu_765_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_s_q0),60));
    r_V_26_fu_765_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_26_fu_765_p0) * unsigned(r_V_26_fu_765_p1), 60));
    r_V_27_fu_877_p0 <= ret_V_8_reg_1300;
    r_V_27_fu_877_p1 <= r_V_27_fu_877_p10(63 - 1 downto 0);
    r_V_27_fu_877_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln272_1_fu_863_p3),126));
    r_V_27_fu_877_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_27_fu_877_p0) * signed('0' &r_V_27_fu_877_p1))), 126));
    r_V_3_fu_563_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1189),to_integer(unsigned('0' & zext_ln1287_fu_554_p1(31-1 downto 0)))));
    r_V_5_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_fu_610_p4),98));
    r_V_8_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1244),98));
    r_V_fu_558_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1189),to_integer(unsigned('0' & zext_ln1287_fu_554_p1(31-1 downto 0)))));
    ref_4oPi_table_256_V_address0 <= zext_ln635_fu_330_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1099_p3 <= 
        select_ln300_2_fu_1086_p3 when (or_ln300_fu_1094_p2(0) = '1') else 
        tmp_V_3_fu_927_p1;
    ret_V_11_fu_355_p4 <= r_V_17_fu_349_p2(255 downto 86);
    ret_V_13_fu_789_p2 <= std_logic_vector(signed(lhs_V_1_fu_781_p1) + signed(rhs_V_2_fu_785_p1));
    ret_V_14_fu_799_p2 <= std_logic_vector(unsigned(ret_V_13_fu_789_p2) + unsigned(sext_ln657_fu_795_p1));
    ret_V_15_fu_831_p2 <= std_logic_vector(unsigned(ret_V_14_reg_1295) + unsigned(zext_ln657_fu_827_p1));
    ret_V_8_fu_839_p2 <= std_logic_vector(unsigned(ret_V_15_fu_831_p2) + unsigned(zext_ln657_1_fu_836_p1));
    ret_V_9_fu_1068_p3 <= 
        select_ln307_fu_1028_p3 when (and_ln300_fu_1020_p2(0) = '1') else 
        select_ln311_1_fu_1053_p3;
    ret_V_fu_898_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_fu_894_p1));
        rhs_V_2_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_724_p4),64));

        rhs_V_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln272_fu_856_p3),12));

    select_ln271_fu_1013_p3 <= 
        tmp_1_fu_937_p18 when (cos_basis_reg_1305(0) = '1') else 
        tmp_2_fu_975_p18;
    select_ln272_1_fu_863_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_fu_850_p3(0) = '1') else 
        Mx_V_reg_1189;
    select_ln272_fu_856_p3 <= 
        ap_const_lv11_0 when (cos_basis_fu_850_p3(0) = '1') else 
        Ex_V_reg_1196;
    select_ln300_2_fu_1086_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (xor_ln300_fu_1080_p2(0) = '1') else 
        ap_const_lv52_0;
    select_ln307_fu_1028_p0 <= (0=>do_cos, others=>'-');
    select_ln307_fu_1028_p3 <= 
        ap_const_lv11_3FF when (select_ln307_fu_1028_p0(0) = '1') else 
        ap_const_lv11_0;
    select_ln311_1_fu_1053_p3 <= 
        ap_const_lv11_7FF when (icmp_ln833_2_reg_1214(0) = '1') else 
        tmp_V_2_fu_917_p4;
    select_ln311_fu_1045_p3 <= 
        xor_ln311_fu_1035_p2 when (or_ln311_fu_1040_p2(0) = '1') else 
        p_Result_19_fu_909_p3;
    select_ln482_fu_409_p3 <= 
        add_ln114_fu_404_p2 when (closepath_reg_1140(0) = '1') else 
        ap_const_lv11_0;
        sext_ln1311_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_543_p3),32));

        sext_ln1334_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_reg_1196),12));

        sext_ln657_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln662_1_fu_747_p4),64));

    sin_basis_fu_646_p2 <= (xor_ln29_fu_640_p2 xor tmp_fu_575_p10);
    sub_ln1311_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1334_fu_534_p1));
    t1_V_fu_703_p3 <= (fourth_order_double_4_q0 & ap_const_lv4_0);
    tmp_3_fu_817_p4 <= r_V_25_fu_811_p2(74 downto 38);
    tmp_V_1_fu_296_p1 <= p_Val2_s_fu_274_p1(52 - 1 downto 0);
    tmp_V_2_fu_917_p4 <= p_Val2_25_fu_905_p1(62 downto 52);
    tmp_V_3_fu_927_p1 <= p_Val2_25_fu_905_p1(52 - 1 downto 0);
    tmp_V_fu_286_p4 <= p_Val2_s_fu_274_p1(62 downto 52);
    
    tmp_i_i_fu_474_p3_proc : process(p_Result_17_fu_466_p3)
    begin
        tmp_i_i_fu_474_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_17_fu_466_p3(i) = '1' then
                tmp_i_i_fu_474_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln1_fu_724_p4 <= r_V_23_fu_718_p2(107 downto 52);
    trunc_ln601_fu_335_p1 <= addr_V_fu_312_p3(7 - 1 downto 0);
    trunc_ln662_1_fu_747_p4 <= r_V_24_fu_741_p2(92 downto 45);
    trunc_ln745_fu_422_p1 <= p_Val2_30_fu_416_p3(1 - 1 downto 0);
    ush_fu_543_p3 <= 
        sub_ln1311_fu_537_p2 when (isNeg_reg_1202(0) = '1') else 
        sext_ln1334_fu_534_p1;
    xor_ln271_fu_845_p2 <= (tmp_reg_1228 xor ap_const_lv1_1);
    xor_ln29_fu_640_p0 <= (0=>do_cos, others=>'-');
    xor_ln29_fu_640_p2 <= (xor_ln29_fu_640_p0 xor ap_const_lv1_1);
    xor_ln300_fu_1080_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1076_p2);
    xor_ln311_fu_1035_p2 <= (icmp_ln833_2_reg_1214 xor ap_const_lv1_1);
    zext_ln1253_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_482_p1),124));
    zext_ln1287_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_fu_550_p1),63));
    zext_ln498_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_652_p3),64));
    zext_ln635_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_320_p4),64));
    zext_ln655_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_482_p1),11));
    zext_ln657_1_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1290),64));
    zext_ln657_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_817_p4),64));
    zext_ln744_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln601_reg_1151),256));
end behav;
