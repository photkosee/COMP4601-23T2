// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fft.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fft::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fft::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<58> fft::ap_ST_fsm_state1 = "1";
const sc_lv<58> fft::ap_ST_fsm_state2 = "10";
const sc_lv<58> fft::ap_ST_fsm_state3 = "100";
const sc_lv<58> fft::ap_ST_fsm_state4 = "1000";
const sc_lv<58> fft::ap_ST_fsm_state5 = "10000";
const sc_lv<58> fft::ap_ST_fsm_state6 = "100000";
const sc_lv<58> fft::ap_ST_fsm_state7 = "1000000";
const sc_lv<58> fft::ap_ST_fsm_state8 = "10000000";
const sc_lv<58> fft::ap_ST_fsm_state9 = "100000000";
const sc_lv<58> fft::ap_ST_fsm_state10 = "1000000000";
const sc_lv<58> fft::ap_ST_fsm_state11 = "10000000000";
const sc_lv<58> fft::ap_ST_fsm_state12 = "100000000000";
const sc_lv<58> fft::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<58> fft::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<58> fft::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<58> fft::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<58> fft::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> fft::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fft::ap_const_lv32_26 = "100110";
const sc_lv<32> fft::ap_const_lv32_2D = "101101";
const sc_lv<32> fft::ap_const_lv32_34 = "110100";
const sc_lv<32> fft::ap_const_lv32_38 = "111000";
const sc_lv<32> fft::ap_const_lv32_1 = "1";
const sc_lv<1> fft::ap_const_lv1_0 = "0";
const sc_lv<32> fft::ap_const_lv32_2 = "10";
const sc_lv<32> fft::ap_const_lv32_4 = "100";
const sc_lv<32> fft::ap_const_lv32_7 = "111";
const sc_lv<32> fft::ap_const_lv32_1D = "11101";
const sc_lv<32> fft::ap_const_lv32_1F = "11111";
const sc_lv<32> fft::ap_const_lv32_20 = "100000";
const sc_lv<1> fft::ap_const_lv1_1 = "1";
const sc_lv<32> fft::ap_const_lv32_21 = "100001";
const sc_lv<32> fft::ap_const_lv32_22 = "100010";
const bool fft::ap_const_boolean_0 = false;
const sc_lv<32> fft::ap_const_lv32_23 = "100011";
const sc_lv<32> fft::ap_const_lv32_24 = "100100";
const sc_lv<32> fft::ap_const_lv32_25 = "100101";
const sc_lv<32> fft::ap_const_lv32_29 = "101001";
const sc_lv<32> fft::ap_const_lv32_31 = "110001";
const sc_lv<11> fft::ap_const_lv11_0 = "00000000000";
const sc_lv<32> fft::ap_const_lv32_3 = "11";
const sc_lv<4> fft::ap_const_lv4_1 = "1";
const sc_lv<10> fft::ap_const_lv10_0 = "0000000000";
const sc_lv<32> fft::ap_const_lv32_39 = "111001";
const sc_lv<32> fft::ap_const_lv32_2C = "101100";
const sc_lv<32> fft::ap_const_lv32_32 = "110010";
const sc_lv<32> fft::ap_const_lv32_33 = "110011";
const sc_lv<32> fft::ap_const_lv32_2A = "101010";
const sc_lv<32> fft::ap_const_lv32_2E = "101110";
const sc_lv<32> fft::ap_const_lv32_35 = "110101";
const sc_lv<32> fft::ap_const_lv32_27 = "100111";
const sc_lv<32> fft::ap_const_lv32_1E = "11110";
const sc_lv<64> fft::ap_const_lv64_C01921FB5444261E = "1100000000011001001000011111101101010100010001000010011000011110";
const sc_lv<32> fft::ap_const_lv32_8 = "1000";
const sc_lv<11> fft::ap_const_lv11_400 = "10000000000";
const sc_lv<11> fft::ap_const_lv11_1 = "1";
const sc_lv<4> fft::ap_const_lv4_B = "1011";
const sc_lv<32> fft::ap_const_lv32_A = "1010";
const sc_lv<10> fft::ap_const_lv10_1 = "1";
const sc_lv<22> fft::ap_const_lv22_1 = "1";
const sc_lv<2> fft::ap_const_lv2_0 = "00";
const sc_lv<2> fft::ap_const_lv2_1 = "1";
const sc_lv<32> fft::ap_const_lv32_2B = "101011";
const sc_lv<32> fft::ap_const_lv32_2F = "101111";
const sc_lv<32> fft::ap_const_lv32_30 = "110000";
const sc_lv<32> fft::ap_const_lv32_36 = "110110";
const sc_lv<32> fft::ap_const_lv32_37 = "110111";
const bool fft::ap_const_boolean_1 = true;

fft::fft(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sin_or_cos_double_s_fu_218 = new sin_or_cos_double_s("grp_sin_or_cos_double_s_fu_218");
    grp_sin_or_cos_double_s_fu_218->ap_clk(ap_clk);
    grp_sin_or_cos_double_s_fu_218->ap_rst(ap_rst);
    grp_sin_or_cos_double_s_fu_218->ap_start(grp_sin_or_cos_double_s_fu_218_ap_start);
    grp_sin_or_cos_double_s_fu_218->ap_done(grp_sin_or_cos_double_s_fu_218_ap_done);
    grp_sin_or_cos_double_s_fu_218->ap_idle(grp_sin_or_cos_double_s_fu_218_ap_idle);
    grp_sin_or_cos_double_s_fu_218->ap_ready(grp_sin_or_cos_double_s_fu_218_ap_ready);
    grp_sin_or_cos_double_s_fu_218->t_in(x_assign_reg_545);
    grp_sin_or_cos_double_s_fu_218->do_cos(grp_sin_or_cos_double_s_fu_218_do_cos);
    grp_sin_or_cos_double_s_fu_218->ap_return(grp_sin_or_cos_double_s_fu_218_ap_return);
    grp_sin_or_cos_double_s_fu_237 = new sin_or_cos_double_s("grp_sin_or_cos_double_s_fu_237");
    grp_sin_or_cos_double_s_fu_237->ap_clk(ap_clk);
    grp_sin_or_cos_double_s_fu_237->ap_rst(ap_rst);
    grp_sin_or_cos_double_s_fu_237->ap_start(grp_sin_or_cos_double_s_fu_237_ap_start);
    grp_sin_or_cos_double_s_fu_237->ap_done(grp_sin_or_cos_double_s_fu_237_ap_done);
    grp_sin_or_cos_double_s_fu_237->ap_idle(grp_sin_or_cos_double_s_fu_237_ap_idle);
    grp_sin_or_cos_double_s_fu_237->ap_ready(grp_sin_or_cos_double_s_fu_237_ap_ready);
    grp_sin_or_cos_double_s_fu_237->t_in(x_assign_reg_545);
    grp_sin_or_cos_double_s_fu_237->do_cos(grp_sin_or_cos_double_s_fu_237_do_cos);
    grp_sin_or_cos_double_s_fu_237->ap_return(grp_sin_or_cos_double_s_fu_237_ap_return);
    reversed_reverse_bits_fu_256 = new reverse_bits("reversed_reverse_bits_fu_256");
    reversed_reverse_bits_fu_256->ap_ready(reversed_reverse_bits_fu_256_ap_ready);
    reversed_reverse_bits_fu_256->input_r(i_0_i_reg_162);
    reversed_reverse_bits_fu_256->ap_return(reversed_reverse_bits_fu_256_ap_return);
    fft_faddfsub_32nsibs_U23 = new fft_faddfsub_32nsibs<1,4,32,32,32>("fft_faddfsub_32nsibs_U23");
    fft_faddfsub_32nsibs_U23->clk(ap_clk);
    fft_faddfsub_32nsibs_U23->reset(ap_rst);
    fft_faddfsub_32nsibs_U23->din0(grp_fu_262_p0);
    fft_faddfsub_32nsibs_U23->din1(grp_fu_262_p1);
    fft_faddfsub_32nsibs_U23->opcode(grp_fu_262_opcode);
    fft_faddfsub_32nsibs_U23->ce(grp_fu_262_ce);
    fft_faddfsub_32nsibs_U23->dout(grp_fu_262_p2);
    fft_faddfsub_32nsibs_U24 = new fft_faddfsub_32nsibs<1,4,32,32,32>("fft_faddfsub_32nsibs_U24");
    fft_faddfsub_32nsibs_U24->clk(ap_clk);
    fft_faddfsub_32nsibs_U24->reset(ap_rst);
    fft_faddfsub_32nsibs_U24->din0(grp_fu_267_p0);
    fft_faddfsub_32nsibs_U24->din1(grp_fu_267_p1);
    fft_faddfsub_32nsibs_U24->opcode(grp_fu_267_opcode);
    fft_faddfsub_32nsibs_U24->ce(ap_var_for_const0);
    fft_faddfsub_32nsibs_U24->dout(grp_fu_267_p2);
    fft_fmul_32ns_32njbC_U25 = new fft_fmul_32ns_32njbC<1,3,32,32,32>("fft_fmul_32ns_32njbC_U25");
    fft_fmul_32ns_32njbC_U25->clk(ap_clk);
    fft_fmul_32ns_32njbC_U25->reset(ap_rst);
    fft_fmul_32ns_32njbC_U25->din0(reg_307);
    fft_fmul_32ns_32njbC_U25->din1(c_reg_566);
    fft_fmul_32ns_32njbC_U25->ce(ap_var_for_const0);
    fft_fmul_32ns_32njbC_U25->dout(grp_fu_271_p2);
    fft_fmul_32ns_32njbC_U26 = new fft_fmul_32ns_32njbC<1,3,32,32,32>("fft_fmul_32ns_32njbC_U26");
    fft_fmul_32ns_32njbC_U26->clk(ap_clk);
    fft_fmul_32ns_32njbC_U26->reset(ap_rst);
    fft_fmul_32ns_32njbC_U26->din0(reg_314);
    fft_fmul_32ns_32njbC_U26->din1(s_reg_572);
    fft_fmul_32ns_32njbC_U26->ce(ap_var_for_const0);
    fft_fmul_32ns_32njbC_U26->dout(grp_fu_275_p2);
    fft_fmul_32ns_32njbC_U27 = new fft_fmul_32ns_32njbC<1,3,32,32,32>("fft_fmul_32ns_32njbC_U27");
    fft_fmul_32ns_32njbC_U27->clk(ap_clk);
    fft_fmul_32ns_32njbC_U27->reset(ap_rst);
    fft_fmul_32ns_32njbC_U27->din0(reg_314);
    fft_fmul_32ns_32njbC_U27->din1(c_reg_566);
    fft_fmul_32ns_32njbC_U27->ce(ap_var_for_const0);
    fft_fmul_32ns_32njbC_U27->dout(grp_fu_279_p2);
    fft_fmul_32ns_32njbC_U28 = new fft_fmul_32ns_32njbC<1,3,32,32,32>("fft_fmul_32ns_32njbC_U28");
    fft_fmul_32ns_32njbC_U28->clk(ap_clk);
    fft_fmul_32ns_32njbC_U28->reset(ap_rst);
    fft_fmul_32ns_32njbC_U28->din0(reg_307);
    fft_fmul_32ns_32njbC_U28->din1(s_reg_572);
    fft_fmul_32ns_32njbC_U28->ce(ap_var_for_const0);
    fft_fmul_32ns_32njbC_U28->dout(grp_fu_283_p2);
    fft_fptrunc_64ns_kbM_U29 = new fft_fptrunc_64ns_kbM<1,2,64,32>("fft_fptrunc_64ns_kbM_U29");
    fft_fptrunc_64ns_kbM_U29->clk(ap_clk);
    fft_fptrunc_64ns_kbM_U29->reset(ap_rst);
    fft_fptrunc_64ns_kbM_U29->din0(grp_fu_287_p0);
    fft_fptrunc_64ns_kbM_U29->ce(ap_var_for_const0);
    fft_fptrunc_64ns_kbM_U29->dout(grp_fu_287_p1);
    fft_fptrunc_64ns_kbM_U30 = new fft_fptrunc_64ns_kbM<1,2,64,32>("fft_fptrunc_64ns_kbM_U30");
    fft_fptrunc_64ns_kbM_U30->clk(ap_clk);
    fft_fptrunc_64ns_kbM_U30->reset(ap_rst);
    fft_fptrunc_64ns_kbM_U30->din0(tmp_i_i9_reg_556);
    fft_fptrunc_64ns_kbM_U30->ce(ap_var_for_const0);
    fft_fptrunc_64ns_kbM_U30->dout(grp_fu_290_p1);
    fft_fpext_32ns_64lbW_U31 = new fft_fpext_32ns_64lbW<1,2,32,64>("fft_fpext_32ns_64lbW_U31");
    fft_fpext_32ns_64lbW_U31->clk(ap_clk);
    fft_fpext_32ns_64lbW_U31->reset(ap_rst);
    fft_fpext_32ns_64lbW_U31->din0(a_0_reg_197);
    fft_fpext_32ns_64lbW_U31->ce(ap_var_for_const0);
    fft_fpext_32ns_64lbW_U31->dout(grp_fu_293_p1);
    fft_ddiv_64ns_64nmb6_U32 = new fft_ddiv_64ns_64nmb6<1,22,64,64,64>("fft_ddiv_64ns_64nmb6_U32");
    fft_ddiv_64ns_64nmb6_U32->clk(ap_clk);
    fft_ddiv_64ns_64nmb6_U32->reset(ap_rst);
    fft_ddiv_64ns_64nmb6_U32->din0(ap_var_for_const1);
    fft_ddiv_64ns_64nmb6_U32->din1(tmp_reg_507);
    fft_ddiv_64ns_64nmb6_U32->ce(ap_var_for_const0);
    fft_ddiv_64ns_64nmb6_U32->dout(grp_fu_299_p2);
    fft_sitodp_32ns_6ncg_U33 = new fft_sitodp_32ns_6ncg<1,4,32,64>("fft_sitodp_32ns_6ncg_U33");
    fft_sitodp_32ns_6ncg_U33->clk(ap_clk);
    fft_sitodp_32ns_6ncg_U33->reset(ap_rst);
    fft_sitodp_32ns_6ncg_U33->din0(grp_fu_304_p0);
    fft_sitodp_32ns_6ncg_U33->ce(ap_var_for_const0);
    fft_sitodp_32ns_6ncg_U33->dout(grp_fu_304_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DFTpts_fu_377_p2);
    sensitive << ( zext_ln50_fu_367_p1 );

    SC_METHOD(thread_X_I_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( X_I_addr_3_reg_477 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( X_I_addr_reg_586 );
    sensitive << ( X_I_addr_1_reg_596 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( zext_ln26_fu_355_p1 );
    sensitive << ( zext_ln25_fu_361_p1 );
    sensitive << ( sext_ln65_fu_443_p1 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_X_I_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_X_I_d0);
    sensitive << ( X_I_q0 );
    sensitive << ( reg_327 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_6_reg_631 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_X_I_we0);
    sensitive << ( icmp_ln23_reg_468 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_X_R_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( X_R_addr_3_reg_472 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( X_R_addr_reg_581 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( X_R_addr_1_reg_591 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( zext_ln26_fu_355_p1 );
    sensitive << ( zext_ln25_fu_361_p1 );
    sensitive << ( sext_ln65_fu_443_p1 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_X_R_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_X_R_d0);
    sensitive << ( X_R_q0 );
    sensitive << ( reg_321 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_reg_626 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_X_R_we0);
    sensitive << ( icmp_ln23_reg_468 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state35_on_subcall_done);
    sensitive << ( grp_sin_or_cos_double_s_fu_218_ap_done );
    sensitive << ( grp_sin_or_cos_double_s_fu_237_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln50_fu_371_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln50_fu_371_p2 );

    SC_METHOD(thread_grp_fu_262_ce);
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_block_state35_on_subcall_done );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state56 );

    SC_METHOD(thread_grp_fu_262_opcode);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( icmp_ln57_fu_405_p2 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_262_p0);
    sensitive << ( reg_307 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( tmp_7_reg_606 );
    sensitive << ( a_0_reg_197 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_262_p1);
    sensitive << ( reg_321 );
    sensitive << ( e_reg_522 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( tmp_8_reg_611 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_267_opcode);
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_267_p0);
    sensitive << ( reg_314 );
    sensitive << ( tmp_9_reg_616 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_267_p1);
    sensitive << ( reg_327 );
    sensitive << ( tmp_s_reg_621 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_grp_fu_287_p0);
    sensitive << ( tmp_2_reg_512 );
    sensitive << ( tmp_i_i_reg_551 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_grp_fu_304_p0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( DFTpts_fu_377_p2 );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_218_ap_start);
    sensitive << ( grp_sin_or_cos_double_s_fu_218_ap_start_reg );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_218_do_cos);
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_237_ap_start);
    sensitive << ( grp_sin_or_cos_double_s_fu_237_ap_start_reg );

    SC_METHOD(thread_grp_sin_or_cos_double_s_fu_237_do_cos);
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_i_3_fu_339_p2);
    sensitive << ( i_0_i_reg_162 );

    SC_METHOD(thread_i_4_fu_455_p2);
    sensitive << ( zext_ln51_reg_495 );
    sensitive << ( i_0_reg_209 );

    SC_METHOD(thread_i_lower_fu_438_p2);
    sensitive << ( numBF_reg_517 );
    sensitive << ( i_0_reg_209 );

    SC_METHOD(thread_icmp_ln21_fu_333_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_reg_162 );

    SC_METHOD(thread_icmp_ln23_fu_349_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln21_fu_333_p2 );
    sensitive << ( i_0_i_reg_162 );
    sensitive << ( zext_ln22_fu_345_p1 );

    SC_METHOD(thread_icmp_ln50_fu_371_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( stage_0_reg_174 );

    SC_METHOD(thread_icmp_ln57_fu_405_p2);
    sensitive << ( trunc_ln_reg_501 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( i_reg_186 );

    SC_METHOD(thread_icmp_ln63_fu_432_p2);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( tmp_12_fu_422_p4 );

    SC_METHOD(thread_j_fu_410_p2);
    sensitive << ( i_reg_186 );

    SC_METHOD(thread_numBF_fu_398_p1);
    sensitive << ( trunc_ln_reg_501 );

    SC_METHOD(thread_sext_ln65_fu_443_p1);
    sensitive << ( i_lower_fu_438_p2 );

    SC_METHOD(thread_sext_ln67_fu_449_p1);
    sensitive << ( i_0_reg_209 );

    SC_METHOD(thread_stage_fu_416_p2);
    sensitive << ( stage_0_reg_174 );

    SC_METHOD(thread_tmp_12_fu_422_p4);
    sensitive << ( i_0_reg_209 );

    SC_METHOD(thread_zext_ln22_fu_345_p1);
    sensitive << ( reversed_reverse_bits_fu_256_ap_return );

    SC_METHOD(thread_zext_ln25_fu_361_p1);
    sensitive << ( i_0_i_reg_162 );

    SC_METHOD(thread_zext_ln26_fu_355_p1);
    sensitive << ( reversed_reverse_bits_fu_256_ap_return );

    SC_METHOD(thread_zext_ln50_fu_367_p1);
    sensitive << ( stage_0_reg_174 );

    SC_METHOD(thread_zext_ln51_fu_383_p1);
    sensitive << ( DFTpts_fu_377_p2 );

    SC_METHOD(thread_zext_ln57_fu_401_p1);
    sensitive << ( i_reg_186 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln23_fu_349_p2 );
    sensitive << ( icmp_ln21_fu_333_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln50_fu_371_p2 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( icmp_ln57_fu_405_p2 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_block_state35_on_subcall_done );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( icmp_ln63_fu_432_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000001";
    grp_sin_or_cos_double_s_fu_218_ap_start_reg = SC_LOGIC_0;
    grp_sin_or_cos_double_s_fu_237_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fft_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X_R_address0, "(port)X_R_address0");
    sc_trace(mVcdFile, X_R_ce0, "(port)X_R_ce0");
    sc_trace(mVcdFile, X_R_we0, "(port)X_R_we0");
    sc_trace(mVcdFile, X_R_d0, "(port)X_R_d0");
    sc_trace(mVcdFile, X_R_q0, "(port)X_R_q0");
    sc_trace(mVcdFile, X_I_address0, "(port)X_I_address0");
    sc_trace(mVcdFile, X_I_ce0, "(port)X_I_ce0");
    sc_trace(mVcdFile, X_I_we0, "(port)X_I_we0");
    sc_trace(mVcdFile, X_I_d0, "(port)X_I_d0");
    sc_trace(mVcdFile, X_I_q0, "(port)X_I_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_307, "reg_307");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, reg_314, "reg_314");
    sc_trace(mVcdFile, grp_fu_262_p2, "grp_fu_262_p2");
    sc_trace(mVcdFile, reg_321, "reg_321");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, grp_fu_267_p2, "grp_fu_267_p2");
    sc_trace(mVcdFile, reg_327, "reg_327");
    sc_trace(mVcdFile, i_3_fu_339_p2, "i_3_fu_339_p2");
    sc_trace(mVcdFile, i_3_reg_463, "i_3_reg_463");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln23_fu_349_p2, "icmp_ln23_fu_349_p2");
    sc_trace(mVcdFile, icmp_ln23_reg_468, "icmp_ln23_reg_468");
    sc_trace(mVcdFile, icmp_ln21_fu_333_p2, "icmp_ln21_fu_333_p2");
    sc_trace(mVcdFile, X_R_addr_3_reg_472, "X_R_addr_3_reg_472");
    sc_trace(mVcdFile, X_I_addr_3_reg_477, "X_I_addr_3_reg_477");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln51_fu_383_p1, "zext_ln51_fu_383_p1");
    sc_trace(mVcdFile, zext_ln51_reg_495, "zext_ln51_reg_495");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln50_fu_371_p2, "icmp_ln50_fu_371_p2");
    sc_trace(mVcdFile, trunc_ln_reg_501, "trunc_ln_reg_501");
    sc_trace(mVcdFile, grp_fu_304_p1, "grp_fu_304_p1");
    sc_trace(mVcdFile, tmp_reg_507, "tmp_reg_507");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_299_p2, "grp_fu_299_p2");
    sc_trace(mVcdFile, tmp_2_reg_512, "tmp_2_reg_512");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, numBF_fu_398_p1, "numBF_fu_398_p1");
    sc_trace(mVcdFile, numBF_reg_517, "numBF_reg_517");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, grp_fu_287_p1, "grp_fu_287_p1");
    sc_trace(mVcdFile, e_reg_522, "e_reg_522");
    sc_trace(mVcdFile, zext_ln57_fu_401_p1, "zext_ln57_fu_401_p1");
    sc_trace(mVcdFile, zext_ln57_reg_527, "zext_ln57_reg_527");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, j_fu_410_p2, "j_fu_410_p2");
    sc_trace(mVcdFile, j_reg_535, "j_reg_535");
    sc_trace(mVcdFile, stage_fu_416_p2, "stage_fu_416_p2");
    sc_trace(mVcdFile, icmp_ln57_fu_405_p2, "icmp_ln57_fu_405_p2");
    sc_trace(mVcdFile, grp_fu_293_p1, "grp_fu_293_p1");
    sc_trace(mVcdFile, x_assign_reg_545, "x_assign_reg_545");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_218_ap_return, "grp_sin_or_cos_double_s_fu_218_ap_return");
    sc_trace(mVcdFile, tmp_i_i_reg_551, "tmp_i_i_reg_551");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_218_ap_ready, "grp_sin_or_cos_double_s_fu_218_ap_ready");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_218_ap_done, "grp_sin_or_cos_double_s_fu_218_ap_done");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_237_ap_ready, "grp_sin_or_cos_double_s_fu_237_ap_ready");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_237_ap_done, "grp_sin_or_cos_double_s_fu_237_ap_done");
    sc_trace(mVcdFile, ap_block_state35_on_subcall_done, "ap_block_state35_on_subcall_done");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_237_ap_return, "grp_sin_or_cos_double_s_fu_237_ap_return");
    sc_trace(mVcdFile, tmp_i_i9_reg_556, "tmp_i_i9_reg_556");
    sc_trace(mVcdFile, a_reg_561, "a_reg_561");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, c_reg_566, "c_reg_566");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, grp_fu_290_p1, "grp_fu_290_p1");
    sc_trace(mVcdFile, s_reg_572, "s_reg_572");
    sc_trace(mVcdFile, X_R_addr_reg_581, "X_R_addr_reg_581");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, icmp_ln63_fu_432_p2, "icmp_ln63_fu_432_p2");
    sc_trace(mVcdFile, X_I_addr_reg_586, "X_I_addr_reg_586");
    sc_trace(mVcdFile, X_R_addr_1_reg_591, "X_R_addr_1_reg_591");
    sc_trace(mVcdFile, X_I_addr_1_reg_596, "X_I_addr_1_reg_596");
    sc_trace(mVcdFile, i_4_fu_455_p2, "i_4_fu_455_p2");
    sc_trace(mVcdFile, i_4_reg_601, "i_4_reg_601");
    sc_trace(mVcdFile, grp_fu_271_p2, "grp_fu_271_p2");
    sc_trace(mVcdFile, tmp_7_reg_606, "tmp_7_reg_606");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, grp_fu_275_p2, "grp_fu_275_p2");
    sc_trace(mVcdFile, tmp_8_reg_611, "tmp_8_reg_611");
    sc_trace(mVcdFile, grp_fu_279_p2, "grp_fu_279_p2");
    sc_trace(mVcdFile, tmp_9_reg_616, "tmp_9_reg_616");
    sc_trace(mVcdFile, grp_fu_283_p2, "grp_fu_283_p2");
    sc_trace(mVcdFile, tmp_s_reg_621, "tmp_s_reg_621");
    sc_trace(mVcdFile, tmp_1_reg_626, "tmp_1_reg_626");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, tmp_6_reg_631, "tmp_6_reg_631");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_218_ap_start, "grp_sin_or_cos_double_s_fu_218_ap_start");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_218_ap_idle, "grp_sin_or_cos_double_s_fu_218_ap_idle");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_218_do_cos, "grp_sin_or_cos_double_s_fu_218_do_cos");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_237_ap_start, "grp_sin_or_cos_double_s_fu_237_ap_start");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_237_ap_idle, "grp_sin_or_cos_double_s_fu_237_ap_idle");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_237_do_cos, "grp_sin_or_cos_double_s_fu_237_do_cos");
    sc_trace(mVcdFile, reversed_reverse_bits_fu_256_ap_ready, "reversed_reverse_bits_fu_256_ap_ready");
    sc_trace(mVcdFile, reversed_reverse_bits_fu_256_ap_return, "reversed_reverse_bits_fu_256_ap_return");
    sc_trace(mVcdFile, i_0_i_reg_162, "i_0_i_reg_162");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, stage_0_reg_174, "stage_0_reg_174");
    sc_trace(mVcdFile, i_reg_186, "i_reg_186");
    sc_trace(mVcdFile, a_0_reg_197, "a_0_reg_197");
    sc_trace(mVcdFile, i_0_reg_209, "i_0_reg_209");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_218_ap_start_reg, "grp_sin_or_cos_double_s_fu_218_ap_start_reg");
    sc_trace(mVcdFile, grp_sin_or_cos_double_s_fu_237_ap_start_reg, "grp_sin_or_cos_double_s_fu_237_ap_start_reg");
    sc_trace(mVcdFile, zext_ln26_fu_355_p1, "zext_ln26_fu_355_p1");
    sc_trace(mVcdFile, zext_ln25_fu_361_p1, "zext_ln25_fu_361_p1");
    sc_trace(mVcdFile, sext_ln65_fu_443_p1, "sext_ln65_fu_443_p1");
    sc_trace(mVcdFile, sext_ln67_fu_449_p1, "sext_ln67_fu_449_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, grp_fu_262_p0, "grp_fu_262_p0");
    sc_trace(mVcdFile, grp_fu_262_p1, "grp_fu_262_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, grp_fu_267_p0, "grp_fu_267_p0");
    sc_trace(mVcdFile, grp_fu_267_p1, "grp_fu_267_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, grp_fu_287_p0, "grp_fu_287_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_304_p0, "grp_fu_304_p0");
    sc_trace(mVcdFile, zext_ln22_fu_345_p1, "zext_ln22_fu_345_p1");
    sc_trace(mVcdFile, zext_ln50_fu_367_p1, "zext_ln50_fu_367_p1");
    sc_trace(mVcdFile, DFTpts_fu_377_p2, "DFTpts_fu_377_p2");
    sc_trace(mVcdFile, tmp_12_fu_422_p4, "tmp_12_fu_422_p4");
    sc_trace(mVcdFile, i_lower_fu_438_p2, "i_lower_fu_438_p2");
    sc_trace(mVcdFile, grp_fu_262_opcode, "grp_fu_262_opcode");
    sc_trace(mVcdFile, grp_fu_262_ce, "grp_fu_262_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, ap_CS_fsm_state55, "ap_CS_fsm_state55");
    sc_trace(mVcdFile, ap_CS_fsm_state56, "ap_CS_fsm_state56");
    sc_trace(mVcdFile, grp_fu_267_opcode, "grp_fu_267_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fft.hdltvin.dat");
    mHdltvoutHandle.open("fft.hdltvout.dat");
}

fft::~fft() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_sin_or_cos_double_s_fu_218;
    delete grp_sin_or_cos_double_s_fu_237;
    delete reversed_reverse_bits_fu_256;
    delete fft_faddfsub_32nsibs_U23;
    delete fft_faddfsub_32nsibs_U24;
    delete fft_fmul_32ns_32njbC_U25;
    delete fft_fmul_32ns_32njbC_U26;
    delete fft_fmul_32ns_32njbC_U27;
    delete fft_fmul_32ns_32njbC_U28;
    delete fft_fptrunc_64ns_kbM_U29;
    delete fft_fptrunc_64ns_kbM_U30;
    delete fft_fpext_32ns_64lbW_U31;
    delete fft_ddiv_64ns_64nmb6_U32;
    delete fft_sitodp_32ns_6ncg_U33;
}

void fft::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fft::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_C01921FB5444261E;
}

void fft::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_432_p2.read()))) {
        a_0_reg_197 = a_reg_561.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        a_0_reg_197 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sin_or_cos_double_s_fu_218_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
            grp_sin_or_cos_double_s_fu_218_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sin_or_cos_double_s_fu_218_ap_ready.read())) {
            grp_sin_or_cos_double_s_fu_218_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sin_or_cos_double_s_fu_237_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
            grp_sin_or_cos_double_s_fu_237_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sin_or_cos_double_s_fu_237_ap_ready.read())) {
            grp_sin_or_cos_double_s_fu_237_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i_reg_162 = i_3_reg_463.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_i_reg_162 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        i_0_reg_209 = i_4_reg_601.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        i_0_reg_209 = zext_ln57_reg_527.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_432_p2.read()))) {
        i_reg_186 = j_reg_535.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        i_reg_186 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln21_fu_333_p2.read(), ap_const_lv1_1))) {
        stage_0_reg_174 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
                esl_seteq<1,1,1>(icmp_ln57_fu_405_p2.read(), ap_const_lv1_1))) {
        stage_0_reg_174 = stage_fu_416_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln63_fu_432_p2.read()))) {
        X_I_addr_1_reg_596 =  (sc_lv<10>) (sext_ln67_fu_449_p1.read());
        X_I_addr_reg_586 =  (sc_lv<10>) (sext_ln65_fu_443_p1.read());
        X_R_addr_1_reg_591 =  (sc_lv<10>) (sext_ln67_fu_449_p1.read());
        X_R_addr_reg_581 =  (sc_lv<10>) (sext_ln65_fu_443_p1.read());
        i_4_reg_601 = i_4_fu_455_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_333_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln23_fu_349_p2.read(), ap_const_lv1_0))) {
        X_I_addr_3_reg_477 =  (sc_lv<10>) (zext_ln26_fu_355_p1.read());
        X_R_addr_3_reg_472 =  (sc_lv<10>) (zext_ln26_fu_355_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        a_reg_561 = grp_fu_262_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        c_reg_566 = grp_fu_287_p1.read();
        s_reg_572 = grp_fu_290_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        e_reg_522 = grp_fu_287_p1.read();
        numBF_reg_517 = numBF_fu_398_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_3_reg_463 = i_3_fu_339_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_333_p2.read(), ap_const_lv1_0))) {
        icmp_ln23_reg_468 = icmp_ln23_fu_349_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        j_reg_535 = j_fu_410_p2.read();
        zext_ln57_reg_527 = zext_ln57_fu_401_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()))) {
        reg_307 = X_R_q0.read();
        reg_314 = X_I_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()))) {
        reg_321 = grp_fu_262_p2.read();
        reg_327 = grp_fu_267_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        tmp_1_reg_626 = grp_fu_262_p2.read();
        tmp_6_reg_631 = grp_fu_267_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        tmp_2_reg_512 = grp_fu_299_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        tmp_7_reg_606 = grp_fu_271_p2.read();
        tmp_8_reg_611 = grp_fu_275_p2.read();
        tmp_9_reg_616 = grp_fu_279_p2.read();
        tmp_s_reg_621 = grp_fu_283_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && esl_seteq<1,1,1>(ap_block_state35_on_subcall_done.read(), ap_const_boolean_0))) {
        tmp_i_i9_reg_556 = grp_sin_or_cos_double_s_fu_237_ap_return.read();
        tmp_i_i_reg_551 = grp_sin_or_cos_double_s_fu_218_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_reg_507 = grp_fu_304_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln50_fu_371_p2.read()))) {
        trunc_ln_reg_501 = DFTpts_fu_377_p2.read().range(10, 1);
        zext_ln51_reg_495 = zext_ln51_fu_383_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        x_assign_reg_545 = grp_fu_293_p1.read();
    }
}

void fft::thread_DFTpts_fu_377_p2() {
    DFTpts_fu_377_p2 = (!zext_ln50_fu_367_p1.read().is_01())? sc_lv<11>(): ap_const_lv11_1 << (unsigned short)zext_ln50_fu_367_p1.read().to_uint();
}

void fft::thread_X_I_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        X_I_address0 = X_I_addr_reg_586.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()))) {
        X_I_address0 = X_I_addr_1_reg_596.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        X_I_address0 =  (sc_lv<10>) (sext_ln65_fu_443_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        X_I_address0 = X_I_addr_3_reg_477.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        X_I_address0 =  (sc_lv<10>) (zext_ln25_fu_361_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        X_I_address0 =  (sc_lv<10>) (zext_ln26_fu_355_p1.read());
    } else {
        X_I_address0 = "XXXXXXXXXX";
    }
}

void fft::thread_X_I_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()))) {
        X_I_ce0 = ap_const_logic_1;
    } else {
        X_I_ce0 = ap_const_logic_0;
    }
}

void fft::thread_X_I_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        X_I_d0 = reg_327.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        X_I_d0 = tmp_6_reg_631.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        X_I_d0 = X_I_q0.read();
    } else {
        X_I_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_X_I_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_reg_468.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        X_I_we0 = ap_const_logic_1;
    } else {
        X_I_we0 = ap_const_logic_0;
    }
}

void fft::thread_X_R_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        X_R_address0 = X_R_addr_reg_581.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()))) {
        X_R_address0 = X_R_addr_1_reg_591.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        X_R_address0 =  (sc_lv<10>) (sext_ln65_fu_443_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        X_R_address0 = X_R_addr_3_reg_472.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        X_R_address0 =  (sc_lv<10>) (zext_ln25_fu_361_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        X_R_address0 =  (sc_lv<10>) (zext_ln26_fu_355_p1.read());
    } else {
        X_R_address0 = "XXXXXXXXXX";
    }
}

void fft::thread_X_R_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()))) {
        X_R_ce0 = ap_const_logic_1;
    } else {
        X_R_ce0 = ap_const_logic_0;
    }
}

void fft::thread_X_R_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        X_R_d0 = reg_321.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read())) {
        X_R_d0 = tmp_1_reg_626.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        X_R_d0 = X_R_q0.read();
    } else {
        X_R_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_X_R_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln23_reg_468.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        X_R_we0 = ap_const_logic_1;
    } else {
        X_R_we0 = ap_const_logic_0;
    }
}

void fft::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fft::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fft::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fft::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void fft::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void fft::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void fft::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void fft::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void fft::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void fft::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void fft::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void fft::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void fft::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void fft::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fft::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void fft::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void fft::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void fft::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void fft::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void fft::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void fft::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void fft::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void fft::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void fft::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fft::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void fft::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void fft::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read()[51];
}

void fft::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void fft::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void fft::thread_ap_CS_fsm_state55() {
    ap_CS_fsm_state55 = ap_CS_fsm.read()[54];
}

void fft::thread_ap_CS_fsm_state56() {
    ap_CS_fsm_state56 = ap_CS_fsm.read()[55];
}

void fft::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void fft::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void fft::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fft::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fft::thread_ap_block_state35_on_subcall_done() {
    ap_block_state35_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_sin_or_cos_double_s_fu_218_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_sin_or_cos_double_s_fu_237_ap_done.read()));
}

void fft::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln50_fu_371_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fft::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fft::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln50_fu_371_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fft::thread_grp_fu_262_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
          esl_seteq<1,1,1>(ap_block_state35_on_subcall_done.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()))) {
        grp_fu_262_ce = ap_const_logic_1;
    } else {
        grp_fu_262_ce = ap_const_logic_0;
    }
}

void fft::thread_grp_fu_262_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()))) {
        grp_fu_262_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_405_p2.read())))) {
        grp_fu_262_opcode = ap_const_lv2_0;
    } else {
        grp_fu_262_opcode =  (sc_lv<2>) ("XX");
    }
}

void fft::thread_grp_fu_262_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_262_p0 = reg_307.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        grp_fu_262_p0 = tmp_7_reg_606.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        grp_fu_262_p0 = a_0_reg_197.read();
    } else {
        grp_fu_262_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_262_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_262_p1 = reg_321.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        grp_fu_262_p1 = tmp_8_reg_611.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        grp_fu_262_p1 = e_reg_522.read();
    } else {
        grp_fu_262_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_267_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        grp_fu_267_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_267_opcode = ap_const_lv2_0;
    } else {
        grp_fu_267_opcode =  (sc_lv<2>) ("XX");
    }
}

void fft::thread_grp_fu_267_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_267_p0 = reg_314.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        grp_fu_267_p0 = tmp_9_reg_616.read();
    } else {
        grp_fu_267_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_267_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_267_p1 = reg_327.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        grp_fu_267_p1 = tmp_s_reg_621.read();
    } else {
        grp_fu_267_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_287_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        grp_fu_287_p0 = tmp_i_i_reg_551.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        grp_fu_287_p0 = tmp_2_reg_512.read();
    } else {
        grp_fu_287_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_304_p0() {
    grp_fu_304_p0 = esl_zext<32,11>(DFTpts_fu_377_p2.read());
}

void fft::thread_grp_sin_or_cos_double_s_fu_218_ap_start() {
    grp_sin_or_cos_double_s_fu_218_ap_start = grp_sin_or_cos_double_s_fu_218_ap_start_reg.read();
}

void fft::thread_grp_sin_or_cos_double_s_fu_218_do_cos() {
    grp_sin_or_cos_double_s_fu_218_do_cos =  (sc_logic) (ap_const_lv1_1[0]);
}

void fft::thread_grp_sin_or_cos_double_s_fu_237_ap_start() {
    grp_sin_or_cos_double_s_fu_237_ap_start = grp_sin_or_cos_double_s_fu_237_ap_start_reg.read();
}

void fft::thread_grp_sin_or_cos_double_s_fu_237_do_cos() {
    grp_sin_or_cos_double_s_fu_237_do_cos =  (sc_logic) (ap_const_lv1_0[0]);
}

void fft::thread_i_3_fu_339_p2() {
    i_3_fu_339_p2 = (!i_0_i_reg_162.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_i_reg_162.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void fft::thread_i_4_fu_455_p2() {
    i_4_fu_455_p2 = (!zext_ln51_reg_495.read().is_01() || !i_0_reg_209.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln51_reg_495.read()) + sc_bigint<32>(i_0_reg_209.read()));
}

void fft::thread_i_lower_fu_438_p2() {
    i_lower_fu_438_p2 = (!i_0_reg_209.read().is_01() || !numBF_reg_517.read().is_01())? sc_lv<32>(): (sc_bigint<32>(i_0_reg_209.read()) + sc_biguint<32>(numBF_reg_517.read()));
}

void fft::thread_icmp_ln21_fu_333_p2() {
    icmp_ln21_fu_333_p2 = (!i_0_i_reg_162.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_162.read() == ap_const_lv11_400);
}

void fft::thread_icmp_ln23_fu_349_p2() {
    icmp_ln23_fu_349_p2 = (!i_0_i_reg_162.read().is_01() || !zext_ln22_fu_345_p1.read().is_01())? sc_lv<1>(): (sc_biguint<11>(i_0_i_reg_162.read()) > sc_biguint<11>(zext_ln22_fu_345_p1.read()));
}

void fft::thread_icmp_ln50_fu_371_p2() {
    icmp_ln50_fu_371_p2 = (!stage_0_reg_174.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(stage_0_reg_174.read() == ap_const_lv4_B);
}

void fft::thread_icmp_ln57_fu_405_p2() {
    icmp_ln57_fu_405_p2 = (!i_reg_186.read().is_01() || !trunc_ln_reg_501.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_186.read() == trunc_ln_reg_501.read());
}

void fft::thread_icmp_ln63_fu_432_p2() {
    icmp_ln63_fu_432_p2 = (!tmp_12_fu_422_p4.read().is_01() || !ap_const_lv22_1.is_01())? sc_lv<1>(): (sc_bigint<22>(tmp_12_fu_422_p4.read()) < sc_bigint<22>(ap_const_lv22_1));
}

void fft::thread_j_fu_410_p2() {
    j_fu_410_p2 = (!i_reg_186.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_186.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void fft::thread_numBF_fu_398_p1() {
    numBF_fu_398_p1 = esl_zext<32,10>(trunc_ln_reg_501.read());
}

void fft::thread_sext_ln65_fu_443_p1() {
    sext_ln65_fu_443_p1 = esl_sext<64,32>(i_lower_fu_438_p2.read());
}

void fft::thread_sext_ln67_fu_449_p1() {
    sext_ln67_fu_449_p1 = esl_sext<64,32>(i_0_reg_209.read());
}

void fft::thread_stage_fu_416_p2() {
    stage_fu_416_p2 = (!stage_0_reg_174.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(stage_0_reg_174.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fft::thread_tmp_12_fu_422_p4() {
    tmp_12_fu_422_p4 = i_0_reg_209.read().range(31, 10);
}

void fft::thread_zext_ln22_fu_345_p1() {
    zext_ln22_fu_345_p1 = esl_zext<11,10>(reversed_reverse_bits_fu_256_ap_return.read());
}

void fft::thread_zext_ln25_fu_361_p1() {
    zext_ln25_fu_361_p1 = esl_zext<64,11>(i_0_i_reg_162.read());
}

void fft::thread_zext_ln26_fu_355_p1() {
    zext_ln26_fu_355_p1 = esl_zext<64,10>(reversed_reverse_bits_fu_256_ap_return.read());
}

void fft::thread_zext_ln50_fu_367_p1() {
    zext_ln50_fu_367_p1 = esl_zext<11,4>(stage_0_reg_174.read());
}

void fft::thread_zext_ln51_fu_383_p1() {
    zext_ln51_fu_383_p1 = esl_zext<32,11>(DFTpts_fu_377_p2.read());
}

void fft::thread_zext_ln57_fu_401_p1() {
    zext_ln57_fu_401_p1 = esl_zext<32,10>(i_reg_186.read());
}

void fft::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_333_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_333_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln23_fu_349_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln50_fu_371_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(icmp_ln57_fu_405_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state34;
            }
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && esl_seteq<1,1,1>(ap_block_state35_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else {
                ap_NS_fsm = ap_ST_fsm_state35;
            }
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_fu_432_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state33;
            } else {
                ap_NS_fsm = ap_ST_fsm_state39;
            }
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state57;
            break;
        case 72057594037927936 : 
            ap_NS_fsm = ap_ST_fsm_state58;
            break;
        case 144115188075855872 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<58>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fft::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_R_address0\" :  \"" << X_R_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_R_ce0\" :  \"" << X_R_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_R_we0\" :  \"" << X_R_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_R_d0\" :  \"" << X_R_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"X_R_q0\" :  \"" << X_R_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_I_address0\" :  \"" << X_I_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_I_ce0\" :  \"" << X_I_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_I_we0\" :  \"" << X_I_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"X_I_d0\" :  \"" << X_I_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"X_I_q0\" :  \"" << X_I_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

