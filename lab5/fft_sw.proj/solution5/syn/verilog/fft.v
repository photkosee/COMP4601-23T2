// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635000,HLS_SYN_LAT=384485,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=198,HLS_SYN_FF=9396,HLS_SYN_LUT=17511,HLS_VERSION=2020_1}" *)

module fft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_address0,
        X_R_ce0,
        X_R_we0,
        X_R_d0,
        X_R_q0,
        X_R_address1,
        X_R_ce1,
        X_R_q1,
        X_I_address0,
        X_I_ce0,
        X_I_we0,
        X_I_d0,
        X_I_q0,
        X_I_address1,
        X_I_ce1,
        X_I_we1,
        X_I_d1,
        X_I_q1
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_pp0_stage0 = 39'd34359738368;
parameter    ap_ST_fsm_pp0_stage1 = 39'd68719476736;
parameter    ap_ST_fsm_pp0_stage2 = 39'd137438953472;
parameter    ap_ST_fsm_state62 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] X_R_address0;
output   X_R_ce0;
output   X_R_we0;
output  [31:0] X_R_d0;
input  [31:0] X_R_q0;
output  [9:0] X_R_address1;
output   X_R_ce1;
input  [31:0] X_R_q1;
output  [9:0] X_I_address0;
output   X_I_ce0;
output   X_I_we0;
output  [31:0] X_I_d0;
input  [31:0] X_I_q0;
output  [9:0] X_I_address1;
output   X_I_ce1;
output   X_I_we1;
output  [31:0] X_I_d1;
input  [31:0] X_I_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] X_R_address0;
reg X_R_ce0;
reg X_R_we0;
reg[31:0] X_R_d0;
reg[9:0] X_R_address1;
reg X_R_ce1;
reg[9:0] X_I_address0;
reg X_I_ce0;
reg X_I_we0;
reg[31:0] X_I_d0;
reg[9:0] X_I_address1;
reg X_I_ce1;
reg X_I_we1;

(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] i_0_reg_170;
wire   [31:0] grp_fu_230_p2;
reg   [31:0] reg_262;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state36_pp0_stage0_iter0;
wire    ap_block_state39_pp0_stage0_iter1;
wire    ap_block_state42_pp0_stage0_iter2;
wire    ap_block_state45_pp0_stage0_iter3;
wire    ap_block_state48_pp0_stage0_iter4;
wire    ap_block_state51_pp0_stage0_iter5;
wire    ap_block_state54_pp0_stage0_iter6;
wire    ap_block_state57_pp0_stage0_iter7;
wire    ap_block_state60_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln63_reg_444;
reg   [0:0] icmp_ln63_reg_444_pp0_iter3_reg;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_state37_pp0_stage1_iter0;
wire    ap_block_state40_pp0_stage1_iter1;
wire    ap_block_state43_pp0_stage1_iter2;
wire    ap_block_state46_pp0_stage1_iter3;
wire    ap_block_state49_pp0_stage1_iter4;
wire    ap_block_state52_pp0_stage1_iter5;
wire    ap_block_state55_pp0_stage1_iter6;
wire    ap_block_state58_pp0_stage1_iter7;
wire    ap_block_state61_pp0_stage1_iter8;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln63_reg_444_pp0_iter6_reg;
wire   [31:0] zext_ln51_fu_283_p1;
reg   [31:0] zext_ln51_reg_363;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln50_fu_267_p2;
reg   [9:0] trunc_ln_reg_369;
wire   [63:0] grp_fu_259_p1;
reg   [63:0] tmp_reg_375;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_254_p2;
reg   [63:0] tmp_2_reg_380;
wire    ap_CS_fsm_state28;
wire   [31:0] numBF_fu_298_p1;
reg   [31:0] numBF_reg_385;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_242_p1;
reg   [31:0] e_reg_390;
wire   [9:0] j_fu_306_p2;
reg   [9:0] j_reg_398;
wire    ap_CS_fsm_state31;
wire   [3:0] stage_fu_312_p2;
wire   [0:0] icmp_ln57_fu_301_p2;
wire   [63:0] grp_fu_248_p1;
reg   [63:0] x_assign_reg_408;
wire    ap_CS_fsm_state32;
wire   [63:0] grp_sin_or_cos_double_s_fu_179_ap_return;
reg   [63:0] tmp_i_i_reg_414;
wire    ap_CS_fsm_state33;
wire    grp_sin_or_cos_double_s_fu_179_ap_ready;
wire    grp_sin_or_cos_double_s_fu_179_ap_done;
wire    grp_sin_or_cos_double_s_fu_198_ap_ready;
wire    grp_sin_or_cos_double_s_fu_198_ap_done;
reg    ap_block_state33_on_subcall_done;
wire   [63:0] grp_sin_or_cos_double_s_fu_198_ap_return;
reg   [63:0] tmp_i_i9_reg_419;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] a_reg_424;
wire    ap_CS_fsm_state34;
wire   [31:0] zext_ln57_fu_318_p1;
wire    ap_CS_fsm_state35;
reg   [31:0] c_reg_434;
wire   [31:0] grp_fu_245_p1;
reg   [31:0] s_reg_439;
wire   [0:0] icmp_ln63_fu_332_p2;
reg   [0:0] icmp_ln63_reg_444_pp0_iter1_reg;
reg   [0:0] icmp_ln63_reg_444_pp0_iter2_reg;
reg   [0:0] icmp_ln63_reg_444_pp0_iter4_reg;
reg   [0:0] icmp_ln63_reg_444_pp0_iter5_reg;
reg   [0:0] icmp_ln63_reg_444_pp0_iter7_reg;
reg   [0:0] icmp_ln63_reg_444_pp0_iter8_reg;
reg   [9:0] X_R_addr_reg_448;
reg   [9:0] X_R_addr_reg_448_pp0_iter1_reg;
reg   [9:0] X_R_addr_reg_448_pp0_iter2_reg;
reg   [9:0] X_R_addr_reg_448_pp0_iter3_reg;
reg   [9:0] X_R_addr_reg_448_pp0_iter4_reg;
reg   [9:0] X_I_addr_reg_453;
reg   [9:0] X_I_addr_reg_453_pp0_iter1_reg;
reg   [9:0] X_I_addr_reg_453_pp0_iter2_reg;
reg   [9:0] X_I_addr_reg_453_pp0_iter3_reg;
reg   [9:0] X_I_addr_reg_453_pp0_iter4_reg;
reg   [9:0] X_R_addr_1_reg_458;
reg   [9:0] X_R_addr_1_reg_458_pp0_iter1_reg;
reg   [9:0] X_R_addr_1_reg_458_pp0_iter2_reg;
reg   [9:0] X_R_addr_1_reg_458_pp0_iter3_reg;
reg   [9:0] X_R_addr_1_reg_458_pp0_iter4_reg;
reg   [9:0] X_R_addr_1_reg_458_pp0_iter5_reg;
reg   [9:0] X_R_addr_1_reg_458_pp0_iter6_reg;
reg   [9:0] X_I_addr_1_reg_464;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter1_reg;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter2_reg;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter3_reg;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter4_reg;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter5_reg;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter6_reg;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter7_reg;
reg   [9:0] X_I_addr_1_reg_464_pp0_iter8_reg;
wire   [31:0] i_3_fu_355_p2;
reg   [31:0] i_3_reg_470;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] X_R_load_reg_475;
reg   [31:0] X_I_load_reg_481;
wire   [31:0] grp_fu_234_p2;
reg   [31:0] tmp_7_reg_487;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp_8_reg_492;
reg   [31:0] tmp_9_reg_497;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state38_pp0_stage2_iter0;
wire    ap_block_state41_pp0_stage2_iter1;
wire    ap_block_state44_pp0_stage2_iter2;
wire    ap_block_state47_pp0_stage2_iter3;
wire    ap_block_state50_pp0_stage2_iter4;
wire    ap_block_state53_pp0_stage2_iter5;
wire    ap_block_state56_pp0_stage2_iter6;
wire    ap_block_state59_pp0_stage2_iter7;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] tmp_s_reg_502;
reg   [31:0] X_R_load_1_reg_507;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] X_I_load_1_reg_512;
reg   [31:0] temp_R_reg_517;
reg   [31:0] temp_R_reg_517_pp0_iter3_reg;
reg   [31:0] temp_R_reg_517_pp0_iter4_reg;
reg   [31:0] temp_I_reg_522;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] temp_I_reg_522_pp0_iter4_reg;
reg   [31:0] temp_I_reg_522_pp0_iter5_reg;
reg   [31:0] temp_I_reg_522_pp0_iter6_reg;
reg   [31:0] tmp_6_reg_528;
reg   [31:0] X_R_load_2_reg_533;
reg    ap_enable_reg_pp0_iter5;
reg   [31:0] X_I_load_2_reg_538;
reg   [31:0] tmp_11_reg_543;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state36;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter8;
wire    grp_sin_or_cos_double_s_fu_179_ap_start;
wire    grp_sin_or_cos_double_s_fu_179_ap_idle;
wire    grp_sin_or_cos_double_s_fu_179_do_cos;
wire    grp_sin_or_cos_double_s_fu_198_ap_start;
wire    grp_sin_or_cos_double_s_fu_198_ap_idle;
wire    grp_sin_or_cos_double_s_fu_198_do_cos;
wire    grp_bit_reverse_fu_217_ap_start;
wire    grp_bit_reverse_fu_217_ap_done;
wire    grp_bit_reverse_fu_217_ap_idle;
wire    grp_bit_reverse_fu_217_ap_ready;
wire   [9:0] grp_bit_reverse_fu_217_X_R_address0;
wire    grp_bit_reverse_fu_217_X_R_ce0;
wire    grp_bit_reverse_fu_217_X_R_we0;
wire   [31:0] grp_bit_reverse_fu_217_X_R_d0;
wire   [9:0] grp_bit_reverse_fu_217_X_I_address0;
wire    grp_bit_reverse_fu_217_X_I_ce0;
wire    grp_bit_reverse_fu_217_X_I_we0;
wire   [31:0] grp_bit_reverse_fu_217_X_I_d0;
reg   [3:0] stage_0_reg_134;
wire    ap_CS_fsm_state2;
reg   [9:0] i_reg_146;
wire    ap_CS_fsm_state62;
reg   [31:0] a_0_reg_158;
reg  signed [31:0] ap_phi_mux_i_0_phi_fu_173_p4;
wire    ap_block_pp0_stage0;
reg    grp_sin_or_cos_double_s_fu_179_ap_start_reg;
reg    grp_sin_or_cos_double_s_fu_198_ap_start_reg;
reg    grp_bit_reverse_fu_217_ap_start_reg;
wire  signed [63:0] sext_ln65_fu_343_p1;
wire  signed [63:0] sext_ln67_fu_349_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_225_p0;
reg   [31:0] grp_fu_225_p1;
reg   [31:0] grp_fu_230_p0;
reg   [31:0] grp_fu_230_p1;
reg   [31:0] grp_fu_234_p0;
reg   [31:0] grp_fu_238_p0;
reg   [63:0] grp_fu_242_p0;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_259_p0;
wire   [10:0] zext_ln50_fu_273_p1;
wire   [10:0] DFTpts_fu_277_p2;
wire   [21:0] tmp_12_fu_322_p4;
wire   [31:0] i_lower_fu_338_p2;
reg   [1:0] grp_fu_225_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage1_00001;
reg    grp_fu_225_ce;
reg   [1:0] grp_fu_230_opcode;
reg   [38:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_144;
reg    ap_enable_state36_pp0_iter0_stage0;
reg    ap_enable_operation_151;
reg    ap_enable_state37_pp0_iter0_stage1;
reg    ap_enable_operation_184;
reg    ap_enable_state49_pp0_iter4_stage1;
reg    ap_enable_operation_195;
reg    ap_enable_state56_pp0_iter6_stage2;
reg    ap_enable_operation_146;
reg    ap_enable_operation_152;
reg    ap_enable_operation_186;
reg    ap_enable_state50_pp0_iter4_stage2;
reg    ap_enable_operation_204;
reg    ap_enable_state61_pp0_iter8_stage1;
reg    ap_enable_operation_168;
reg    ap_enable_state42_pp0_iter2_stage0;
reg    ap_enable_operation_172;
reg    ap_enable_state43_pp0_iter2_stage1;
reg    ap_enable_operation_169;
reg    ap_enable_operation_173;
reg    ap_enable_operation_187;
reg    ap_enable_operation_188;
reg    ap_enable_state51_pp0_iter5_stage0;
reg    ap_enable_operation_190;
reg    ap_enable_state52_pp0_iter5_stage1;
reg    ap_enable_operation_192;
reg    ap_enable_state53_pp0_iter5_stage2;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 grp_sin_or_cos_double_s_fu_179_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_198_ap_start_reg = 1'b0;
#0 grp_bit_reverse_fu_217_ap_start_reg = 1'b0;
end

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_179(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_179_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_179_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_179_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_179_ap_ready),
    .t_in(x_assign_reg_408),
    .do_cos(grp_sin_or_cos_double_s_fu_179_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_179_ap_return)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_198(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_198_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_198_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_198_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_198_ap_ready),
    .t_in(x_assign_reg_408),
    .do_cos(grp_sin_or_cos_double_s_fu_198_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_198_ap_return)
);

bit_reverse grp_bit_reverse_fu_217(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bit_reverse_fu_217_ap_start),
    .ap_done(grp_bit_reverse_fu_217_ap_done),
    .ap_idle(grp_bit_reverse_fu_217_ap_idle),
    .ap_ready(grp_bit_reverse_fu_217_ap_ready),
    .X_R_address0(grp_bit_reverse_fu_217_X_R_address0),
    .X_R_ce0(grp_bit_reverse_fu_217_X_R_ce0),
    .X_R_we0(grp_bit_reverse_fu_217_X_R_we0),
    .X_R_d0(grp_bit_reverse_fu_217_X_R_d0),
    .X_R_q0(X_R_q0),
    .X_I_address0(grp_bit_reverse_fu_217_X_I_address0),
    .X_I_ce0(grp_bit_reverse_fu_217_X_I_ce0),
    .X_I_we0(grp_bit_reverse_fu_217_X_I_we0),
    .X_I_d0(grp_bit_reverse_fu_217_X_I_d0),
    .X_I_q0(X_I_q0)
);

fft_faddfsub_32nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_faddfsub_32nsibs_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_225_p0),
    .din1(grp_fu_225_p1),
    .opcode(grp_fu_225_opcode),
    .ce(grp_fu_225_ce),
    .dout(grp_fu_225_p2)
);

fft_faddfsub_32nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_faddfsub_32nsibs_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_230_p0),
    .din1(grp_fu_230_p1),
    .opcode(grp_fu_230_opcode),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

fft_fmul_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fmul_32ns_32njbC_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_234_p0),
    .din1(c_reg_434),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

fft_fmul_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fmul_32ns_32njbC_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(s_reg_439),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

fft_fptrunc_64ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fft_fptrunc_64ns_kbM_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_242_p0),
    .ce(1'b1),
    .dout(grp_fu_242_p1)
);

fft_fptrunc_64ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fft_fptrunc_64ns_kbM_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i9_reg_419),
    .ce(1'b1),
    .dout(grp_fu_245_p1)
);

fft_fpext_32ns_64lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fft_fpext_32ns_64lbW_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_0_reg_158),
    .ce(1'b1),
    .dout(grp_fu_248_p1)
);

fft_ddiv_64ns_64nmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_ddiv_64ns_64nmb6_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd13842132293034190366),
    .din1(tmp_reg_375),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

fft_sitodp_32ns_6ncg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fft_sitodp_32ns_6ncg_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_259_p0),
    .ce(1'b1),
    .dout(grp_fu_259_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state36))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bit_reverse_fu_217_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_bit_reverse_fu_217_ap_start_reg <= 1'b1;
        end else if ((grp_bit_reverse_fu_217_ap_ready == 1'b1)) begin
            grp_bit_reverse_fu_217_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_179_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            grp_sin_or_cos_double_s_fu_179_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_179_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_179_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_198_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            grp_sin_or_cos_double_s_fu_198_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_198_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_198_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        a_0_reg_158 <= a_reg_424;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        a_0_reg_158 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_444 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_170 <= i_3_reg_470;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i_0_reg_170 <= zext_ln57_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        i_reg_146 <= j_reg_398;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i_reg_146 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln57_fu_301_p2 == 1'd1))) begin
        stage_0_reg_134 <= stage_fu_312_p2;
    end else if (((grp_bit_reverse_fu_217_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stage_0_reg_134 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_fu_332_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_addr_1_reg_464 <= sext_ln67_fu_349_p1;
        X_I_addr_reg_453 <= sext_ln65_fu_343_p1;
        X_R_addr_1_reg_458 <= sext_ln67_fu_349_p1;
        X_R_addr_reg_448 <= sext_ln65_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_addr_1_reg_464_pp0_iter1_reg <= X_I_addr_1_reg_464;
        X_I_addr_1_reg_464_pp0_iter2_reg <= X_I_addr_1_reg_464_pp0_iter1_reg;
        X_I_addr_1_reg_464_pp0_iter3_reg <= X_I_addr_1_reg_464_pp0_iter2_reg;
        X_I_addr_1_reg_464_pp0_iter4_reg <= X_I_addr_1_reg_464_pp0_iter3_reg;
        X_I_addr_1_reg_464_pp0_iter5_reg <= X_I_addr_1_reg_464_pp0_iter4_reg;
        X_I_addr_1_reg_464_pp0_iter6_reg <= X_I_addr_1_reg_464_pp0_iter5_reg;
        X_I_addr_1_reg_464_pp0_iter7_reg <= X_I_addr_1_reg_464_pp0_iter6_reg;
        X_I_addr_1_reg_464_pp0_iter8_reg <= X_I_addr_1_reg_464_pp0_iter7_reg;
        X_I_addr_reg_453_pp0_iter1_reg <= X_I_addr_reg_453;
        X_I_addr_reg_453_pp0_iter2_reg <= X_I_addr_reg_453_pp0_iter1_reg;
        X_I_addr_reg_453_pp0_iter3_reg <= X_I_addr_reg_453_pp0_iter2_reg;
        X_I_addr_reg_453_pp0_iter4_reg <= X_I_addr_reg_453_pp0_iter3_reg;
        X_R_addr_1_reg_458_pp0_iter1_reg <= X_R_addr_1_reg_458;
        X_R_addr_1_reg_458_pp0_iter2_reg <= X_R_addr_1_reg_458_pp0_iter1_reg;
        X_R_addr_1_reg_458_pp0_iter3_reg <= X_R_addr_1_reg_458_pp0_iter2_reg;
        X_R_addr_1_reg_458_pp0_iter4_reg <= X_R_addr_1_reg_458_pp0_iter3_reg;
        X_R_addr_1_reg_458_pp0_iter5_reg <= X_R_addr_1_reg_458_pp0_iter4_reg;
        X_R_addr_1_reg_458_pp0_iter6_reg <= X_R_addr_1_reg_458_pp0_iter5_reg;
        X_R_addr_reg_448_pp0_iter1_reg <= X_R_addr_reg_448;
        X_R_addr_reg_448_pp0_iter2_reg <= X_R_addr_reg_448_pp0_iter1_reg;
        X_R_addr_reg_448_pp0_iter3_reg <= X_R_addr_reg_448_pp0_iter2_reg;
        X_R_addr_reg_448_pp0_iter4_reg <= X_R_addr_reg_448_pp0_iter3_reg;
        icmp_ln63_reg_444 <= icmp_ln63_fu_332_p2;
        icmp_ln63_reg_444_pp0_iter1_reg <= icmp_ln63_reg_444;
        icmp_ln63_reg_444_pp0_iter2_reg <= icmp_ln63_reg_444_pp0_iter1_reg;
        icmp_ln63_reg_444_pp0_iter3_reg <= icmp_ln63_reg_444_pp0_iter2_reg;
        icmp_ln63_reg_444_pp0_iter4_reg <= icmp_ln63_reg_444_pp0_iter3_reg;
        icmp_ln63_reg_444_pp0_iter5_reg <= icmp_ln63_reg_444_pp0_iter4_reg;
        icmp_ln63_reg_444_pp0_iter6_reg <= icmp_ln63_reg_444_pp0_iter5_reg;
        icmp_ln63_reg_444_pp0_iter7_reg <= icmp_ln63_reg_444_pp0_iter6_reg;
        icmp_ln63_reg_444_pp0_iter8_reg <= icmp_ln63_reg_444_pp0_iter7_reg;
        temp_I_reg_522_pp0_iter4_reg <= temp_I_reg_522;
        temp_I_reg_522_pp0_iter5_reg <= temp_I_reg_522_pp0_iter4_reg;
        temp_I_reg_522_pp0_iter6_reg <= temp_I_reg_522_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln63_reg_444_pp0_iter2_reg == 1'd1))) begin
        X_I_load_1_reg_512 <= X_I_q1;
        X_R_load_1_reg_507 <= X_R_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_444_pp0_iter5_reg == 1'd1))) begin
        X_I_load_2_reg_538 <= X_I_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln63_reg_444 == 1'd1))) begin
        X_I_load_reg_481 <= X_I_q0;
        X_R_load_reg_475 <= X_R_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_load_2_reg_533 <= X_R_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        a_reg_424 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        c_reg_434 <= grp_fu_242_p1;
        s_reg_439 <= grp_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        e_reg_390 <= grp_fu_242_p1;
        numBF_reg_385[9 : 0] <= numBF_fu_298_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_fu_332_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_3_reg_470 <= i_3_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        j_reg_398 <= j_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_444_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln63_reg_444_pp0_iter6_reg == 1'd1)))) begin
        reg_262 <= grp_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln63_reg_444_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_I_reg_522 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_444_pp0_iter2_reg == 1'd1))) begin
        temp_R_reg_517 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        temp_R_reg_517_pp0_iter3_reg <= temp_R_reg_517;
        temp_R_reg_517_pp0_iter4_reg <= temp_R_reg_517_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_444_pp0_iter7_reg == 1'd1))) begin
        tmp_11_reg_543 <= grp_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_2_reg_380 <= grp_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1))) begin
        tmp_6_reg_528 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln63_reg_444_pp0_iter1_reg == 1'd1))) begin
        tmp_7_reg_487 <= grp_fu_234_p2;
        tmp_8_reg_492 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_444_pp0_iter1_reg == 1'd1))) begin
        tmp_9_reg_497 <= grp_fu_234_p2;
        tmp_s_reg_502 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state33_on_subcall_done) & (1'b1 == ap_CS_fsm_state33))) begin
        tmp_i_i9_reg_419 <= grp_sin_or_cos_double_s_fu_198_ap_return;
        tmp_i_i_reg_414 <= grp_sin_or_cos_double_s_fu_179_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_375 <= grp_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln50_fu_267_p2 == 1'd0))) begin
        trunc_ln_reg_369 <= {{DFTpts_fu_277_p2[10:1]}};
        zext_ln51_reg_363[10 : 0] <= zext_ln51_fu_283_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        x_assign_reg_408 <= grp_fu_248_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_I_address0 = X_I_addr_1_reg_464_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        X_I_address0 = X_I_addr_reg_453_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        X_I_address0 = sext_ln65_fu_343_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_address0 = grp_bit_reverse_fu_217_X_I_address0;
    end else begin
        X_I_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_I_address1 = X_I_addr_1_reg_464_pp0_iter8_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        X_I_address1 = X_I_addr_1_reg_464_pp0_iter1_reg;
    end else begin
        X_I_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        X_I_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_ce0 = grp_bit_reverse_fu_217_X_I_ce0;
    end else begin
        X_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        X_I_ce1 = 1'b1;
    end else begin
        X_I_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        X_I_d0 = tmp_6_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_d0 = grp_bit_reverse_fu_217_X_I_d0;
    end else begin
        X_I_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1))) begin
        X_I_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_we0 = grp_bit_reverse_fu_217_X_I_we0;
    end else begin
        X_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln63_reg_444_pp0_iter8_reg == 1'd1))) begin
        X_I_we1 = 1'b1;
    end else begin
        X_I_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        X_R_address0 = X_R_addr_1_reg_458_pp0_iter6_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_R_address0 = X_R_addr_reg_448_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        X_R_address0 = sext_ln65_fu_343_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_address0 = grp_bit_reverse_fu_217_X_R_address0;
    end else begin
        X_R_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        X_R_address1 = X_R_addr_1_reg_458_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        X_R_address1 = X_R_addr_1_reg_458_pp0_iter1_reg;
    end else begin
        X_R_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        X_R_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_ce0 = grp_bit_reverse_fu_217_X_R_ce0;
    end else begin
        X_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        X_R_ce1 = 1'b1;
    end else begin
        X_R_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        X_R_d0 = reg_262;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_d0 = grp_bit_reverse_fu_217_X_R_d0;
    end else begin
        X_R_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln63_reg_444_pp0_iter6_reg == 1'd1)))) begin
        X_R_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_we0 = grp_bit_reverse_fu_217_X_R_we0;
    end else begin
        X_R_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_332_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln50_fu_267_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_444 == 1'd1))) begin
        ap_phi_mux_i_0_phi_fu_173_p4 = i_3_reg_470;
    end else begin
        ap_phi_mux_i_0_phi_fu_173_p4 = i_0_reg_170;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln50_fu_267_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_state33_on_subcall_done) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_225_ce = 1'b1;
    end else begin
        grp_fu_225_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_00001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln63_reg_444_pp0_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage1_00001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln63_reg_444_pp0_iter3_reg == 1'd1)))) begin
        grp_fu_225_opcode = 2'd1;
    end else if ((((1'b0 == ap_block_pp0_stage0_00001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln63_reg_444_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_fsm_state31) & (icmp_ln57_fu_301_p2 == 1'd0)))) begin
        grp_fu_225_opcode = 2'd0;
    end else begin
        grp_fu_225_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_225_p0 = X_I_load_1_reg_512;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_225_p0 = tmp_9_reg_497;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_225_p0 = tmp_7_reg_487;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_225_p0 = a_0_reg_158;
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_225_p1 = temp_I_reg_522;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_225_p1 = tmp_s_reg_502;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_225_p1 = tmp_8_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_225_p1 = e_reg_390;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_00001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln63_reg_444_pp0_iter2_reg == 1'd1))) begin
        grp_fu_230_opcode = 2'd1;
    end else if ((((1'b0 == ap_block_pp0_stage2_00001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln63_reg_444_pp0_iter6_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage1_00001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln63_reg_444_pp0_iter5_reg == 1'd1)))) begin
        grp_fu_230_opcode = 2'd0;
    end else begin
        grp_fu_230_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        grp_fu_230_p0 = X_I_load_2_reg_538;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_230_p0 = X_R_load_2_reg_533;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_230_p0 = X_R_load_1_reg_507;
    end else begin
        grp_fu_230_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        grp_fu_230_p1 = temp_I_reg_522_pp0_iter6_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_230_p1 = temp_R_reg_517_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_230_p1 = temp_R_reg_517;
    end else begin
        grp_fu_230_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_234_p0 = X_I_load_reg_481;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_234_p0 = X_R_load_reg_475;
    end else begin
        grp_fu_234_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_238_p0 = X_R_load_reg_475;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_238_p0 = X_I_load_reg_481;
    end else begin
        grp_fu_238_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_242_p0 = tmp_i_i_reg_414;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_242_p0 = tmp_2_reg_380;
    end else begin
        grp_fu_242_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_bit_reverse_fu_217_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln50_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln57_fu_301_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b0 == ap_block_state33_on_subcall_done) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_fu_332_p2 == 1'd0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_fu_332_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DFTpts_fu_277_p2 = 11'd1 << zext_ln50_fu_273_p1;

assign X_I_d1 = tmp_11_reg_543;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_pp0 = (((1'b1 == ap_block_pp0_stage0_subdone) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) | ((1'b1 == ap_block_pp0_stage2_subdone) & (ap_ST_fsm_pp0_stage2 == ap_CS_fsm)) | ((1'b1 == ap_block_pp0_stage1_subdone) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_on_subcall_done = ((grp_sin_or_cos_double_s_fu_198_ap_done == 1'b0) | (grp_sin_or_cos_double_s_fu_179_ap_done == 1'b0));
end

assign ap_block_state36_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_144 = (icmp_ln63_fu_332_p2 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_146 = (icmp_ln63_fu_332_p2 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_151 = (icmp_ln63_reg_444 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_152 = (icmp_ln63_reg_444 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_168 = (icmp_ln63_reg_444_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_169 = (icmp_ln63_reg_444_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_172 = (icmp_ln63_reg_444_pp0_iter2_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_173 = (icmp_ln63_reg_444_pp0_iter2_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_184 = (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_186 = (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_187 = (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_188 = (icmp_ln63_reg_444_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_190 = (icmp_ln63_reg_444_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_192 = (icmp_ln63_reg_444_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_195 = (icmp_ln63_reg_444_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_204 = (icmp_ln63_reg_444_pp0_iter8_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state36_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state37_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state42_pp0_iter2_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_enable_state43_pp0_iter2_stage1 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state49_pp0_iter4_stage1 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state50_pp0_iter4_stage2 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_enable_state51_pp0_iter5_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_enable_state52_pp0_iter5_stage1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state53_pp0_iter5_stage2 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_enable_state56_pp0_iter6_stage2 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter6 == 1'b1));
end

always @ (*) begin
    ap_enable_state61_pp0_iter8_stage1 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign grp_bit_reverse_fu_217_ap_start = grp_bit_reverse_fu_217_ap_start_reg;

assign grp_fu_259_p0 = DFTpts_fu_277_p2;

assign grp_sin_or_cos_double_s_fu_179_ap_start = grp_sin_or_cos_double_s_fu_179_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_179_do_cos = 1'd1;

assign grp_sin_or_cos_double_s_fu_198_ap_start = grp_sin_or_cos_double_s_fu_198_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_198_do_cos = 1'd0;

assign i_3_fu_355_p2 = ($signed(zext_ln51_reg_363) + $signed(ap_phi_mux_i_0_phi_fu_173_p4));

assign i_lower_fu_338_p2 = ($signed(ap_phi_mux_i_0_phi_fu_173_p4) + $signed(numBF_reg_385));

assign icmp_ln50_fu_267_p2 = ((stage_0_reg_134 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_301_p2 = ((i_reg_146 == trunc_ln_reg_369) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_332_p2 = (($signed(tmp_12_fu_322_p4) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign j_fu_306_p2 = (i_reg_146 + 10'd1);

assign numBF_fu_298_p1 = trunc_ln_reg_369;

assign sext_ln65_fu_343_p1 = $signed(i_lower_fu_338_p2);

assign sext_ln67_fu_349_p1 = ap_phi_mux_i_0_phi_fu_173_p4;

assign stage_fu_312_p2 = (stage_0_reg_134 + 4'd1);

assign tmp_12_fu_322_p4 = {{ap_phi_mux_i_0_phi_fu_173_p4[31:10]}};

assign zext_ln50_fu_273_p1 = stage_0_reg_134;

assign zext_ln51_fu_283_p1 = DFTpts_fu_277_p2;

assign zext_ln57_fu_318_p1 = i_reg_146;

always @ (posedge ap_clk) begin
    zext_ln51_reg_363[31:11] <= 21'b000000000000000000000;
    numBF_reg_385[31:10] <= 22'b0000000000000000000000;
end

endmodule //fft
