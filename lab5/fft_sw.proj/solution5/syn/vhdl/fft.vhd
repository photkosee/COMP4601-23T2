-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_we0 : OUT STD_LOGIC;
    X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce1 : OUT STD_LOGIC;
    X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_we0 : OUT STD_LOGIC;
    X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce1 : OUT STD_LOGIC;
    X_I_we1 : OUT STD_LOGIC;
    X_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635000,HLS_SYN_LAT=384485,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=198,HLS_SYN_FF=9396,HLS_SYN_LUT=17511,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_C01921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010001000010011000011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_state36_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln63_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_444_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_state37_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state43_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state46_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state49_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state52_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state55_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state58_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state61_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln63_reg_444_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln51_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln50_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_369 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_375 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_380 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal numBF_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numBF_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_306_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_398 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal stage_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln57_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_179_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_179_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_179_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_198_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_198_ap_done : STD_LOGIC;
    signal ap_block_state33_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_198_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i9_reg_419 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal zext_ln57_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal c_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_444_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_444_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_444_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_444_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_444_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_444_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal X_R_addr_reg_448 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_reg_448_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_reg_448_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_reg_448_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_reg_448_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_reg_453 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_reg_453_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_reg_453_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_reg_453_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_reg_453_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_458 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_458_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_458_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_458_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_458_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_458_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_458_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_464_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal X_R_load_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_load_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state38_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state41_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state44_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state47_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state50_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state53_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state56_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state59_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_s_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_load_1_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal X_I_load_1_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_517_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_517_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal temp_I_reg_522_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_522_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_522_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_load_2_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal X_I_load_2_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state36 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_179_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_179_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_179_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_198_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_198_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_198_do_cos : STD_LOGIC;
    signal grp_bit_reverse_fu_217_ap_start : STD_LOGIC;
    signal grp_bit_reverse_fu_217_ap_done : STD_LOGIC;
    signal grp_bit_reverse_fu_217_ap_idle : STD_LOGIC;
    signal grp_bit_reverse_fu_217_ap_ready : STD_LOGIC;
    signal grp_bit_reverse_fu_217_X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_217_X_R_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_217_X_R_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_217_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bit_reverse_fu_217_X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_217_X_I_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_217_X_I_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_217_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_0_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_reg_146 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal a_0_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_173_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_179_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_198_ap_start_reg : STD_LOGIC := '0';
    signal grp_bit_reverse_fu_217_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln65_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_225_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_fu_273_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal DFTpts_fu_277_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_322_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_225_ce : STD_LOGIC;
    signal grp_fu_230_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_144 : BOOLEAN;
    signal ap_enable_state36_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_151 : BOOLEAN;
    signal ap_enable_state37_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_184 : BOOLEAN;
    signal ap_enable_state49_pp0_iter4_stage1 : BOOLEAN;
    signal ap_enable_operation_195 : BOOLEAN;
    signal ap_enable_state56_pp0_iter6_stage2 : BOOLEAN;
    signal ap_enable_operation_146 : BOOLEAN;
    signal ap_enable_operation_152 : BOOLEAN;
    signal ap_enable_operation_186 : BOOLEAN;
    signal ap_enable_state50_pp0_iter4_stage2 : BOOLEAN;
    signal ap_enable_operation_204 : BOOLEAN;
    signal ap_enable_state61_pp0_iter8_stage1 : BOOLEAN;
    signal ap_enable_operation_168 : BOOLEAN;
    signal ap_enable_state42_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_172 : BOOLEAN;
    signal ap_enable_state43_pp0_iter2_stage1 : BOOLEAN;
    signal ap_enable_operation_169 : BOOLEAN;
    signal ap_enable_operation_173 : BOOLEAN;
    signal ap_enable_operation_187 : BOOLEAN;
    signal ap_enable_operation_188 : BOOLEAN;
    signal ap_enable_state51_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_190 : BOOLEAN;
    signal ap_enable_state52_pp0_iter5_stage1 : BOOLEAN;
    signal ap_enable_operation_192 : BOOLEAN;
    signal ap_enable_state53_pp0_iter5_stage2 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bit_reverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_we0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_we0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_faddfsub_32nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fmul_32ns_32njbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fptrunc_64ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fpext_32ns_64lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_ddiv_64ns_64nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_sitodp_32ns_6ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_179 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_179_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_179_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_179_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_179_ap_ready,
        t_in => x_assign_reg_408,
        do_cos => grp_sin_or_cos_double_s_fu_179_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_179_ap_return);

    grp_sin_or_cos_double_s_fu_198 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_198_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_198_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_198_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_198_ap_ready,
        t_in => x_assign_reg_408,
        do_cos => grp_sin_or_cos_double_s_fu_198_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_198_ap_return);

    grp_bit_reverse_fu_217 : component bit_reverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bit_reverse_fu_217_ap_start,
        ap_done => grp_bit_reverse_fu_217_ap_done,
        ap_idle => grp_bit_reverse_fu_217_ap_idle,
        ap_ready => grp_bit_reverse_fu_217_ap_ready,
        X_R_address0 => grp_bit_reverse_fu_217_X_R_address0,
        X_R_ce0 => grp_bit_reverse_fu_217_X_R_ce0,
        X_R_we0 => grp_bit_reverse_fu_217_X_R_we0,
        X_R_d0 => grp_bit_reverse_fu_217_X_R_d0,
        X_R_q0 => X_R_q0,
        X_I_address0 => grp_bit_reverse_fu_217_X_I_address0,
        X_I_ce0 => grp_bit_reverse_fu_217_X_I_ce0,
        X_I_we0 => grp_bit_reverse_fu_217_X_I_we0,
        X_I_d0 => grp_bit_reverse_fu_217_X_I_d0,
        X_I_q0 => X_I_q0);

    fft_faddfsub_32nsibs_U24 : component fft_faddfsub_32nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_225_p0,
        din1 => grp_fu_225_p1,
        opcode => grp_fu_225_opcode,
        ce => grp_fu_225_ce,
        dout => grp_fu_225_p2);

    fft_faddfsub_32nsibs_U25 : component fft_faddfsub_32nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_230_p0,
        din1 => grp_fu_230_p1,
        opcode => grp_fu_230_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_230_p2);

    fft_fmul_32ns_32njbC_U26 : component fft_fmul_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_234_p0,
        din1 => c_reg_434,
        ce => ap_const_logic_1,
        dout => grp_fu_234_p2);

    fft_fmul_32ns_32njbC_U27 : component fft_fmul_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => s_reg_439,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    fft_fptrunc_64ns_kbM_U28 : component fft_fptrunc_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_242_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p1);

    fft_fptrunc_64ns_kbM_U29 : component fft_fptrunc_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i9_reg_419,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p1);

    fft_fpext_32ns_64lbW_U30 : component fft_fpext_32ns_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_0_reg_158,
        ce => ap_const_logic_1,
        dout => grp_fu_248_p1);

    fft_ddiv_64ns_64nmb6_U31 : component fft_ddiv_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_C01921FB5444261E,
        din1 => tmp_reg_375,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    fft_sitodp_32ns_6ncg_U32 : component fft_sitodp_32ns_6ncg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_259_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_259_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state36))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bit_reverse_fu_217_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bit_reverse_fu_217_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_bit_reverse_fu_217_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bit_reverse_fu_217_ap_ready = ap_const_logic_1)) then 
                    grp_bit_reverse_fu_217_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_179_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_179_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    grp_sin_or_cos_double_s_fu_179_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_179_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_179_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_198_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    grp_sin_or_cos_double_s_fu_198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_198_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                a_0_reg_158 <= a_reg_424;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                a_0_reg_158 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_444 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_170 <= i_3_reg_470;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_0_reg_170 <= zext_ln57_fu_318_p1;
            end if; 
        end if;
    end process;

    i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                i_reg_146 <= j_reg_398;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_reg_146 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    stage_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_fu_301_p2 = ap_const_lv1_1))) then 
                stage_0_reg_134 <= stage_fu_312_p2;
            elsif (((grp_bit_reverse_fu_217_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                stage_0_reg_134 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_fu_332_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                X_I_addr_1_reg_464 <= sext_ln67_fu_349_p1(10 - 1 downto 0);
                X_I_addr_reg_453 <= sext_ln65_fu_343_p1(10 - 1 downto 0);
                X_R_addr_1_reg_458 <= sext_ln67_fu_349_p1(10 - 1 downto 0);
                X_R_addr_reg_448 <= sext_ln65_fu_343_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                X_I_addr_1_reg_464_pp0_iter1_reg <= X_I_addr_1_reg_464;
                X_I_addr_1_reg_464_pp0_iter2_reg <= X_I_addr_1_reg_464_pp0_iter1_reg;
                X_I_addr_1_reg_464_pp0_iter3_reg <= X_I_addr_1_reg_464_pp0_iter2_reg;
                X_I_addr_1_reg_464_pp0_iter4_reg <= X_I_addr_1_reg_464_pp0_iter3_reg;
                X_I_addr_1_reg_464_pp0_iter5_reg <= X_I_addr_1_reg_464_pp0_iter4_reg;
                X_I_addr_1_reg_464_pp0_iter6_reg <= X_I_addr_1_reg_464_pp0_iter5_reg;
                X_I_addr_1_reg_464_pp0_iter7_reg <= X_I_addr_1_reg_464_pp0_iter6_reg;
                X_I_addr_1_reg_464_pp0_iter8_reg <= X_I_addr_1_reg_464_pp0_iter7_reg;
                X_I_addr_reg_453_pp0_iter1_reg <= X_I_addr_reg_453;
                X_I_addr_reg_453_pp0_iter2_reg <= X_I_addr_reg_453_pp0_iter1_reg;
                X_I_addr_reg_453_pp0_iter3_reg <= X_I_addr_reg_453_pp0_iter2_reg;
                X_I_addr_reg_453_pp0_iter4_reg <= X_I_addr_reg_453_pp0_iter3_reg;
                X_R_addr_1_reg_458_pp0_iter1_reg <= X_R_addr_1_reg_458;
                X_R_addr_1_reg_458_pp0_iter2_reg <= X_R_addr_1_reg_458_pp0_iter1_reg;
                X_R_addr_1_reg_458_pp0_iter3_reg <= X_R_addr_1_reg_458_pp0_iter2_reg;
                X_R_addr_1_reg_458_pp0_iter4_reg <= X_R_addr_1_reg_458_pp0_iter3_reg;
                X_R_addr_1_reg_458_pp0_iter5_reg <= X_R_addr_1_reg_458_pp0_iter4_reg;
                X_R_addr_1_reg_458_pp0_iter6_reg <= X_R_addr_1_reg_458_pp0_iter5_reg;
                X_R_addr_reg_448_pp0_iter1_reg <= X_R_addr_reg_448;
                X_R_addr_reg_448_pp0_iter2_reg <= X_R_addr_reg_448_pp0_iter1_reg;
                X_R_addr_reg_448_pp0_iter3_reg <= X_R_addr_reg_448_pp0_iter2_reg;
                X_R_addr_reg_448_pp0_iter4_reg <= X_R_addr_reg_448_pp0_iter3_reg;
                icmp_ln63_reg_444 <= icmp_ln63_fu_332_p2;
                icmp_ln63_reg_444_pp0_iter1_reg <= icmp_ln63_reg_444;
                icmp_ln63_reg_444_pp0_iter2_reg <= icmp_ln63_reg_444_pp0_iter1_reg;
                icmp_ln63_reg_444_pp0_iter3_reg <= icmp_ln63_reg_444_pp0_iter2_reg;
                icmp_ln63_reg_444_pp0_iter4_reg <= icmp_ln63_reg_444_pp0_iter3_reg;
                icmp_ln63_reg_444_pp0_iter5_reg <= icmp_ln63_reg_444_pp0_iter4_reg;
                icmp_ln63_reg_444_pp0_iter6_reg <= icmp_ln63_reg_444_pp0_iter5_reg;
                icmp_ln63_reg_444_pp0_iter7_reg <= icmp_ln63_reg_444_pp0_iter6_reg;
                icmp_ln63_reg_444_pp0_iter8_reg <= icmp_ln63_reg_444_pp0_iter7_reg;
                temp_I_reg_522_pp0_iter4_reg <= temp_I_reg_522;
                temp_I_reg_522_pp0_iter5_reg <= temp_I_reg_522_pp0_iter4_reg;
                temp_I_reg_522_pp0_iter6_reg <= temp_I_reg_522_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln63_reg_444_pp0_iter2_reg = ap_const_lv1_1))) then
                X_I_load_1_reg_512 <= X_I_q1;
                X_R_load_1_reg_507 <= X_R_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_444_pp0_iter5_reg = ap_const_lv1_1))) then
                X_I_load_2_reg_538 <= X_I_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln63_reg_444 = ap_const_lv1_1))) then
                X_I_load_reg_481 <= X_I_q0;
                X_R_load_reg_475 <= X_R_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                X_R_load_2_reg_533 <= X_R_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                a_reg_424 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                c_reg_434 <= grp_fu_242_p1;
                s_reg_439 <= grp_fu_245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                e_reg_390 <= grp_fu_242_p1;
                    numBF_reg_385(9 downto 0) <= numBF_fu_298_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_fu_332_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_3_reg_470 <= i_3_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                j_reg_398 <= j_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_444_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln63_reg_444_pp0_iter6_reg = ap_const_lv1_1)))) then
                reg_262 <= grp_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                temp_I_reg_522 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_444_pp0_iter2_reg = ap_const_lv1_1))) then
                temp_R_reg_517 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                temp_R_reg_517_pp0_iter3_reg <= temp_R_reg_517;
                temp_R_reg_517_pp0_iter4_reg <= temp_R_reg_517_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_444_pp0_iter7_reg = ap_const_lv1_1))) then
                tmp_11_reg_543 <= grp_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_2_reg_380 <= grp_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1))) then
                tmp_6_reg_528 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln63_reg_444_pp0_iter1_reg = ap_const_lv1_1))) then
                tmp_7_reg_487 <= grp_fu_234_p2;
                tmp_8_reg_492 <= grp_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter1_reg = ap_const_lv1_1))) then
                tmp_9_reg_497 <= grp_fu_234_p2;
                tmp_s_reg_502 <= grp_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state33_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                tmp_i_i9_reg_419 <= grp_sin_or_cos_double_s_fu_198_ap_return;
                tmp_i_i_reg_414 <= grp_sin_or_cos_double_s_fu_179_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_375 <= grp_fu_259_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_267_p2 = ap_const_lv1_0))) then
                trunc_ln_reg_369 <= DFTpts_fu_277_p2(10 downto 1);
                    zext_ln51_reg_363(10 downto 0) <= zext_ln51_fu_283_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                x_assign_reg_408 <= grp_fu_248_p1;
            end if;
        end if;
    end process;
    zext_ln51_reg_363(31 downto 11) <= "000000000000000000000";
    numBF_reg_385(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state3, icmp_ln50_fu_267_p2, ap_CS_fsm_state31, icmp_ln57_fu_301_p2, ap_CS_fsm_state33, ap_block_state33_on_subcall_done, icmp_ln63_fu_332_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter8, grp_bit_reverse_fu_217_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_bit_reverse_fu_217_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_267_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_fu_301_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_boolean_0 = ap_block_state33_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_fu_332_p2 = ap_const_lv1_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_fu_332_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DFTpts_fu_277_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv11_1),to_integer(unsigned('0' & zext_ln50_fu_273_p1(11-1 downto 0)))));

    X_I_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, X_I_addr_reg_453_pp0_iter4_reg, X_I_addr_1_reg_464_pp0_iter5_reg, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter5, grp_bit_reverse_fu_217_X_I_address0, ap_CS_fsm_state2, ap_block_pp0_stage0, sext_ln65_fu_343_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_I_address0 <= X_I_addr_1_reg_464_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            X_I_address0 <= X_I_addr_reg_453_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_I_address0 <= sext_ln65_fu_343_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_address0 <= grp_bit_reverse_fu_217_X_I_address0;
        else 
            X_I_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, X_I_addr_1_reg_464_pp0_iter1_reg, X_I_addr_1_reg_464_pp0_iter8_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_I_address1 <= X_I_addr_1_reg_464_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_I_address1 <= X_I_addr_1_reg_464_pp0_iter1_reg;
        else 
            X_I_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter5, grp_bit_reverse_fu_217_X_I_ce0, ap_CS_fsm_state2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            X_I_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_ce0 <= grp_bit_reverse_fu_217_X_I_ce0;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            X_I_ce1 <= ap_const_logic_1;
        else 
            X_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_d0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, tmp_6_reg_528, grp_bit_reverse_fu_217_X_I_d0, ap_CS_fsm_state2, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            X_I_d0 <= tmp_6_reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_d0 <= grp_bit_reverse_fu_217_X_I_d0;
        else 
            X_I_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    X_I_d1 <= tmp_11_reg_543;

    X_I_we0_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln63_reg_444_pp0_iter4_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, grp_bit_reverse_fu_217_X_I_we0, ap_CS_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1))) then 
            X_I_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_we0 <= grp_bit_reverse_fu_217_X_I_we0;
        else 
            X_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln63_reg_444_pp0_iter8_reg, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln63_reg_444_pp0_iter8_reg = ap_const_lv1_1))) then 
            X_I_we1 <= ap_const_logic_1;
        else 
            X_I_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter6, X_R_addr_reg_448_pp0_iter4_reg, X_R_addr_1_reg_458_pp0_iter6_reg, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, grp_bit_reverse_fu_217_X_R_address0, ap_CS_fsm_state2, ap_block_pp0_stage0, sext_ln65_fu_343_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            X_R_address0 <= X_R_addr_1_reg_458_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_R_address0 <= X_R_addr_reg_448_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_R_address0 <= sext_ln65_fu_343_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_address0 <= grp_bit_reverse_fu_217_X_R_address0;
        else 
            X_R_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, X_R_addr_1_reg_458_pp0_iter1_reg, X_R_addr_1_reg_458_pp0_iter4_reg, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            X_R_address1 <= X_R_addr_1_reg_458_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_R_address1 <= X_R_addr_1_reg_458_pp0_iter1_reg;
        else 
            X_R_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter6, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, grp_bit_reverse_fu_217_X_R_ce0, ap_CS_fsm_state2)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            X_R_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_ce0 <= grp_bit_reverse_fu_217_X_R_ce0;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            X_R_ce1 <= ap_const_logic_1;
        else 
            X_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_d0_assign_proc : process(reg_262, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, grp_bit_reverse_fu_217_X_R_d0, ap_CS_fsm_state2, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then 
            X_R_d0 <= reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_d0 <= grp_bit_reverse_fu_217_X_R_d0;
        else 
            X_R_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter6, ap_block_pp0_stage1_11001, icmp_ln63_reg_444_pp0_iter6_reg, icmp_ln63_reg_444_pp0_iter4_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, grp_bit_reverse_fu_217_X_R_we0, ap_CS_fsm_state2)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter6_reg = ap_const_lv1_1)))) then 
            X_R_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_we0 <= grp_bit_reverse_fu_217_X_R_we0;
        else 
            X_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(35);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(36);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(37);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(38);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
                ap_block_pp0 <= (((ap_const_boolean_1 = ap_block_pp0_stage0_subdone) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp0_stage2_subdone) and (ap_ST_fsm_pp0_stage2 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp0_stage1_subdone) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_179_ap_done, grp_sin_or_cos_double_s_fu_198_ap_done)
    begin
                ap_block_state33_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_198_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_179_ap_done = ap_const_logic_0));
    end process;

        ap_block_state36_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state36_assign_proc : process(icmp_ln63_fu_332_p2)
    begin
        if ((icmp_ln63_fu_332_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln50_fu_267_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_267_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_144_assign_proc : process(icmp_ln63_fu_332_p2)
    begin
                ap_enable_operation_144 <= (icmp_ln63_fu_332_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_146_assign_proc : process(icmp_ln63_fu_332_p2)
    begin
                ap_enable_operation_146 <= (icmp_ln63_fu_332_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_151_assign_proc : process(icmp_ln63_reg_444)
    begin
                ap_enable_operation_151 <= (icmp_ln63_reg_444 = ap_const_lv1_1);
    end process;


    ap_enable_operation_152_assign_proc : process(icmp_ln63_reg_444)
    begin
                ap_enable_operation_152 <= (icmp_ln63_reg_444 = ap_const_lv1_1);
    end process;


    ap_enable_operation_168_assign_proc : process(icmp_ln63_reg_444_pp0_iter1_reg)
    begin
                ap_enable_operation_168 <= (icmp_ln63_reg_444_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_169_assign_proc : process(icmp_ln63_reg_444_pp0_iter1_reg)
    begin
                ap_enable_operation_169 <= (icmp_ln63_reg_444_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_172_assign_proc : process(icmp_ln63_reg_444_pp0_iter2_reg)
    begin
                ap_enable_operation_172 <= (icmp_ln63_reg_444_pp0_iter2_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_173_assign_proc : process(icmp_ln63_reg_444_pp0_iter2_reg)
    begin
                ap_enable_operation_173 <= (icmp_ln63_reg_444_pp0_iter2_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_184_assign_proc : process(icmp_ln63_reg_444_pp0_iter4_reg)
    begin
                ap_enable_operation_184 <= (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_186_assign_proc : process(icmp_ln63_reg_444_pp0_iter4_reg)
    begin
                ap_enable_operation_186 <= (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_187_assign_proc : process(icmp_ln63_reg_444_pp0_iter4_reg)
    begin
                ap_enable_operation_187 <= (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_188_assign_proc : process(icmp_ln63_reg_444_pp0_iter4_reg)
    begin
                ap_enable_operation_188 <= (icmp_ln63_reg_444_pp0_iter4_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_190_assign_proc : process(icmp_ln63_reg_444_pp0_iter5_reg)
    begin
                ap_enable_operation_190 <= (icmp_ln63_reg_444_pp0_iter5_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_192_assign_proc : process(icmp_ln63_reg_444_pp0_iter5_reg)
    begin
                ap_enable_operation_192 <= (icmp_ln63_reg_444_pp0_iter5_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_195_assign_proc : process(icmp_ln63_reg_444_pp0_iter6_reg)
    begin
                ap_enable_operation_195 <= (icmp_ln63_reg_444_pp0_iter6_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_204_assign_proc : process(icmp_ln63_reg_444_pp0_iter8_reg)
    begin
                ap_enable_operation_204 <= (icmp_ln63_reg_444_pp0_iter8_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state36_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state36_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state37_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state37_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state42_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state42_pp0_iter2_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_enable_state43_pp0_iter2_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state43_pp0_iter2_stage1 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state49_pp0_iter4_stage1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state49_pp0_iter4_stage1 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state50_pp0_iter4_stage2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2)
    begin
                ap_enable_state50_pp0_iter4_stage2 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_enable_state51_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state51_pp0_iter5_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_enable_state52_pp0_iter5_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state52_pp0_iter5_stage1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state53_pp0_iter5_stage2_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state53_pp0_iter5_stage2 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_enable_state56_pp0_iter6_stage2_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2)
    begin
                ap_enable_state56_pp0_iter6_stage2 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1));
    end process;


    ap_enable_state61_pp0_iter8_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter8)
    begin
                ap_enable_state61_pp0_iter8_stage1 <= ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_173_p4_assign_proc : process(i_0_reg_170, ap_CS_fsm_pp0_stage0, icmp_ln63_reg_444, i_3_reg_470, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_444 = ap_const_lv1_1))) then 
            ap_phi_mux_i_0_phi_fu_173_p4 <= i_3_reg_470;
        else 
            ap_phi_mux_i_0_phi_fu_173_p4 <= i_0_reg_170;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln50_fu_267_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_267_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_bit_reverse_fu_217_ap_start <= grp_bit_reverse_fu_217_ap_start_reg;

    grp_fu_225_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_block_state33_on_subcall_done, ap_CS_fsm_state34, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_state33_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_225_ce <= ap_const_logic_1;
        else 
            grp_fu_225_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_225_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln63_reg_444_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state31, icmp_ln57_fu_301_p2, icmp_ln63_reg_444_pp0_iter1_reg, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_00001, ap_block_pp0_stage2_00001, ap_block_pp0_stage1_00001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln63_reg_444_pp0_iter3_reg = ap_const_lv1_1)))) then 
            grp_fu_225_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_fu_301_p2 = ap_const_lv1_0)))) then 
            grp_fu_225_opcode <= ap_const_lv2_0;
        else 
            grp_fu_225_opcode <= "XX";
        end if; 
    end process;


    grp_fu_225_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state31, tmp_7_reg_487, ap_enable_reg_pp0_iter1, tmp_9_reg_497, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, X_I_load_1_reg_512, ap_enable_reg_pp0_iter3, a_0_reg_158, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_225_p0 <= X_I_load_1_reg_512;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_225_p0 <= tmp_9_reg_497;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_225_p0 <= tmp_7_reg_487;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_225_p0 <= a_0_reg_158;
        else 
            grp_fu_225_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_225_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, e_reg_390, ap_CS_fsm_state31, ap_enable_reg_pp0_iter1, tmp_8_reg_492, ap_CS_fsm_pp0_stage2, tmp_s_reg_502, ap_enable_reg_pp0_iter2, temp_I_reg_522, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_225_p1 <= temp_I_reg_522;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_225_p1 <= tmp_s_reg_502;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_225_p1 <= tmp_8_reg_492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_225_p1 <= e_reg_390;
        else 
            grp_fu_225_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_230_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter6, icmp_ln63_reg_444_pp0_iter6_reg, icmp_ln63_reg_444_pp0_iter2_reg, icmp_ln63_reg_444_pp0_iter5_reg, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_00001, ap_block_pp0_stage2_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter2_reg = ap_const_lv1_1))) then 
            grp_fu_230_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln63_reg_444_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln63_reg_444_pp0_iter5_reg = ap_const_lv1_1)))) then 
            grp_fu_230_opcode <= ap_const_lv2_0;
        else 
            grp_fu_230_opcode <= "XX";
        end if; 
    end process;


    grp_fu_230_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, X_R_load_1_reg_507, ap_enable_reg_pp0_iter3, X_R_load_2_reg_533, ap_enable_reg_pp0_iter5, X_I_load_2_reg_538, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            grp_fu_230_p0 <= X_I_load_2_reg_538;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_230_p0 <= X_R_load_2_reg_533;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_230_p0 <= X_R_load_1_reg_507;
        else 
            grp_fu_230_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_230_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, temp_R_reg_517, temp_R_reg_517_pp0_iter4_reg, ap_enable_reg_pp0_iter3, temp_I_reg_522_pp0_iter6_reg, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            grp_fu_230_p1 <= temp_I_reg_522_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_230_p1 <= temp_R_reg_517_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_230_p1 <= temp_R_reg_517;
        else 
            grp_fu_230_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_234_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, X_R_load_reg_475, X_I_load_reg_481, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_234_p0 <= X_I_load_reg_481;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_234_p0 <= X_R_load_reg_475;
        else 
            grp_fu_234_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_238_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, X_R_load_reg_475, X_I_load_reg_481, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_238_p0 <= X_R_load_reg_475;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_238_p0 <= X_I_load_reg_481;
        else 
            grp_fu_238_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_242_p0_assign_proc : process(tmp_2_reg_380, tmp_i_i_reg_414, ap_CS_fsm_state34, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_242_p0 <= tmp_i_i_reg_414;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_242_p0 <= tmp_2_reg_380;
        else 
            grp_fu_242_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_259_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_277_p2),32));
    grp_sin_or_cos_double_s_fu_179_ap_start <= grp_sin_or_cos_double_s_fu_179_ap_start_reg;
    grp_sin_or_cos_double_s_fu_179_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_198_ap_start <= grp_sin_or_cos_double_s_fu_198_ap_start_reg;
    grp_sin_or_cos_double_s_fu_198_do_cos <= ap_const_logic_0;
    i_3_fu_355_p2 <= std_logic_vector(unsigned(zext_ln51_reg_363) + unsigned(ap_phi_mux_i_0_phi_fu_173_p4));
    i_lower_fu_338_p2 <= std_logic_vector(signed(ap_phi_mux_i_0_phi_fu_173_p4) + signed(numBF_reg_385));
    icmp_ln50_fu_267_p2 <= "1" when (stage_0_reg_134 = ap_const_lv4_B) else "0";
    icmp_ln57_fu_301_p2 <= "1" when (i_reg_146 = trunc_ln_reg_369) else "0";
    icmp_ln63_fu_332_p2 <= "1" when (signed(tmp_12_fu_322_p4) < signed(ap_const_lv22_1)) else "0";
    j_fu_306_p2 <= std_logic_vector(unsigned(i_reg_146) + unsigned(ap_const_lv10_1));
    numBF_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_369),32));
        sext_ln65_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_338_p2),64));

        sext_ln67_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_i_0_phi_fu_173_p4),64));

    stage_fu_312_p2 <= std_logic_vector(unsigned(stage_0_reg_134) + unsigned(ap_const_lv4_1));
    tmp_12_fu_322_p4 <= ap_phi_mux_i_0_phi_fu_173_p4(31 downto 10);
    zext_ln50_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_0_reg_134),11));
    zext_ln51_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_277_p2),32));
    zext_ln57_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_146),32));
end behav;
