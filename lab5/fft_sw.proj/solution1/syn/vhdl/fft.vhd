-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_we0 : OUT STD_LOGIC;
    X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_we0 : OUT STD_LOGIC;
    X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=204,HLS_SYN_FF=9119,HLS_SYN_LUT=17576,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (55 downto 0) := "00000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (55 downto 0) := "00000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (55 downto 0) := "00000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (55 downto 0) := "00000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (55 downto 0) := "00000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (55 downto 0) := "00000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (55 downto 0) := "00001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (55 downto 0) := "00010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (55 downto 0) := "00100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (55 downto 0) := "01000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (55 downto 0) := "10000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_C01921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010001000010011000011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln50_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_381 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_387 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_392 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal numBF_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numBF_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal j_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_415 : STD_LOGIC_VECTOR (9 downto 0);
    signal stage_fu_328_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln57_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_162_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_431 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_162_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_162_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_181_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_181_ap_done : STD_LOGIC;
    signal ap_block_state33_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_181_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i9_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal c_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_addr_reg_461 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln63_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_I_addr_reg_466 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_1_reg_471 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_1_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_6_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_162_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_162_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_162_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_181_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_181_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_181_do_cos : STD_LOGIC;
    signal grp_bit_reverse_fu_200_ap_start : STD_LOGIC;
    signal grp_bit_reverse_fu_200_ap_done : STD_LOGIC;
    signal grp_bit_reverse_fu_200_ap_idle : STD_LOGIC;
    signal grp_bit_reverse_fu_200_ap_ready : STD_LOGIC;
    signal grp_bit_reverse_fu_200_X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_200_X_R_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_200_X_R_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_200_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bit_reverse_fu_200_X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_200_X_I_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_200_X_I_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_200_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_0_reg_118 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_reg_130 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_0_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_162_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_181_ap_start_reg : STD_LOGIC := '0';
    signal grp_bit_reverse_fu_200_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln65_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_fu_279_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal DFTpts_fu_289_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_334_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_208_ce : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_213_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (55 downto 0);

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bit_reverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_we0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_we0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_faddfsub_32nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fmul_32ns_32njbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fptrunc_64ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fpext_32ns_64lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_ddiv_64ns_64nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_sitodp_32ns_6ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_162 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_162_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_162_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_162_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_162_ap_ready,
        t_in => x_assign_reg_425,
        do_cos => grp_sin_or_cos_double_s_fu_162_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_162_ap_return);

    grp_sin_or_cos_double_s_fu_181 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_181_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_181_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_181_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_181_ap_ready,
        t_in => x_assign_reg_425,
        do_cos => grp_sin_or_cos_double_s_fu_181_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_181_ap_return);

    grp_bit_reverse_fu_200 : component bit_reverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bit_reverse_fu_200_ap_start,
        ap_done => grp_bit_reverse_fu_200_ap_done,
        ap_idle => grp_bit_reverse_fu_200_ap_idle,
        ap_ready => grp_bit_reverse_fu_200_ap_ready,
        X_R_address0 => grp_bit_reverse_fu_200_X_R_address0,
        X_R_ce0 => grp_bit_reverse_fu_200_X_R_ce0,
        X_R_we0 => grp_bit_reverse_fu_200_X_R_we0,
        X_R_d0 => grp_bit_reverse_fu_200_X_R_d0,
        X_R_q0 => X_R_q0,
        X_I_address0 => grp_bit_reverse_fu_200_X_I_address0,
        X_I_ce0 => grp_bit_reverse_fu_200_X_I_ce0,
        X_I_we0 => grp_bit_reverse_fu_200_X_I_we0,
        X_I_d0 => grp_bit_reverse_fu_200_X_I_d0,
        X_I_q0 => X_I_q0);

    fft_faddfsub_32nsibs_U24 : component fft_faddfsub_32nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        opcode => grp_fu_208_opcode,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p2);

    fft_faddfsub_32nsibs_U25 : component fft_faddfsub_32nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        opcode => grp_fu_213_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    fft_fmul_32ns_32njbC_U26 : component fft_fmul_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_253,
        din1 => c_reg_446,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    fft_fmul_32ns_32njbC_U27 : component fft_fmul_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_260,
        din1 => s_reg_452,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    fft_fmul_32ns_32njbC_U28 : component fft_fmul_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_260,
        din1 => c_reg_446,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    fft_fmul_32ns_32njbC_U29 : component fft_fmul_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_253,
        din1 => s_reg_452,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);

    fft_fptrunc_64ns_kbM_U30 : component fft_fptrunc_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_233_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p1);

    fft_fptrunc_64ns_kbM_U31 : component fft_fptrunc_64ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i9_reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p1);

    fft_fpext_32ns_64lbW_U32 : component fft_fpext_32ns_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_0_reg_141,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p1);

    fft_ddiv_64ns_64nmb6_U33 : component fft_ddiv_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_C01921FB5444261E,
        din1 => tmp_reg_387,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    fft_sitodp_32ns_6ncg_U34 : component fft_sitodp_32ns_6ncg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_250_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bit_reverse_fu_200_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bit_reverse_fu_200_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_bit_reverse_fu_200_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bit_reverse_fu_200_ap_ready = ap_const_logic_1)) then 
                    grp_bit_reverse_fu_200_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_162_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_162_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    grp_sin_or_cos_double_s_fu_162_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_162_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_162_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_181_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_181_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    grp_sin_or_cos_double_s_fu_181_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_181_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_181_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln63_fu_344_p2 = ap_const_lv1_0))) then 
                a_0_reg_141 <= a_reg_441;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                a_0_reg_141 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                i_0_reg_153 <= i_3_reg_481;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_0_reg_153 <= i_cast_reg_407;
            end if; 
        end if;
    end process;

    i_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln63_fu_344_p2 = ap_const_lv1_0))) then 
                i_reg_130 <= j_reg_415;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_reg_130 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    stage_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_fu_317_p2 = ap_const_lv1_1))) then 
                stage_0_reg_118 <= stage_fu_328_p2;
            elsif (((grp_bit_reverse_fu_200_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                stage_0_reg_118 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln63_fu_344_p2 = ap_const_lv1_1))) then
                X_I_addr_1_reg_476 <= sext_ln67_fu_361_p1(10 - 1 downto 0);
                X_I_addr_reg_466 <= sext_ln65_fu_355_p1(10 - 1 downto 0);
                X_R_addr_1_reg_471 <= sext_ln67_fu_361_p1(10 - 1 downto 0);
                X_R_addr_reg_461 <= sext_ln65_fu_355_p1(10 - 1 downto 0);
                i_3_reg_481 <= i_3_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                a_reg_441 <= grp_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                c_reg_446 <= grp_fu_233_p1;
                s_reg_452 <= grp_fu_236_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                e_reg_402 <= grp_fu_233_p1;
                    numBF_reg_397(9 downto 0) <= numBF_fu_310_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                    i_cast_reg_407(9 downto 0) <= i_cast_fu_313_p1(9 downto 0);
                j_reg_415 <= j_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_253 <= X_R_q0;
                reg_260 <= X_I_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_267 <= grp_fu_208_p2;
                reg_273 <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                tmp_1_reg_506 <= grp_fu_208_p2;
                tmp_6_reg_511 <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_2_reg_392 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_7_reg_486 <= grp_fu_217_p2;
                tmp_8_reg_491 <= grp_fu_221_p2;
                tmp_9_reg_496 <= grp_fu_225_p2;
                tmp_s_reg_501 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_on_subcall_done))) then
                tmp_i_i9_reg_436 <= grp_sin_or_cos_double_s_fu_181_ap_return;
                tmp_i_i_reg_431 <= grp_sin_or_cos_double_s_fu_162_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_387 <= grp_fu_250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_283_p2 = ap_const_lv1_0))) then
                trunc_ln_reg_381 <= DFTpts_fu_289_p2(10 downto 1);
                    zext_ln51_reg_375(10 downto 0) <= zext_ln51_fu_295_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                x_assign_reg_425 <= grp_fu_239_p1;
            end if;
        end if;
    end process;
    zext_ln51_reg_375(31 downto 11) <= "000000000000000000000";
    numBF_reg_397(31 downto 10) <= "0000000000000000000000";
    i_cast_reg_407(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln50_fu_283_p2, ap_CS_fsm_state31, icmp_ln57_fu_317_p2, ap_CS_fsm_state33, ap_block_state33_on_subcall_done, ap_CS_fsm_state36, icmp_ln63_fu_344_p2, grp_bit_reverse_fu_200_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_bit_reverse_fu_200_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_283_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln63_fu_344_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DFTpts_fu_289_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv11_1),to_integer(unsigned('0' & zext_ln50_fu_279_p1(11-1 downto 0)))));

    X_I_address0_assign_proc : process(ap_CS_fsm_state36, X_I_addr_reg_466, X_I_addr_1_reg_476, grp_bit_reverse_fu_200_X_I_address0, ap_CS_fsm_state2, ap_CS_fsm_state56, sext_ln65_fu_355_p1, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            X_I_address0 <= X_I_addr_reg_466;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            X_I_address0 <= X_I_addr_1_reg_476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            X_I_address0 <= sext_ln65_fu_355_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_address0 <= grp_bit_reverse_fu_200_X_I_address0;
        else 
            X_I_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_ce0_assign_proc : process(ap_CS_fsm_state36, grp_bit_reverse_fu_200_X_I_ce0, ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            X_I_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_ce0 <= grp_bit_reverse_fu_200_X_I_ce0;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_d0_assign_proc : process(reg_273, tmp_6_reg_511, grp_bit_reverse_fu_200_X_I_d0, ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            X_I_d0 <= reg_273;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            X_I_d0 <= tmp_6_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_d0 <= grp_bit_reverse_fu_200_X_I_d0;
        else 
            X_I_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_I_we0_assign_proc : process(grp_bit_reverse_fu_200_X_I_we0, ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            X_I_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_we0 <= grp_bit_reverse_fu_200_X_I_we0;
        else 
            X_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_address0_assign_proc : process(X_R_addr_reg_461, ap_CS_fsm_state36, X_R_addr_1_reg_471, grp_bit_reverse_fu_200_X_R_address0, ap_CS_fsm_state2, ap_CS_fsm_state56, sext_ln65_fu_355_p1, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            X_R_address0 <= X_R_addr_reg_461;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            X_R_address0 <= X_R_addr_1_reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            X_R_address0 <= sext_ln65_fu_355_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_address0 <= grp_bit_reverse_fu_200_X_R_address0;
        else 
            X_R_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_ce0_assign_proc : process(ap_CS_fsm_state36, grp_bit_reverse_fu_200_X_R_ce0, ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            X_R_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_ce0 <= grp_bit_reverse_fu_200_X_R_ce0;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_d0_assign_proc : process(reg_267, tmp_1_reg_506, grp_bit_reverse_fu_200_X_R_d0, ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            X_R_d0 <= reg_267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            X_R_d0 <= tmp_1_reg_506;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_d0 <= grp_bit_reverse_fu_200_X_R_d0;
        else 
            X_R_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_we0_assign_proc : process(grp_bit_reverse_fu_200_X_R_we0, ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            X_R_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_we0 <= grp_bit_reverse_fu_200_X_R_we0;
        else 
            X_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state33_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_162_ap_done, grp_sin_or_cos_double_s_fu_181_ap_done)
    begin
                ap_block_state33_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_181_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_162_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln50_fu_283_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_283_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln50_fu_283_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln50_fu_283_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_bit_reverse_fu_200_ap_start <= grp_bit_reverse_fu_200_ap_start_reg;

    grp_fu_208_ce_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state55, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_block_state33_on_subcall_done, ap_CS_fsm_state34, ap_CS_fsm_state48, ap_CS_fsm_state43, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state53, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_on_subcall_done)))) then 
            grp_fu_208_ce <= ap_const_logic_1;
        else 
            grp_fu_208_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_208_opcode_assign_proc : process(ap_CS_fsm_state31, icmp_ln57_fu_317_p2, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_fu_208_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_fu_317_p2 = ap_const_lv1_0)))) then 
            grp_fu_208_opcode <= ap_const_lv2_0;
        else 
            grp_fu_208_opcode <= "XX";
        end if; 
    end process;


    grp_fu_208_p0_assign_proc : process(reg_253, ap_CS_fsm_state31, tmp_7_reg_486, a_0_reg_141, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_208_p0 <= reg_253;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_208_p0 <= tmp_7_reg_486;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_208_p0 <= a_0_reg_141;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p1_assign_proc : process(reg_267, e_reg_402, ap_CS_fsm_state31, tmp_8_reg_491, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_208_p1 <= reg_267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_208_p1 <= tmp_8_reg_491;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_208_p1 <= e_reg_402;
        else 
            grp_fu_208_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_opcode_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_213_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_fu_213_opcode <= ap_const_lv2_0;
        else 
            grp_fu_213_opcode <= "XX";
        end if; 
    end process;


    grp_fu_213_p0_assign_proc : process(reg_260, tmp_9_reg_496, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_213_p0 <= reg_260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_213_p0 <= tmp_9_reg_496;
        else 
            grp_fu_213_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_p1_assign_proc : process(reg_273, tmp_s_reg_501, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_213_p1 <= reg_273;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_213_p1 <= tmp_s_reg_501;
        else 
            grp_fu_213_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p0_assign_proc : process(tmp_2_reg_392, tmp_i_i_reg_431, ap_CS_fsm_state34, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_233_p0 <= tmp_i_i_reg_431;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_233_p0 <= tmp_2_reg_392;
        else 
            grp_fu_233_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_250_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_289_p2),32));
    grp_sin_or_cos_double_s_fu_162_ap_start <= grp_sin_or_cos_double_s_fu_162_ap_start_reg;
    grp_sin_or_cos_double_s_fu_162_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_181_ap_start <= grp_sin_or_cos_double_s_fu_181_ap_start_reg;
    grp_sin_or_cos_double_s_fu_181_do_cos <= ap_const_logic_0;
    i_3_fu_367_p2 <= std_logic_vector(unsigned(zext_ln51_reg_375) + unsigned(i_0_reg_153));
    i_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_130),32));
    i_lower_fu_350_p2 <= std_logic_vector(signed(i_0_reg_153) + signed(numBF_reg_397));
    icmp_ln50_fu_283_p2 <= "1" when (stage_0_reg_118 = ap_const_lv4_B) else "0";
    icmp_ln57_fu_317_p2 <= "1" when (i_reg_130 = trunc_ln_reg_381) else "0";
    icmp_ln63_fu_344_p2 <= "1" when (signed(tmp_11_fu_334_p4) < signed(ap_const_lv22_1)) else "0";
    j_fu_322_p2 <= std_logic_vector(unsigned(i_reg_130) + unsigned(ap_const_lv10_1));
    numBF_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_381),32));
        sext_ln65_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_350_p2),64));

        sext_ln67_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_153),64));

    stage_fu_328_p2 <= std_logic_vector(unsigned(stage_0_reg_118) + unsigned(ap_const_lv4_1));
    tmp_11_fu_334_p4 <= i_0_reg_153(31 downto 10);
    zext_ln50_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_0_reg_118),11));
    zext_ln51_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_289_p2),32));
end behav;
