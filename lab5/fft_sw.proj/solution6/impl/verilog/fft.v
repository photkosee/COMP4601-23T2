// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635000,HLS_SYN_LAT=379435,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=60,HLS_SYN_FF=7657,HLS_SYN_LUT=18836,HLS_VERSION=2020_1}" *)

module fft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_V_address0,
        X_R_V_ce0,
        X_R_V_we0,
        X_R_V_d0,
        X_R_V_q0,
        X_R_V_address1,
        X_R_V_ce1,
        X_R_V_we1,
        X_R_V_d1,
        X_R_V_q1,
        X_I_V_address0,
        X_I_V_ce0,
        X_I_V_we0,
        X_I_V_d0,
        X_I_V_q0,
        X_I_V_address1,
        X_I_V_ce1,
        X_I_V_we1,
        X_I_V_d1,
        X_I_V_q1
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_pp0_stage0 = 37'd8589934592;
parameter    ap_ST_fsm_pp0_stage1 = 37'd17179869184;
parameter    ap_ST_fsm_pp0_stage2 = 37'd34359738368;
parameter    ap_ST_fsm_state40 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] X_R_V_address0;
output   X_R_V_ce0;
output   X_R_V_we0;
output  [21:0] X_R_V_d0;
input  [21:0] X_R_V_q0;
output  [9:0] X_R_V_address1;
output   X_R_V_ce1;
output   X_R_V_we1;
output  [21:0] X_R_V_d1;
input  [21:0] X_R_V_q1;
output  [9:0] X_I_V_address0;
output   X_I_V_ce0;
output   X_I_V_we0;
output  [21:0] X_I_V_d0;
input  [21:0] X_I_V_q0;
output  [9:0] X_I_V_address1;
output   X_I_V_ce1;
output   X_I_V_we1;
output  [21:0] X_I_V_d1;
input  [21:0] X_I_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] X_R_V_address0;
reg X_R_V_ce0;
reg X_R_V_we0;
reg[21:0] X_R_V_d0;
reg[9:0] X_R_V_address1;
reg X_R_V_ce1;
reg X_R_V_we1;
reg[9:0] X_I_V_address0;
reg X_I_V_ce0;
reg X_I_V_we0;
reg[21:0] X_I_V_d0;
reg[9:0] X_I_V_address1;
reg X_I_V_ce1;
reg X_I_V_we1;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] i_0_reg_253;
wire   [31:0] zext_ln51_fu_332_p1;
reg   [31:0] zext_ln51_reg_1655;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln50_fu_316_p2;
reg   [9:0] trunc_ln_reg_1661;
wire   [63:0] grp_fu_313_p1;
reg   [63:0] tmp_reg_1667;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_308_p2;
reg   [63:0] v_assign_reg_1672;
wire    ap_CS_fsm_state28;
wire   [31:0] numBF_fu_347_p1;
reg   [31:0] numBF_reg_1677;
wire    ap_CS_fsm_state29;
wire   [21:0] e_V_fu_621_p3;
reg   [21:0] e_V_reg_1682;
wire   [9:0] j_fu_634_p2;
reg   [9:0] j_reg_1690;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln885_fu_640_p2;
reg   [0:0] icmp_ln885_reg_1695;
wire   [0:0] icmp_ln57_fu_629_p2;
wire   [0:0] p_Result_32_fu_646_p3;
reg   [0:0] p_Result_32_reg_1700;
reg   [62:0] m_5_reg_1705;
reg   [0:0] tmp_15_reg_1710;
wire   [10:0] trunc_ln893_fu_894_p1;
reg   [10:0] trunc_ln893_reg_1715;
wire   [21:0] a_V_fu_898_p2;
reg   [21:0] a_V_reg_1720;
wire   [3:0] stage_fu_903_p2;
wire   [63:0] select_ln885_fu_953_p3;
reg   [63:0] select_ln885_reg_1730;
wire    ap_CS_fsm_state31;
wire   [63:0] grp_sin_or_cos_double_s_fu_262_ap_return;
reg   [63:0] v_assign_1_reg_1736;
wire    ap_CS_fsm_state32;
wire    grp_sin_or_cos_double_s_fu_262_ap_ready;
wire    grp_sin_or_cos_double_s_fu_262_ap_done;
wire    grp_sin_or_cos_double_s_fu_281_ap_ready;
wire    grp_sin_or_cos_double_s_fu_281_ap_done;
reg    ap_block_state32_on_subcall_done;
wire   [63:0] grp_sin_or_cos_double_s_fu_281_ap_return;
reg   [63:0] v_assign_2_reg_1741;
wire   [31:0] zext_ln891_fu_962_p1;
wire    ap_CS_fsm_state33;
wire  signed [32:0] sext_ln1118_1_fu_1524_p1;
reg  signed [32:0] sext_ln1118_1_reg_1751;
wire  signed [32:0] sext_ln1118_3_fu_1528_p1;
reg  signed [32:0] sext_ln1118_3_reg_1757;
wire   [0:0] icmp_ln63_fu_1542_p2;
reg   [0:0] icmp_ln63_reg_1763;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state34_pp0_stage0_iter0;
wire    ap_block_state37_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln63_reg_1763_pp0_iter1_reg;
reg   [9:0] X_R_V_addr_reg_1767;
reg   [9:0] X_I_V_addr_reg_1772;
reg   [9:0] X_R_V_addr_1_reg_1778;
reg   [9:0] X_R_V_addr_1_reg_1778_pp0_iter1_reg;
reg   [9:0] X_I_V_addr_1_reg_1784;
reg   [9:0] X_I_V_addr_1_reg_1784_pp0_iter1_reg;
wire   [31:0] i_3_fu_1565_p2;
reg   [31:0] i_3_reg_1790;
reg    ap_enable_reg_pp0_iter0;
wire  signed [32:0] sext_ln1118_fu_1570_p1;
reg  signed [32:0] sext_ln1118_reg_1795;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state35_pp0_stage1_iter0;
wire    ap_block_state38_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire  signed [32:0] sext_ln1118_2_fu_1574_p1;
reg  signed [32:0] sext_ln1118_2_reg_1800;
wire   [21:0] temp_R_V_fu_1594_p4;
reg   [21:0] temp_R_V_reg_1805;
reg   [21:0] p_Val2_51_reg_1810;
wire   [21:0] temp_I_V_fu_1625_p4;
reg   [21:0] temp_I_V_reg_1815;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state36_pp0_stage2_iter0;
wire    ap_block_state39_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [21:0] add_ln703_fu_1641_p2;
reg   [21:0] add_ln703_reg_1820;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state34;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    grp_sin_or_cos_double_s_fu_262_ap_start;
wire    grp_sin_or_cos_double_s_fu_262_ap_idle;
wire    grp_sin_or_cos_double_s_fu_262_do_cos;
wire    grp_sin_or_cos_double_s_fu_281_ap_start;
wire    grp_sin_or_cos_double_s_fu_281_ap_idle;
wire    grp_sin_or_cos_double_s_fu_281_do_cos;
wire    grp_bit_reverse_fu_300_ap_start;
wire    grp_bit_reverse_fu_300_ap_done;
wire    grp_bit_reverse_fu_300_ap_idle;
wire    grp_bit_reverse_fu_300_ap_ready;
wire   [9:0] grp_bit_reverse_fu_300_X_R_V_address0;
wire    grp_bit_reverse_fu_300_X_R_V_ce0;
wire    grp_bit_reverse_fu_300_X_R_V_we0;
wire   [21:0] grp_bit_reverse_fu_300_X_R_V_d0;
wire   [9:0] grp_bit_reverse_fu_300_X_I_V_address0;
wire    grp_bit_reverse_fu_300_X_I_V_ce0;
wire    grp_bit_reverse_fu_300_X_I_V_we0;
wire   [21:0] grp_bit_reverse_fu_300_X_I_V_d0;
reg   [3:0] stage_0_reg_218;
wire    ap_CS_fsm_state2;
reg   [21:0] tmp_V_6_reg_230;
wire    ap_CS_fsm_state40;
reg   [9:0] i_reg_241;
reg  signed [31:0] ap_phi_mux_i_0_phi_fu_256_p4;
wire    ap_block_pp0_stage0;
reg    grp_sin_or_cos_double_s_fu_262_ap_start_reg;
reg    grp_sin_or_cos_double_s_fu_281_ap_start_reg;
reg    grp_bit_reverse_fu_300_ap_start_reg;
wire  signed [63:0] sext_ln65_fu_1553_p1;
wire  signed [63:0] sext_ln67_fu_1559_p1;
wire   [21:0] sub_ln703_fu_1604_p2;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire   [21:0] add_ln703_1_fu_1646_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_313_p0;
wire   [10:0] zext_ln50_fu_322_p1;
wire   [10:0] DFTpts_fu_326_p2;
wire   [63:0] ireg_V_fu_350_p1;
wire   [10:0] exp_tmp_V_fu_365_p4;
wire   [51:0] trunc_ln565_fu_379_p1;
wire   [52:0] tmp_9_fu_383_p3;
wire   [53:0] p_Result_31_fu_391_p1;
wire   [0:0] p_Result_30_fu_357_p3;
wire   [53:0] man_V_1_fu_395_p2;
wire   [62:0] trunc_ln556_fu_353_p1;
wire   [11:0] zext_ln461_fu_375_p1;
wire   [11:0] F2_fu_415_p2;
wire   [0:0] icmp_ln581_fu_421_p2;
wire   [11:0] add_ln581_fu_427_p2;
wire   [11:0] sub_ln581_fu_433_p2;
wire  signed [11:0] sh_amt_fu_439_p3;
wire   [53:0] man_V_2_fu_401_p3;
wire  signed [31:0] sext_ln581_fu_447_p1;
wire   [53:0] zext_ln586_fu_473_p1;
wire   [53:0] ashr_ln586_fu_477_p2;
wire   [0:0] tmp_11_fu_487_p3;
wire   [21:0] trunc_ln583_fu_457_p1;
wire   [21:0] sext_ln581cast_fu_503_p1;
wire   [0:0] icmp_ln571_fu_409_p2;
wire   [0:0] icmp_ln582_fu_451_p2;
wire   [0:0] xor_ln571_fu_513_p2;
wire   [0:0] or_ln582_fu_525_p2;
wire   [0:0] xor_ln582_fu_531_p2;
wire   [0:0] icmp_ln585_fu_461_p2;
wire   [0:0] and_ln581_fu_537_p2;
wire   [0:0] xor_ln585_fu_543_p2;
wire   [0:0] or_ln581_fu_561_p2;
wire   [0:0] icmp_ln603_fu_467_p2;
wire   [0:0] xor_ln581_fu_567_p2;
wire   [0:0] and_ln603_fu_573_p2;
wire   [21:0] shl_ln604_fu_507_p2;
wire   [21:0] trunc_ln586_fu_483_p1;
wire   [0:0] and_ln585_1_fu_555_p2;
wire   [0:0] and_ln585_fu_549_p2;
wire   [21:0] select_ln588_fu_495_p3;
wire   [0:0] and_ln582_fu_519_p2;
wire   [0:0] or_ln603_fu_587_p2;
wire   [21:0] select_ln603_fu_579_p3;
wire   [21:0] select_ln603_1_fu_593_p3;
wire   [0:0] or_ln603_1_fu_601_p2;
wire   [0:0] or_ln603_2_fu_615_p2;
wire   [21:0] select_ln603_2_fu_607_p3;
wire   [21:0] tmp_V_fu_654_p2;
wire   [21:0] tmp_V_7_fu_660_p3;
reg   [21:0] p_Result_3_fu_668_p4;
wire   [31:0] p_Result_33_fu_678_p3;
reg   [31:0] l_fu_686_p3;
wire   [31:0] sub_ln894_fu_694_p2;
wire   [31:0] lsb_index_fu_704_p2;
wire   [30:0] tmp_13_fu_710_p4;
wire   [4:0] trunc_ln897_fu_726_p1;
wire   [4:0] sub_ln897_fu_730_p2;
wire   [21:0] zext_ln897_fu_736_p1;
wire   [21:0] lshr_ln897_fu_740_p2;
wire   [21:0] p_Result_s_fu_746_p2;
wire   [0:0] icmp_ln897_fu_720_p2;
wire   [0:0] icmp_ln897_1_fu_752_p2;
wire   [0:0] tmp_14_fu_764_p3;
wire   [21:0] trunc_ln894_fu_700_p1;
wire   [21:0] add_ln899_fu_778_p2;
wire   [0:0] p_Result_6_fu_784_p3;
wire   [0:0] xor_ln899_fu_772_p2;
wire   [0:0] and_ln899_fu_792_p2;
wire   [0:0] a_fu_758_p2;
wire   [0:0] or_ln899_fu_798_p2;
wire   [31:0] zext_ln907_1_fu_816_p1;
wire   [31:0] add_ln908_fu_826_p2;
wire   [31:0] lshr_ln908_fu_832_p2;
wire   [31:0] sub_ln908_fu_842_p2;
wire   [63:0] m_fu_812_p1;
wire   [63:0] zext_ln908_1_fu_848_p1;
wire   [0:0] icmp_ln908_fu_820_p2;
wire   [63:0] zext_ln908_fu_838_p1;
wire   [63:0] shl_ln908_fu_852_p2;
wire   [31:0] or_ln_fu_804_p3;
wire   [63:0] zext_ln911_fu_866_p1;
wire   [63:0] m_1_fu_858_p3;
wire   [63:0] m_2_fu_870_p2;
wire   [10:0] sub_ln915_fu_919_p2;
wire   [10:0] select_ln915_fu_912_p3;
wire   [10:0] add_ln915_fu_924_p2;
wire   [63:0] m_6_fu_909_p1;
wire   [11:0] tmp_2_fu_930_p3;
wire   [63:0] p_Result_34_fu_937_p5;
wire   [63:0] bitcast_ln729_fu_949_p1;
wire   [63:0] ireg_V_1_fu_966_p1;
wire   [10:0] exp_tmp_V_1_fu_981_p4;
wire   [51:0] trunc_ln565_1_fu_995_p1;
wire   [52:0] tmp_3_fu_999_p3;
wire   [53:0] p_Result_36_fu_1007_p1;
wire   [0:0] p_Result_35_fu_973_p3;
wire   [53:0] man_V_4_fu_1011_p2;
wire   [62:0] trunc_ln556_1_fu_969_p1;
wire   [11:0] zext_ln461_1_fu_991_p1;
wire   [11:0] F2_1_fu_1031_p2;
wire   [0:0] icmp_ln581_1_fu_1037_p2;
wire   [11:0] add_ln581_1_fu_1043_p2;
wire   [11:0] sub_ln581_1_fu_1049_p2;
wire  signed [11:0] sh_amt_1_fu_1055_p3;
wire   [53:0] man_V_5_fu_1017_p3;
wire  signed [31:0] sext_ln581_1_fu_1063_p1;
wire   [53:0] zext_ln586_1_fu_1089_p1;
wire   [53:0] ashr_ln586_1_fu_1093_p2;
wire   [0:0] tmp_17_fu_1103_p3;
wire   [21:0] trunc_ln583_1_fu_1073_p1;
wire   [21:0] sext_ln581_1cast_fu_1119_p1;
wire   [0:0] icmp_ln571_1_fu_1025_p2;
wire   [0:0] icmp_ln582_1_fu_1067_p2;
wire   [0:0] xor_ln571_1_fu_1129_p2;
wire   [0:0] or_ln582_1_fu_1141_p2;
wire   [0:0] xor_ln582_1_fu_1147_p2;
wire   [0:0] icmp_ln585_1_fu_1077_p2;
wire   [0:0] and_ln581_1_fu_1153_p2;
wire   [0:0] xor_ln585_1_fu_1159_p2;
wire   [0:0] or_ln581_1_fu_1177_p2;
wire   [0:0] icmp_ln603_1_fu_1083_p2;
wire   [0:0] xor_ln581_1_fu_1183_p2;
wire   [0:0] and_ln603_1_fu_1189_p2;
wire   [21:0] shl_ln604_1_fu_1123_p2;
wire   [21:0] trunc_ln586_1_fu_1099_p1;
wire   [0:0] and_ln585_3_fu_1171_p2;
wire   [0:0] and_ln585_2_fu_1165_p2;
wire   [21:0] select_ln588_1_fu_1111_p3;
wire   [0:0] and_ln582_1_fu_1135_p2;
wire   [0:0] or_ln603_3_fu_1203_p2;
wire   [21:0] select_ln603_4_fu_1195_p3;
wire   [21:0] select_ln603_5_fu_1209_p3;
wire   [0:0] or_ln603_4_fu_1217_p2;
wire   [0:0] or_ln603_5_fu_1231_p2;
wire   [21:0] select_ln603_6_fu_1223_p3;
wire   [63:0] ireg_V_2_fu_1245_p1;
wire   [10:0] exp_tmp_V_2_fu_1260_p4;
wire   [51:0] trunc_ln565_2_fu_1274_p1;
wire   [52:0] tmp_6_fu_1278_p3;
wire   [53:0] p_Result_38_fu_1286_p1;
wire   [0:0] p_Result_37_fu_1252_p3;
wire   [53:0] man_V_7_fu_1290_p2;
wire   [62:0] trunc_ln556_2_fu_1248_p1;
wire   [11:0] zext_ln461_2_fu_1270_p1;
wire   [11:0] F2_2_fu_1310_p2;
wire   [0:0] icmp_ln581_2_fu_1316_p2;
wire   [11:0] add_ln581_2_fu_1322_p2;
wire   [11:0] sub_ln581_2_fu_1328_p2;
wire  signed [11:0] sh_amt_2_fu_1334_p3;
wire   [53:0] man_V_8_fu_1296_p3;
wire  signed [31:0] sext_ln581_2_fu_1342_p1;
wire   [53:0] zext_ln586_2_fu_1368_p1;
wire   [53:0] ashr_ln586_2_fu_1372_p2;
wire   [0:0] tmp_19_fu_1382_p3;
wire   [21:0] trunc_ln583_2_fu_1352_p1;
wire   [21:0] sext_ln581_2cast_fu_1398_p1;
wire   [0:0] icmp_ln571_2_fu_1304_p2;
wire   [0:0] icmp_ln582_2_fu_1346_p2;
wire   [0:0] xor_ln571_2_fu_1408_p2;
wire   [0:0] or_ln582_2_fu_1420_p2;
wire   [0:0] xor_ln582_2_fu_1426_p2;
wire   [0:0] icmp_ln585_2_fu_1356_p2;
wire   [0:0] and_ln581_2_fu_1432_p2;
wire   [0:0] xor_ln585_2_fu_1438_p2;
wire   [0:0] or_ln581_2_fu_1456_p2;
wire   [0:0] icmp_ln603_2_fu_1362_p2;
wire   [0:0] xor_ln581_2_fu_1462_p2;
wire   [0:0] and_ln603_2_fu_1468_p2;
wire   [21:0] shl_ln604_2_fu_1402_p2;
wire   [21:0] trunc_ln586_2_fu_1378_p1;
wire   [0:0] and_ln585_5_fu_1450_p2;
wire   [0:0] and_ln585_4_fu_1444_p2;
wire   [21:0] select_ln588_2_fu_1390_p3;
wire   [0:0] and_ln582_2_fu_1414_p2;
wire   [0:0] or_ln603_6_fu_1482_p2;
wire   [21:0] select_ln603_8_fu_1474_p3;
wire   [21:0] select_ln603_9_fu_1488_p3;
wire   [0:0] or_ln603_7_fu_1496_p2;
wire   [0:0] or_ln603_8_fu_1510_p2;
wire   [21:0] select_ln603_10_fu_1502_p3;
wire   [21:0] c_V_fu_1237_p3;
wire   [21:0] s_V_fu_1516_p3;
wire   [21:0] tmp_20_fu_1532_p4;
wire   [31:0] i_lower_fu_1548_p2;
wire  signed [21:0] sext_ln1118_fu_1570_p0;
wire  signed [21:0] sext_ln1118_2_fu_1574_p0;
wire  signed [21:0] mul_ln700_fu_1578_p0;
wire  signed [21:0] mul_ln700_fu_1578_p1;
wire  signed [21:0] mul_ln1193_fu_1583_p0;
wire  signed [21:0] mul_ln1193_fu_1583_p1;
wire   [32:0] mul_ln700_fu_1578_p2;
wire   [32:0] mul_ln1193_fu_1583_p2;
wire   [32:0] ret_V_fu_1588_p2;
wire  signed [21:0] mul_ln700_1_fu_1611_p0;
wire  signed [21:0] mul_ln700_1_fu_1611_p1;
wire  signed [21:0] mul_ln1192_fu_1615_p0;
wire  signed [21:0] mul_ln1192_fu_1615_p1;
wire   [32:0] mul_ln700_1_fu_1611_p2;
wire   [32:0] mul_ln1192_fu_1615_p2;
wire   [32:0] ret_V_20_fu_1619_p2;
reg   [36:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0;
reg    ap_enable_operation_300;
reg    ap_enable_state34_pp0_iter0_stage0;
reg    ap_enable_operation_309;
reg    ap_enable_state35_pp0_iter0_stage1;
reg    ap_enable_operation_319;
reg    ap_enable_operation_330;
reg    ap_enable_state38_pp0_iter1_stage1;
reg    ap_enable_operation_302;
reg    ap_enable_operation_311;
reg    ap_enable_operation_326;
reg    ap_enable_state36_pp0_iter0_stage2;
reg    ap_enable_operation_338;
reg    ap_enable_state39_pp0_iter1_stage2;
reg    ap_enable_operation_305;
reg    ap_enable_operation_317;
reg    ap_enable_operation_327;
reg    ap_enable_operation_328;
reg    ap_enable_state37_pp0_iter1_stage0;
reg    ap_enable_operation_307;
reg    ap_enable_operation_320;
reg    ap_enable_operation_331;
reg    ap_enable_operation_336;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_sin_or_cos_double_s_fu_262_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_281_ap_start_reg = 1'b0;
#0 grp_bit_reverse_fu_300_ap_start_reg = 1'b0;
end

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_262(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_262_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_262_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_262_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_262_ap_ready),
    .t_in(select_ln885_reg_1730),
    .do_cos(grp_sin_or_cos_double_s_fu_262_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_262_ap_return)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_281(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_281_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_281_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_281_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_281_ap_ready),
    .t_in(select_ln885_reg_1730),
    .do_cos(grp_sin_or_cos_double_s_fu_281_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_281_ap_return)
);

bit_reverse grp_bit_reverse_fu_300(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bit_reverse_fu_300_ap_start),
    .ap_done(grp_bit_reverse_fu_300_ap_done),
    .ap_idle(grp_bit_reverse_fu_300_ap_idle),
    .ap_ready(grp_bit_reverse_fu_300_ap_ready),
    .X_R_V_address0(grp_bit_reverse_fu_300_X_R_V_address0),
    .X_R_V_ce0(grp_bit_reverse_fu_300_X_R_V_ce0),
    .X_R_V_we0(grp_bit_reverse_fu_300_X_R_V_we0),
    .X_R_V_d0(grp_bit_reverse_fu_300_X_R_V_d0),
    .X_R_V_q0(X_R_V_q0),
    .X_I_V_address0(grp_bit_reverse_fu_300_X_I_V_address0),
    .X_I_V_ce0(grp_bit_reverse_fu_300_X_I_V_ce0),
    .X_I_V_we0(grp_bit_reverse_fu_300_X_I_V_we0),
    .X_I_V_d0(grp_bit_reverse_fu_300_X_I_V_d0),
    .X_I_V_q0(X_I_V_q0)
);

fft_ddiv_64ns_64nibs #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_ddiv_64ns_64nibs_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd13842132293034190366),
    .din1(tmp_reg_1667),
    .ce(1'b1),
    .dout(grp_fu_308_p2)
);

fft_sitodp_32ns_6jbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fft_sitodp_32ns_6jbC_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_313_p0),
    .ce(1'b1),
    .dout(grp_fu_313_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state34) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bit_reverse_fu_300_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_bit_reverse_fu_300_ap_start_reg <= 1'b1;
        end else if ((grp_bit_reverse_fu_300_ap_ready == 1'b1)) begin
            grp_bit_reverse_fu_300_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_262_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            grp_sin_or_cos_double_s_fu_262_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_262_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_262_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_281_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            grp_sin_or_cos_double_s_fu_281_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_281_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_281_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_1763 == 1'd1))) begin
        i_0_reg_253 <= i_3_reg_1790;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        i_0_reg_253 <= zext_ln891_fu_962_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_reg_241 <= j_reg_1690;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_reg_241 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln57_fu_629_p2 == 1'd1))) begin
        stage_0_reg_218 <= stage_fu_903_p2;
    end else if (((grp_bit_reverse_fu_300_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stage_0_reg_218 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_V_6_reg_230 <= a_V_reg_1720;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_V_6_reg_230 <= 22'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_1542_p2 == 1'd1))) begin
        X_I_V_addr_1_reg_1784 <= sext_ln67_fu_1559_p1;
        X_I_V_addr_reg_1772 <= sext_ln65_fu_1553_p1;
        X_R_V_addr_1_reg_1778 <= sext_ln67_fu_1559_p1;
        X_R_V_addr_reg_1767 <= sext_ln65_fu_1553_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_V_addr_1_reg_1784_pp0_iter1_reg <= X_I_V_addr_1_reg_1784;
        X_R_V_addr_1_reg_1778_pp0_iter1_reg <= X_R_V_addr_1_reg_1778;
        icmp_ln63_reg_1763 <= icmp_ln63_fu_1542_p2;
        icmp_ln63_reg_1763_pp0_iter1_reg <= icmp_ln63_reg_1763;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_629_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        a_V_reg_1720 <= a_V_fu_898_p2;
        icmp_ln885_reg_1695 <= icmp_ln885_fu_640_p2;
        m_5_reg_1705 <= {{m_2_fu_870_p2[63:1]}};
        p_Result_32_reg_1700 <= tmp_V_6_reg_230[32'd21];
        tmp_15_reg_1710 <= m_2_fu_870_p2[32'd54];
        trunc_ln893_reg_1715 <= trunc_ln893_fu_894_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_1763 == 1'd1))) begin
        add_ln703_reg_1820 <= add_ln703_fu_1641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        e_V_reg_1682 <= e_V_fu_621_p3;
        numBF_reg_1677[9 : 0] <= numBF_fu_347_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_1542_p2 == 1'd1))) begin
        i_3_reg_1790 <= i_3_fu_1565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        j_reg_1690 <= j_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_reg_1763 == 1'd1))) begin
        p_Val2_51_reg_1810 <= X_I_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        select_ln885_reg_1730 <= select_ln885_fu_953_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        sext_ln1118_1_reg_1751 <= sext_ln1118_1_fu_1524_p1;
        sext_ln1118_3_reg_1757 <= sext_ln1118_3_fu_1528_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln63_reg_1763 == 1'd1))) begin
        sext_ln1118_2_reg_1800 <= sext_ln1118_2_fu_1574_p1;
        sext_ln1118_reg_1795 <= sext_ln1118_fu_1570_p1;
        temp_R_V_reg_1805 <= {{ret_V_fu_1588_p2[32:11]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_1763 == 1'd1))) begin
        temp_I_V_reg_1815 <= {{ret_V_20_fu_1619_p2[32:11]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_1667 <= grp_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln_reg_1661 <= {{DFTpts_fu_326_p2[10:1]}};
        zext_ln51_reg_1655[10 : 0] <= zext_ln51_fu_332_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32_on_subcall_done))) begin
        v_assign_1_reg_1736 <= grp_sin_or_cos_double_s_fu_262_ap_return;
        v_assign_2_reg_1741 <= grp_sin_or_cos_double_s_fu_281_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        v_assign_reg_1672 <= grp_fu_308_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        X_I_V_address0 = X_I_V_addr_1_reg_1784_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_V_address0 = sext_ln65_fu_1553_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_V_address0 = grp_bit_reverse_fu_300_X_I_V_address0;
    end else begin
        X_I_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_I_V_address1 = X_I_V_addr_reg_1772;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_I_V_address1 = sext_ln67_fu_1559_p1;
        end else begin
            X_I_V_address1 = 'bx;
        end
    end else begin
        X_I_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        X_I_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_V_ce0 = grp_bit_reverse_fu_300_X_I_V_ce0;
    end else begin
        X_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        X_I_V_ce1 = 1'b1;
    end else begin
        X_I_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        X_I_V_d0 = add_ln703_1_fu_1646_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_V_d0 = grp_bit_reverse_fu_300_X_I_V_d0;
    end else begin
        X_I_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_1763_pp0_iter1_reg == 1'd1))) begin
        X_I_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_V_we0 = grp_bit_reverse_fu_300_X_I_V_we0;
    end else begin
        X_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_reg_1763 == 1'd1))) begin
        X_I_V_we1 = 1'b1;
    end else begin
        X_I_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        X_R_V_address0 = X_R_V_addr_1_reg_1778;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        X_R_V_address0 = X_R_V_addr_reg_1767;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_V_address0 = sext_ln65_fu_1553_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_V_address0 = grp_bit_reverse_fu_300_X_R_V_address0;
    end else begin
        X_R_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_R_V_address1 = X_R_V_addr_1_reg_1778_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_V_address1 = sext_ln67_fu_1559_p1;
    end else begin
        X_R_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        X_R_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_V_ce0 = grp_bit_reverse_fu_300_X_R_V_ce0;
    end else begin
        X_R_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        X_R_V_ce1 = 1'b1;
    end else begin
        X_R_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        X_R_V_d0 = sub_ln703_fu_1604_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_V_d0 = grp_bit_reverse_fu_300_X_R_V_d0;
    end else begin
        X_R_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_reg_1763 == 1'd1))) begin
        X_R_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        X_R_V_we0 = grp_bit_reverse_fu_300_X_R_V_we0;
    end else begin
        X_R_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln63_reg_1763_pp0_iter1_reg == 1'd1))) begin
        X_R_V_we1 = 1'b1;
    end else begin
        X_R_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_1542_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state34 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state34 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1763 == 1'd1))) begin
        ap_phi_mux_i_0_phi_fu_256_p4 = i_3_reg_1790;
    end else begin
        ap_phi_mux_i_0_phi_fu_256_p4 = i_0_reg_253;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_bit_reverse_fu_300_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln50_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln57_fu_629_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln63_fu_1542_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln63_fu_1542_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DFTpts_fu_326_p2 = 11'd1 << zext_ln50_fu_322_p1;

assign F2_1_fu_1031_p2 = (12'd1075 - zext_ln461_1_fu_991_p1);

assign F2_2_fu_1310_p2 = (12'd1075 - zext_ln461_2_fu_1270_p1);

assign F2_fu_415_p2 = (12'd1075 - zext_ln461_fu_375_p1);

assign X_I_V_d1 = (p_Val2_51_reg_1810 - temp_I_V_fu_1625_p4);

assign X_R_V_d1 = add_ln703_reg_1820;

assign a_V_fu_898_p2 = (tmp_V_6_reg_230 + e_V_reg_1682);

assign a_fu_758_p2 = (icmp_ln897_fu_720_p2 & icmp_ln897_1_fu_752_p2);

assign add_ln581_1_fu_1043_p2 = ($signed(12'd4085) + $signed(F2_1_fu_1031_p2));

assign add_ln581_2_fu_1322_p2 = ($signed(12'd4085) + $signed(F2_2_fu_1310_p2));

assign add_ln581_fu_427_p2 = ($signed(12'd4085) + $signed(F2_fu_415_p2));

assign add_ln703_1_fu_1646_p2 = (X_I_V_q0 + temp_I_V_reg_1815);

assign add_ln703_fu_1641_p2 = (X_R_V_q0 + temp_R_V_reg_1805);

assign add_ln899_fu_778_p2 = ($signed(22'd4194251) + $signed(trunc_ln894_fu_700_p1));

assign add_ln908_fu_826_p2 = ($signed(32'd4294967242) + $signed(sub_ln894_fu_694_p2));

assign add_ln915_fu_924_p2 = (sub_ln915_fu_919_p2 + select_ln915_fu_912_p3);

assign and_ln581_1_fu_1153_p2 = (xor_ln582_1_fu_1147_p2 & icmp_ln581_1_fu_1037_p2);

assign and_ln581_2_fu_1432_p2 = (xor_ln582_2_fu_1426_p2 & icmp_ln581_2_fu_1316_p2);

assign and_ln581_fu_537_p2 = (xor_ln582_fu_531_p2 & icmp_ln581_fu_421_p2);

assign and_ln582_1_fu_1135_p2 = (xor_ln571_1_fu_1129_p2 & icmp_ln582_1_fu_1067_p2);

assign and_ln582_2_fu_1414_p2 = (xor_ln571_2_fu_1408_p2 & icmp_ln582_2_fu_1346_p2);

assign and_ln582_fu_519_p2 = (xor_ln571_fu_513_p2 & icmp_ln582_fu_451_p2);

assign and_ln585_1_fu_555_p2 = (icmp_ln585_fu_461_p2 & and_ln581_fu_537_p2);

assign and_ln585_2_fu_1165_p2 = (xor_ln585_1_fu_1159_p2 & and_ln581_1_fu_1153_p2);

assign and_ln585_3_fu_1171_p2 = (icmp_ln585_1_fu_1077_p2 & and_ln581_1_fu_1153_p2);

assign and_ln585_4_fu_1444_p2 = (xor_ln585_2_fu_1438_p2 & and_ln581_2_fu_1432_p2);

assign and_ln585_5_fu_1450_p2 = (icmp_ln585_2_fu_1356_p2 & and_ln581_2_fu_1432_p2);

assign and_ln585_fu_549_p2 = (xor_ln585_fu_543_p2 & and_ln581_fu_537_p2);

assign and_ln603_1_fu_1189_p2 = (xor_ln581_1_fu_1183_p2 & icmp_ln603_1_fu_1083_p2);

assign and_ln603_2_fu_1468_p2 = (xor_ln581_2_fu_1462_p2 & icmp_ln603_2_fu_1362_p2);

assign and_ln603_fu_573_p2 = (xor_ln581_fu_567_p2 & icmp_ln603_fu_467_p2);

assign and_ln899_fu_792_p2 = (xor_ln899_fu_772_p2 & p_Result_6_fu_784_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_pp0 = (((1'b1 == ap_block_pp0_stage2_subdone) & (ap_ST_fsm_pp0_stage2 == ap_CS_fsm)) | ((1'b1 == ap_block_pp0_stage1_subdone) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm)) | ((1'b1 == ap_block_pp0_stage0_subdone) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_on_subcall_done = ((grp_sin_or_cos_double_s_fu_281_ap_done == 1'b0) | (grp_sin_or_cos_double_s_fu_262_ap_done == 1'b0));
end

assign ap_block_state34_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_300 = (icmp_ln63_fu_1542_p2 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_302 = (icmp_ln63_fu_1542_p2 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_305 = (icmp_ln63_fu_1542_p2 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_307 = (icmp_ln63_fu_1542_p2 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_309 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_311 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_317 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_319 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_320 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_326 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_327 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_328 = (icmp_ln63_reg_1763 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_330 = (icmp_ln63_reg_1763_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_331 = (icmp_ln63_reg_1763_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_336 = (icmp_ln63_reg_1763_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_338 = (icmp_ln63_reg_1763_pp0_iter1_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state34_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state35_pp0_iter0_stage1 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state36_pp0_iter0_stage2 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state37_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state38_pp0_iter1_stage1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state39_pp0_iter1_stage2 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ashr_ln586_1_fu_1093_p2 = $signed(man_V_5_fu_1017_p3) >>> zext_ln586_1_fu_1089_p1;

assign ashr_ln586_2_fu_1372_p2 = $signed(man_V_8_fu_1296_p3) >>> zext_ln586_2_fu_1368_p1;

assign ashr_ln586_fu_477_p2 = $signed(man_V_2_fu_401_p3) >>> zext_ln586_fu_473_p1;

assign bitcast_ln729_fu_949_p1 = p_Result_34_fu_937_p5;

assign c_V_fu_1237_p3 = ((or_ln603_5_fu_1231_p2[0:0] === 1'b1) ? select_ln603_6_fu_1223_p3 : 22'd0);

assign e_V_fu_621_p3 = ((or_ln603_2_fu_615_p2[0:0] === 1'b1) ? select_ln603_2_fu_607_p3 : 22'd0);

assign exp_tmp_V_1_fu_981_p4 = {{ireg_V_1_fu_966_p1[62:52]}};

assign exp_tmp_V_2_fu_1260_p4 = {{ireg_V_2_fu_1245_p1[62:52]}};

assign exp_tmp_V_fu_365_p4 = {{ireg_V_fu_350_p1[62:52]}};

assign grp_bit_reverse_fu_300_ap_start = grp_bit_reverse_fu_300_ap_start_reg;

assign grp_fu_313_p0 = DFTpts_fu_326_p2;

assign grp_sin_or_cos_double_s_fu_262_ap_start = grp_sin_or_cos_double_s_fu_262_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_262_do_cos = 1'd1;

assign grp_sin_or_cos_double_s_fu_281_ap_start = grp_sin_or_cos_double_s_fu_281_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_281_do_cos = 1'd0;

assign i_3_fu_1565_p2 = ($signed(zext_ln51_reg_1655) + $signed(ap_phi_mux_i_0_phi_fu_256_p4));

assign i_lower_fu_1548_p2 = ($signed(ap_phi_mux_i_0_phi_fu_256_p4) + $signed(numBF_reg_1677));

assign icmp_ln50_fu_316_p2 = ((stage_0_reg_218 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln571_1_fu_1025_p2 = ((trunc_ln556_1_fu_969_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln571_2_fu_1304_p2 = ((trunc_ln556_2_fu_1248_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_409_p2 = ((trunc_ln556_fu_353_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_629_p2 = ((i_reg_241 == trunc_ln_reg_1661) ? 1'b1 : 1'b0);

assign icmp_ln581_1_fu_1037_p2 = (($signed(F2_1_fu_1031_p2) > $signed(12'd11)) ? 1'b1 : 1'b0);

assign icmp_ln581_2_fu_1316_p2 = (($signed(F2_2_fu_1310_p2) > $signed(12'd11)) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_421_p2 = (($signed(F2_fu_415_p2) > $signed(12'd11)) ? 1'b1 : 1'b0);

assign icmp_ln582_1_fu_1067_p2 = ((F2_1_fu_1031_p2 == 12'd11) ? 1'b1 : 1'b0);

assign icmp_ln582_2_fu_1346_p2 = ((F2_2_fu_1310_p2 == 12'd11) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_451_p2 = ((F2_fu_415_p2 == 12'd11) ? 1'b1 : 1'b0);

assign icmp_ln585_1_fu_1077_p2 = ((sh_amt_1_fu_1055_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln585_2_fu_1356_p2 = ((sh_amt_2_fu_1334_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_461_p2 = ((sh_amt_fu_439_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_1_fu_1083_p2 = ((sh_amt_1_fu_1055_p3 < 12'd22) ? 1'b1 : 1'b0);

assign icmp_ln603_2_fu_1362_p2 = ((sh_amt_2_fu_1334_p3 < 12'd22) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_467_p2 = ((sh_amt_fu_439_p3 < 12'd22) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_1542_p2 = (($signed(tmp_20_fu_1532_p4) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_640_p2 = ((tmp_V_6_reg_230 == 22'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_1_fu_752_p2 = ((p_Result_s_fu_746_p2 != 22'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_720_p2 = (($signed(tmp_13_fu_710_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_820_p2 = (($signed(lsb_index_fu_704_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ireg_V_1_fu_966_p1 = v_assign_1_reg_1736;

assign ireg_V_2_fu_1245_p1 = v_assign_2_reg_1741;

assign ireg_V_fu_350_p1 = v_assign_reg_1672;

assign j_fu_634_p2 = (i_reg_241 + 10'd1);


always @ (p_Result_33_fu_678_p3) begin
    if (p_Result_33_fu_678_p3[0] == 1'b1) begin
        l_fu_686_p3 = 32'd0;
    end else if (p_Result_33_fu_678_p3[1] == 1'b1) begin
        l_fu_686_p3 = 32'd1;
    end else if (p_Result_33_fu_678_p3[2] == 1'b1) begin
        l_fu_686_p3 = 32'd2;
    end else if (p_Result_33_fu_678_p3[3] == 1'b1) begin
        l_fu_686_p3 = 32'd3;
    end else if (p_Result_33_fu_678_p3[4] == 1'b1) begin
        l_fu_686_p3 = 32'd4;
    end else if (p_Result_33_fu_678_p3[5] == 1'b1) begin
        l_fu_686_p3 = 32'd5;
    end else if (p_Result_33_fu_678_p3[6] == 1'b1) begin
        l_fu_686_p3 = 32'd6;
    end else if (p_Result_33_fu_678_p3[7] == 1'b1) begin
        l_fu_686_p3 = 32'd7;
    end else if (p_Result_33_fu_678_p3[8] == 1'b1) begin
        l_fu_686_p3 = 32'd8;
    end else if (p_Result_33_fu_678_p3[9] == 1'b1) begin
        l_fu_686_p3 = 32'd9;
    end else if (p_Result_33_fu_678_p3[10] == 1'b1) begin
        l_fu_686_p3 = 32'd10;
    end else if (p_Result_33_fu_678_p3[11] == 1'b1) begin
        l_fu_686_p3 = 32'd11;
    end else if (p_Result_33_fu_678_p3[12] == 1'b1) begin
        l_fu_686_p3 = 32'd12;
    end else if (p_Result_33_fu_678_p3[13] == 1'b1) begin
        l_fu_686_p3 = 32'd13;
    end else if (p_Result_33_fu_678_p3[14] == 1'b1) begin
        l_fu_686_p3 = 32'd14;
    end else if (p_Result_33_fu_678_p3[15] == 1'b1) begin
        l_fu_686_p3 = 32'd15;
    end else if (p_Result_33_fu_678_p3[16] == 1'b1) begin
        l_fu_686_p3 = 32'd16;
    end else if (p_Result_33_fu_678_p3[17] == 1'b1) begin
        l_fu_686_p3 = 32'd17;
    end else if (p_Result_33_fu_678_p3[18] == 1'b1) begin
        l_fu_686_p3 = 32'd18;
    end else if (p_Result_33_fu_678_p3[19] == 1'b1) begin
        l_fu_686_p3 = 32'd19;
    end else if (p_Result_33_fu_678_p3[20] == 1'b1) begin
        l_fu_686_p3 = 32'd20;
    end else if (p_Result_33_fu_678_p3[21] == 1'b1) begin
        l_fu_686_p3 = 32'd21;
    end else if (p_Result_33_fu_678_p3[22] == 1'b1) begin
        l_fu_686_p3 = 32'd22;
    end else if (p_Result_33_fu_678_p3[23] == 1'b1) begin
        l_fu_686_p3 = 32'd23;
    end else if (p_Result_33_fu_678_p3[24] == 1'b1) begin
        l_fu_686_p3 = 32'd24;
    end else if (p_Result_33_fu_678_p3[25] == 1'b1) begin
        l_fu_686_p3 = 32'd25;
    end else if (p_Result_33_fu_678_p3[26] == 1'b1) begin
        l_fu_686_p3 = 32'd26;
    end else if (p_Result_33_fu_678_p3[27] == 1'b1) begin
        l_fu_686_p3 = 32'd27;
    end else if (p_Result_33_fu_678_p3[28] == 1'b1) begin
        l_fu_686_p3 = 32'd28;
    end else if (p_Result_33_fu_678_p3[29] == 1'b1) begin
        l_fu_686_p3 = 32'd29;
    end else if (p_Result_33_fu_678_p3[30] == 1'b1) begin
        l_fu_686_p3 = 32'd30;
    end else if (p_Result_33_fu_678_p3[31] == 1'b1) begin
        l_fu_686_p3 = 32'd31;
    end else begin
        l_fu_686_p3 = 32'd32;
    end
end

assign lsb_index_fu_704_p2 = ($signed(32'd4294967243) + $signed(sub_ln894_fu_694_p2));

assign lshr_ln897_fu_740_p2 = 22'd4194303 >> zext_ln897_fu_736_p1;

assign lshr_ln908_fu_832_p2 = zext_ln907_1_fu_816_p1 >> add_ln908_fu_826_p2;

assign m_1_fu_858_p3 = ((icmp_ln908_fu_820_p2[0:0] === 1'b1) ? zext_ln908_fu_838_p1 : shl_ln908_fu_852_p2);

assign m_2_fu_870_p2 = (zext_ln911_fu_866_p1 + m_1_fu_858_p3);

assign m_6_fu_909_p1 = m_5_reg_1705;

assign m_fu_812_p1 = tmp_V_7_fu_660_p3;

assign man_V_1_fu_395_p2 = (54'd0 - p_Result_31_fu_391_p1);

assign man_V_2_fu_401_p3 = ((p_Result_30_fu_357_p3[0:0] === 1'b1) ? man_V_1_fu_395_p2 : p_Result_31_fu_391_p1);

assign man_V_4_fu_1011_p2 = (54'd0 - p_Result_36_fu_1007_p1);

assign man_V_5_fu_1017_p3 = ((p_Result_35_fu_973_p3[0:0] === 1'b1) ? man_V_4_fu_1011_p2 : p_Result_36_fu_1007_p1);

assign man_V_7_fu_1290_p2 = (54'd0 - p_Result_38_fu_1286_p1);

assign man_V_8_fu_1296_p3 = ((p_Result_37_fu_1252_p3[0:0] === 1'b1) ? man_V_7_fu_1290_p2 : p_Result_38_fu_1286_p1);

assign mul_ln1192_fu_1615_p0 = sext_ln1118_reg_1795;

assign mul_ln1192_fu_1615_p1 = sext_ln1118_3_reg_1757;

assign mul_ln1192_fu_1615_p2 = ($signed(mul_ln1192_fu_1615_p0) * $signed(mul_ln1192_fu_1615_p1));

assign mul_ln1193_fu_1583_p0 = sext_ln1118_2_fu_1574_p0;

assign mul_ln1193_fu_1583_p1 = sext_ln1118_3_reg_1757;

assign mul_ln1193_fu_1583_p2 = ($signed(mul_ln1193_fu_1583_p0) * $signed(mul_ln1193_fu_1583_p1));

assign mul_ln700_1_fu_1611_p0 = sext_ln1118_2_reg_1800;

assign mul_ln700_1_fu_1611_p1 = sext_ln1118_1_reg_1751;

assign mul_ln700_1_fu_1611_p2 = ($signed(mul_ln700_1_fu_1611_p0) * $signed(mul_ln700_1_fu_1611_p1));

assign mul_ln700_fu_1578_p0 = sext_ln1118_fu_1570_p0;

assign mul_ln700_fu_1578_p1 = sext_ln1118_1_reg_1751;

assign mul_ln700_fu_1578_p2 = ($signed(mul_ln700_fu_1578_p0) * $signed(mul_ln700_fu_1578_p1));

assign numBF_fu_347_p1 = trunc_ln_reg_1661;

assign or_ln581_1_fu_1177_p2 = (or_ln582_1_fu_1141_p2 | icmp_ln581_1_fu_1037_p2);

assign or_ln581_2_fu_1456_p2 = (or_ln582_2_fu_1420_p2 | icmp_ln581_2_fu_1316_p2);

assign or_ln581_fu_561_p2 = (or_ln582_fu_525_p2 | icmp_ln581_fu_421_p2);

assign or_ln582_1_fu_1141_p2 = (icmp_ln582_1_fu_1067_p2 | icmp_ln571_1_fu_1025_p2);

assign or_ln582_2_fu_1420_p2 = (icmp_ln582_2_fu_1346_p2 | icmp_ln571_2_fu_1304_p2);

assign or_ln582_fu_525_p2 = (icmp_ln582_fu_451_p2 | icmp_ln571_fu_409_p2);

assign or_ln603_1_fu_601_p2 = (and_ln585_fu_549_p2 | and_ln582_fu_519_p2);

assign or_ln603_2_fu_615_p2 = (or_ln603_fu_587_p2 | or_ln603_1_fu_601_p2);

assign or_ln603_3_fu_1203_p2 = (and_ln603_1_fu_1189_p2 | and_ln585_3_fu_1171_p2);

assign or_ln603_4_fu_1217_p2 = (and_ln585_2_fu_1165_p2 | and_ln582_1_fu_1135_p2);

assign or_ln603_5_fu_1231_p2 = (or_ln603_4_fu_1217_p2 | or_ln603_3_fu_1203_p2);

assign or_ln603_6_fu_1482_p2 = (and_ln603_2_fu_1468_p2 | and_ln585_5_fu_1450_p2);

assign or_ln603_7_fu_1496_p2 = (and_ln585_4_fu_1444_p2 | and_ln582_2_fu_1414_p2);

assign or_ln603_8_fu_1510_p2 = (or_ln603_7_fu_1496_p2 | or_ln603_6_fu_1482_p2);

assign or_ln603_fu_587_p2 = (and_ln603_fu_573_p2 | and_ln585_1_fu_555_p2);

assign or_ln899_fu_798_p2 = (and_ln899_fu_792_p2 | a_fu_758_p2);

assign or_ln_fu_804_p3 = {{31'd0}, {or_ln899_fu_798_p2}};

assign p_Result_30_fu_357_p3 = ireg_V_fu_350_p1[32'd63];

assign p_Result_31_fu_391_p1 = tmp_9_fu_383_p3;

assign p_Result_32_fu_646_p3 = tmp_V_6_reg_230[32'd21];

assign p_Result_33_fu_678_p3 = {{10'd1023}, {p_Result_3_fu_668_p4}};

assign p_Result_34_fu_937_p5 = {{tmp_2_fu_930_p3}, {m_6_fu_909_p1[51:0]}};

assign p_Result_35_fu_973_p3 = ireg_V_1_fu_966_p1[32'd63];

assign p_Result_36_fu_1007_p1 = tmp_3_fu_999_p3;

assign p_Result_37_fu_1252_p3 = ireg_V_2_fu_1245_p1[32'd63];

assign p_Result_38_fu_1286_p1 = tmp_6_fu_1278_p3;

integer ap_tvar_int_0;

always @ (tmp_V_7_fu_660_p3) begin
    for (ap_tvar_int_0 = 22 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 21 - 0) begin
            p_Result_3_fu_668_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_3_fu_668_p4[ap_tvar_int_0] = tmp_V_7_fu_660_p3[21 - ap_tvar_int_0];
        end
    end
end

assign p_Result_6_fu_784_p3 = tmp_V_7_fu_660_p3[add_ln899_fu_778_p2];

assign p_Result_s_fu_746_p2 = (tmp_V_7_fu_660_p3 & lshr_ln897_fu_740_p2);

assign ret_V_20_fu_1619_p2 = (mul_ln700_1_fu_1611_p2 + mul_ln1192_fu_1615_p2);

assign ret_V_fu_1588_p2 = (mul_ln700_fu_1578_p2 - mul_ln1193_fu_1583_p2);

assign s_V_fu_1516_p3 = ((or_ln603_8_fu_1510_p2[0:0] === 1'b1) ? select_ln603_10_fu_1502_p3 : 22'd0);

assign select_ln588_1_fu_1111_p3 = ((tmp_17_fu_1103_p3[0:0] === 1'b1) ? 22'd4194303 : 22'd0);

assign select_ln588_2_fu_1390_p3 = ((tmp_19_fu_1382_p3[0:0] === 1'b1) ? 22'd4194303 : 22'd0);

assign select_ln588_fu_495_p3 = ((tmp_11_fu_487_p3[0:0] === 1'b1) ? 22'd4194303 : 22'd0);

assign select_ln603_10_fu_1502_p3 = ((or_ln603_6_fu_1482_p2[0:0] === 1'b1) ? select_ln603_8_fu_1474_p3 : select_ln603_9_fu_1488_p3);

assign select_ln603_1_fu_593_p3 = ((and_ln585_fu_549_p2[0:0] === 1'b1) ? select_ln588_fu_495_p3 : trunc_ln583_fu_457_p1);

assign select_ln603_2_fu_607_p3 = ((or_ln603_fu_587_p2[0:0] === 1'b1) ? select_ln603_fu_579_p3 : select_ln603_1_fu_593_p3);

assign select_ln603_4_fu_1195_p3 = ((and_ln603_1_fu_1189_p2[0:0] === 1'b1) ? shl_ln604_1_fu_1123_p2 : trunc_ln586_1_fu_1099_p1);

assign select_ln603_5_fu_1209_p3 = ((and_ln585_2_fu_1165_p2[0:0] === 1'b1) ? select_ln588_1_fu_1111_p3 : trunc_ln583_1_fu_1073_p1);

assign select_ln603_6_fu_1223_p3 = ((or_ln603_3_fu_1203_p2[0:0] === 1'b1) ? select_ln603_4_fu_1195_p3 : select_ln603_5_fu_1209_p3);

assign select_ln603_8_fu_1474_p3 = ((and_ln603_2_fu_1468_p2[0:0] === 1'b1) ? shl_ln604_2_fu_1402_p2 : trunc_ln586_2_fu_1378_p1);

assign select_ln603_9_fu_1488_p3 = ((and_ln585_4_fu_1444_p2[0:0] === 1'b1) ? select_ln588_2_fu_1390_p3 : trunc_ln583_2_fu_1352_p1);

assign select_ln603_fu_579_p3 = ((and_ln603_fu_573_p2[0:0] === 1'b1) ? shl_ln604_fu_507_p2 : trunc_ln586_fu_483_p1);

assign select_ln885_fu_953_p3 = ((icmp_ln885_reg_1695[0:0] === 1'b1) ? 64'd0 : bitcast_ln729_fu_949_p1);

assign select_ln915_fu_912_p3 = ((tmp_15_reg_1710[0:0] === 1'b1) ? 11'd1023 : 11'd1022);

assign sext_ln1118_1_fu_1524_p1 = $signed(c_V_fu_1237_p3);

assign sext_ln1118_2_fu_1574_p0 = X_I_V_q0;

assign sext_ln1118_2_fu_1574_p1 = sext_ln1118_2_fu_1574_p0;

assign sext_ln1118_3_fu_1528_p1 = $signed(s_V_fu_1516_p3);

assign sext_ln1118_fu_1570_p0 = X_R_V_q0;

assign sext_ln1118_fu_1570_p1 = sext_ln1118_fu_1570_p0;

assign sext_ln581_1_fu_1063_p1 = sh_amt_1_fu_1055_p3;

assign sext_ln581_1cast_fu_1119_p1 = sext_ln581_1_fu_1063_p1[21:0];

assign sext_ln581_2_fu_1342_p1 = sh_amt_2_fu_1334_p3;

assign sext_ln581_2cast_fu_1398_p1 = sext_ln581_2_fu_1342_p1[21:0];

assign sext_ln581_fu_447_p1 = sh_amt_fu_439_p3;

assign sext_ln581cast_fu_503_p1 = sext_ln581_fu_447_p1[21:0];

assign sext_ln65_fu_1553_p1 = $signed(i_lower_fu_1548_p2);

assign sext_ln67_fu_1559_p1 = ap_phi_mux_i_0_phi_fu_256_p4;

assign sh_amt_1_fu_1055_p3 = ((icmp_ln581_1_fu_1037_p2[0:0] === 1'b1) ? add_ln581_1_fu_1043_p2 : sub_ln581_1_fu_1049_p2);

assign sh_amt_2_fu_1334_p3 = ((icmp_ln581_2_fu_1316_p2[0:0] === 1'b1) ? add_ln581_2_fu_1322_p2 : sub_ln581_2_fu_1328_p2);

assign sh_amt_fu_439_p3 = ((icmp_ln581_fu_421_p2[0:0] === 1'b1) ? add_ln581_fu_427_p2 : sub_ln581_fu_433_p2);

assign shl_ln604_1_fu_1123_p2 = trunc_ln583_1_fu_1073_p1 << sext_ln581_1cast_fu_1119_p1;

assign shl_ln604_2_fu_1402_p2 = trunc_ln583_2_fu_1352_p1 << sext_ln581_2cast_fu_1398_p1;

assign shl_ln604_fu_507_p2 = trunc_ln583_fu_457_p1 << sext_ln581cast_fu_503_p1;

assign shl_ln908_fu_852_p2 = m_fu_812_p1 << zext_ln908_1_fu_848_p1;

assign stage_fu_903_p2 = (stage_0_reg_218 + 4'd1);

assign sub_ln581_1_fu_1049_p2 = (12'd11 - F2_1_fu_1031_p2);

assign sub_ln581_2_fu_1328_p2 = (12'd11 - F2_2_fu_1310_p2);

assign sub_ln581_fu_433_p2 = (12'd11 - F2_fu_415_p2);

assign sub_ln703_fu_1604_p2 = (X_R_V_q1 - temp_R_V_fu_1594_p4);

assign sub_ln894_fu_694_p2 = (32'd22 - l_fu_686_p3);

assign sub_ln897_fu_730_p2 = (5'd12 - trunc_ln897_fu_726_p1);

assign sub_ln908_fu_842_p2 = (32'd54 - sub_ln894_fu_694_p2);

assign sub_ln915_fu_919_p2 = (11'd11 - trunc_ln893_reg_1715);

assign temp_I_V_fu_1625_p4 = {{ret_V_20_fu_1619_p2[32:11]}};

assign temp_R_V_fu_1594_p4 = {{ret_V_fu_1588_p2[32:11]}};

assign tmp_11_fu_487_p3 = ireg_V_fu_350_p1[32'd63];

assign tmp_13_fu_710_p4 = {{lsb_index_fu_704_p2[31:1]}};

assign tmp_14_fu_764_p3 = lsb_index_fu_704_p2[32'd31];

assign tmp_17_fu_1103_p3 = ireg_V_1_fu_966_p1[32'd63];

assign tmp_19_fu_1382_p3 = ireg_V_2_fu_1245_p1[32'd63];

assign tmp_20_fu_1532_p4 = {{ap_phi_mux_i_0_phi_fu_256_p4[31:10]}};

assign tmp_2_fu_930_p3 = {{p_Result_32_reg_1700}, {add_ln915_fu_924_p2}};

assign tmp_3_fu_999_p3 = {{1'd1}, {trunc_ln565_1_fu_995_p1}};

assign tmp_6_fu_1278_p3 = {{1'd1}, {trunc_ln565_2_fu_1274_p1}};

assign tmp_9_fu_383_p3 = {{1'd1}, {trunc_ln565_fu_379_p1}};

assign tmp_V_7_fu_660_p3 = ((p_Result_32_fu_646_p3[0:0] === 1'b1) ? tmp_V_fu_654_p2 : tmp_V_6_reg_230);

assign tmp_V_fu_654_p2 = (22'd0 - tmp_V_6_reg_230);

assign trunc_ln556_1_fu_969_p1 = ireg_V_1_fu_966_p1[62:0];

assign trunc_ln556_2_fu_1248_p1 = ireg_V_2_fu_1245_p1[62:0];

assign trunc_ln556_fu_353_p1 = ireg_V_fu_350_p1[62:0];

assign trunc_ln565_1_fu_995_p1 = ireg_V_1_fu_966_p1[51:0];

assign trunc_ln565_2_fu_1274_p1 = ireg_V_2_fu_1245_p1[51:0];

assign trunc_ln565_fu_379_p1 = ireg_V_fu_350_p1[51:0];

assign trunc_ln583_1_fu_1073_p1 = man_V_5_fu_1017_p3[21:0];

assign trunc_ln583_2_fu_1352_p1 = man_V_8_fu_1296_p3[21:0];

assign trunc_ln583_fu_457_p1 = man_V_2_fu_401_p3[21:0];

assign trunc_ln586_1_fu_1099_p1 = ashr_ln586_1_fu_1093_p2[21:0];

assign trunc_ln586_2_fu_1378_p1 = ashr_ln586_2_fu_1372_p2[21:0];

assign trunc_ln586_fu_483_p1 = ashr_ln586_fu_477_p2[21:0];

assign trunc_ln893_fu_894_p1 = l_fu_686_p3[10:0];

assign trunc_ln894_fu_700_p1 = sub_ln894_fu_694_p2[21:0];

assign trunc_ln897_fu_726_p1 = sub_ln894_fu_694_p2[4:0];

assign xor_ln571_1_fu_1129_p2 = (icmp_ln571_1_fu_1025_p2 ^ 1'd1);

assign xor_ln571_2_fu_1408_p2 = (icmp_ln571_2_fu_1304_p2 ^ 1'd1);

assign xor_ln571_fu_513_p2 = (icmp_ln571_fu_409_p2 ^ 1'd1);

assign xor_ln581_1_fu_1183_p2 = (or_ln581_1_fu_1177_p2 ^ 1'd1);

assign xor_ln581_2_fu_1462_p2 = (or_ln581_2_fu_1456_p2 ^ 1'd1);

assign xor_ln581_fu_567_p2 = (or_ln581_fu_561_p2 ^ 1'd1);

assign xor_ln582_1_fu_1147_p2 = (or_ln582_1_fu_1141_p2 ^ 1'd1);

assign xor_ln582_2_fu_1426_p2 = (or_ln582_2_fu_1420_p2 ^ 1'd1);

assign xor_ln582_fu_531_p2 = (or_ln582_fu_525_p2 ^ 1'd1);

assign xor_ln585_1_fu_1159_p2 = (icmp_ln585_1_fu_1077_p2 ^ 1'd1);

assign xor_ln585_2_fu_1438_p2 = (icmp_ln585_2_fu_1356_p2 ^ 1'd1);

assign xor_ln585_fu_543_p2 = (icmp_ln585_fu_461_p2 ^ 1'd1);

assign xor_ln899_fu_772_p2 = (tmp_14_fu_764_p3 ^ 1'd1);

assign zext_ln461_1_fu_991_p1 = exp_tmp_V_1_fu_981_p4;

assign zext_ln461_2_fu_1270_p1 = exp_tmp_V_2_fu_1260_p4;

assign zext_ln461_fu_375_p1 = exp_tmp_V_fu_365_p4;

assign zext_ln50_fu_322_p1 = stage_0_reg_218;

assign zext_ln51_fu_332_p1 = DFTpts_fu_326_p2;

assign zext_ln586_1_fu_1089_p1 = $unsigned(sext_ln581_1_fu_1063_p1);

assign zext_ln586_2_fu_1368_p1 = $unsigned(sext_ln581_2_fu_1342_p1);

assign zext_ln586_fu_473_p1 = $unsigned(sext_ln581_fu_447_p1);

assign zext_ln891_fu_962_p1 = i_reg_241;

assign zext_ln897_fu_736_p1 = sub_ln897_fu_730_p2;

assign zext_ln907_1_fu_816_p1 = tmp_V_7_fu_660_p3;

assign zext_ln908_1_fu_848_p1 = sub_ln908_fu_842_p2;

assign zext_ln908_fu_838_p1 = lshr_ln908_fu_832_p2;

assign zext_ln911_fu_866_p1 = or_ln_fu_804_p3;

always @ (posedge ap_clk) begin
    zext_ln51_reg_1655[31:11] <= 21'b000000000000000000000;
    numBF_reg_1677[31:10] <= 22'b0000000000000000000000;
end

endmodule //fft
