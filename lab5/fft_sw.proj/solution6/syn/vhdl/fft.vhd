-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V_ce0 : OUT STD_LOGIC;
    X_R_V_we0 : OUT STD_LOGIC;
    X_R_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    X_R_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_R_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_V_ce1 : OUT STD_LOGIC;
    X_R_V_we1 : OUT STD_LOGIC;
    X_R_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    X_R_V_q1 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V_ce0 : OUT STD_LOGIC;
    X_I_V_we0 : OUT STD_LOGIC;
    X_I_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_V_ce1 : OUT STD_LOGIC;
    X_I_V_we1 : OUT STD_LOGIC;
    X_I_V_d1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    X_I_V_q1 : IN STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635000,HLS_SYN_LAT=379435,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=60,HLS_SYN_FF=7657,HLS_SYN_LUT=18836,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_C01921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010001000010011000011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv12_FF5 : STD_LOGIC_VECTOR (11 downto 0) := "111111110101";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_16 : STD_LOGIC_VECTOR (11 downto 0) := "000000010110";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv22_3FFFCB : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_B : STD_LOGIC_VECTOR (10 downto 0) := "00000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_reg_1655 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln50_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_1661 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1667 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_1672 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal numBF_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numBF_reg_1677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal e_V_fu_621_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal e_V_reg_1682 : STD_LOGIC_VECTOR (21 downto 0);
    signal j_fu_634_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_1690 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln885_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1695 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_reg_1700 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_5_reg_1705 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_15_reg_1710 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_894_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1715 : STD_LOGIC_VECTOR (10 downto 0);
    signal a_V_fu_898_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal a_V_reg_1720 : STD_LOGIC_VECTOR (21 downto 0);
    signal stage_fu_903_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln885_fu_953_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln885_reg_1730 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_262_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_1_reg_1736 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_262_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_262_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_281_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_281_ap_done : STD_LOGIC;
    signal ap_block_state32_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_281_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_2_reg_1741 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln891_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal sext_ln1118_1_fu_1524_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_1_reg_1751 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_3_fu_1528_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_3_reg_1757 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln63_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_1763 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state34_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln63_reg_1763_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal X_R_V_addr_reg_1767 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_V_addr_reg_1772 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_V_addr_1_reg_1778 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_V_addr_1_reg_1778_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_V_addr_1_reg_1784 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_V_addr_1_reg_1784_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_fu_1565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal sext_ln1118_fu_1570_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_reg_1795 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state35_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sext_ln1118_2_fu_1574_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1118_2_reg_1800 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp_R_V_fu_1594_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal temp_R_V_reg_1805 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_51_reg_1810 : STD_LOGIC_VECTOR (21 downto 0);
    signal temp_I_V_fu_1625_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal temp_I_V_reg_1815 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state36_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln703_fu_1641_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln703_reg_1820 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state34 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_262_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_262_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_262_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_281_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_281_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_281_do_cos : STD_LOGIC;
    signal grp_bit_reverse_fu_300_ap_start : STD_LOGIC;
    signal grp_bit_reverse_fu_300_ap_done : STD_LOGIC;
    signal grp_bit_reverse_fu_300_ap_idle : STD_LOGIC;
    signal grp_bit_reverse_fu_300_ap_ready : STD_LOGIC;
    signal grp_bit_reverse_fu_300_X_R_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_300_X_R_V_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_300_X_R_V_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_300_X_R_V_d0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_bit_reverse_fu_300_X_I_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_300_X_I_V_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_300_X_I_V_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_300_X_I_V_d0 : STD_LOGIC_VECTOR (21 downto 0);
    signal stage_0_reg_218 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_V_6_reg_230 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_reg_241 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_0_phi_fu_256_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal grp_bit_reverse_fu_300_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln65_fu_1553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_fu_1559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln703_fu_1604_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal add_ln703_1_fu_1646_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_fu_322_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal DFTpts_fu_326_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ireg_V_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_365_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_379_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_9_fu_383_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_31_fu_391_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_30_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_395_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_353_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_415_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_427_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_433_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_439_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_401_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_473_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_477_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_11_fu_487_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_457_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln581cast_fu_503_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln571_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_507_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln586_fu_483_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln585_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_495_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln582_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_579_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln603_1_fu_593_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln603_1_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_607_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_V_fu_654_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_V_7_fu_660_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_3_fu_668_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_33_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_710_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_726_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln897_fu_730_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln897_fu_736_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln897_fu_740_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_s_fu_746_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln897_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_764_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_700_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln899_fu_778_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_6_fu_784_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_1_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln908_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln908_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_852_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_804_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln911_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_858_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_870_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln915_fu_919_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_912_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_924_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_930_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_34_fu_937_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln729_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_1_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_1_fu_981_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_1_fu_995_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_3_fu_999_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_36_fu_1007_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_35_fu_973_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_4_fu_1011_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_1_fu_969_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_1_fu_991_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_1031_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_1_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_1_fu_1043_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_1049_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_fu_1055_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_5_fu_1017_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_1_fu_1063_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_1089_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_1093_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_17_fu_1103_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_1_fu_1073_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln581_1cast_fu_1119_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln571_1_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_1_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_1_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_1_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_1_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_1_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_1123_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln586_1_fu_1099_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln585_3_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_2_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_1_fu_1111_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln582_1_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_3_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_4_fu_1195_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln603_5_fu_1209_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln603_4_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_5_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_6_fu_1223_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ireg_V_2_fu_1245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_2_fu_1260_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_2_fu_1274_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_1278_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_38_fu_1286_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_37_fu_1252_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_7_fu_1290_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_2_fu_1248_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_2_fu_1270_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_1310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_2_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_2_fu_1322_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_2_fu_1328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_fu_1334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_8_fu_1296_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_2_fu_1342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_2_fu_1368_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_2_fu_1372_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_19_fu_1382_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_2_fu_1352_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln581_2cast_fu_1398_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln571_2_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_2_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_2_fu_1408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_2_fu_1420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_2_fu_1426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_2_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_2_fu_1432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_2_fu_1438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_2_fu_1456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_2_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_2_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_2_fu_1402_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln586_2_fu_1378_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln585_5_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_4_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_2_fu_1390_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln582_2_fu_1414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_6_fu_1482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_8_fu_1474_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln603_9_fu_1488_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln603_7_fu_1496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_8_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_10_fu_1502_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal c_V_fu_1237_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal s_V_fu_1516_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_20_fu_1532_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_1548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_fu_1570_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_1574_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_fu_1578_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_fu_1578_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1193_fu_1583_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1193_fu_1583_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_fu_1578_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1193_fu_1583_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_1588_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln700_1_fu_1611_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_1_fu_1611_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1615_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1192_fu_1615_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln700_1_fu_1611_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1192_fu_1615_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_20_fu_1619_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_300 : BOOLEAN;
    signal ap_enable_state34_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_309 : BOOLEAN;
    signal ap_enable_state35_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_319 : BOOLEAN;
    signal ap_enable_operation_330 : BOOLEAN;
    signal ap_enable_state38_pp0_iter1_stage1 : BOOLEAN;
    signal ap_enable_operation_302 : BOOLEAN;
    signal ap_enable_operation_311 : BOOLEAN;
    signal ap_enable_operation_326 : BOOLEAN;
    signal ap_enable_state36_pp0_iter0_stage2 : BOOLEAN;
    signal ap_enable_operation_338 : BOOLEAN;
    signal ap_enable_state39_pp0_iter1_stage2 : BOOLEAN;
    signal ap_enable_operation_305 : BOOLEAN;
    signal ap_enable_operation_317 : BOOLEAN;
    signal ap_enable_operation_327 : BOOLEAN;
    signal ap_enable_operation_328 : BOOLEAN;
    signal ap_enable_state37_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_307 : BOOLEAN;
    signal ap_enable_operation_320 : BOOLEAN;
    signal ap_enable_operation_331 : BOOLEAN;
    signal ap_enable_operation_336 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bit_reverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_V_ce0 : OUT STD_LOGIC;
        X_R_V_we0 : OUT STD_LOGIC;
        X_R_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        X_R_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
        X_I_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_V_ce0 : OUT STD_LOGIC;
        X_I_V_we0 : OUT STD_LOGIC;
        X_I_V_d0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        X_I_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component fft_ddiv_64ns_64nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_sitodp_32ns_6jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_262 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_262_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_262_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_262_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_262_ap_ready,
        t_in => select_ln885_reg_1730,
        do_cos => grp_sin_or_cos_double_s_fu_262_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_262_ap_return);

    grp_sin_or_cos_double_s_fu_281 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_281_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_281_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_281_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_281_ap_ready,
        t_in => select_ln885_reg_1730,
        do_cos => grp_sin_or_cos_double_s_fu_281_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_281_ap_return);

    grp_bit_reverse_fu_300 : component bit_reverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bit_reverse_fu_300_ap_start,
        ap_done => grp_bit_reverse_fu_300_ap_done,
        ap_idle => grp_bit_reverse_fu_300_ap_idle,
        ap_ready => grp_bit_reverse_fu_300_ap_ready,
        X_R_V_address0 => grp_bit_reverse_fu_300_X_R_V_address0,
        X_R_V_ce0 => grp_bit_reverse_fu_300_X_R_V_ce0,
        X_R_V_we0 => grp_bit_reverse_fu_300_X_R_V_we0,
        X_R_V_d0 => grp_bit_reverse_fu_300_X_R_V_d0,
        X_R_V_q0 => X_R_V_q0,
        X_I_V_address0 => grp_bit_reverse_fu_300_X_I_V_address0,
        X_I_V_ce0 => grp_bit_reverse_fu_300_X_I_V_ce0,
        X_I_V_we0 => grp_bit_reverse_fu_300_X_I_V_we0,
        X_I_V_d0 => grp_bit_reverse_fu_300_X_I_V_d0,
        X_I_V_q0 => X_I_V_q0);

    fft_ddiv_64ns_64nibs_U24 : component fft_ddiv_64ns_64nibs
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_C01921FB5444261E,
        din1 => tmp_reg_1667,
        ce => ap_const_logic_1,
        dout => grp_fu_308_p2);

    fft_sitodp_32ns_6jbC_U25 : component fft_sitodp_32ns_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_313_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_313_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state34) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bit_reverse_fu_300_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bit_reverse_fu_300_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_bit_reverse_fu_300_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bit_reverse_fu_300_ap_ready = ap_const_logic_1)) then 
                    grp_bit_reverse_fu_300_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_sin_or_cos_double_s_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_sin_or_cos_double_s_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then 
                i_0_reg_253 <= i_3_reg_1790;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_0_reg_253 <= zext_ln891_fu_962_p1;
            end if; 
        end if;
    end process;

    i_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_reg_241 <= j_reg_1690;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_reg_241 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    stage_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln57_fu_629_p2 = ap_const_lv1_1))) then 
                stage_0_reg_218 <= stage_fu_903_p2;
            elsif (((grp_bit_reverse_fu_300_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                stage_0_reg_218 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    tmp_V_6_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                tmp_V_6_reg_230 <= a_V_reg_1720;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                tmp_V_6_reg_230 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_fu_1542_p2 = ap_const_lv1_1))) then
                X_I_V_addr_1_reg_1784 <= sext_ln67_fu_1559_p1(10 - 1 downto 0);
                X_I_V_addr_reg_1772 <= sext_ln65_fu_1553_p1(10 - 1 downto 0);
                X_R_V_addr_1_reg_1778 <= sext_ln67_fu_1559_p1(10 - 1 downto 0);
                X_R_V_addr_reg_1767 <= sext_ln65_fu_1553_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                X_I_V_addr_1_reg_1784_pp0_iter1_reg <= X_I_V_addr_1_reg_1784;
                X_R_V_addr_1_reg_1778_pp0_iter1_reg <= X_R_V_addr_1_reg_1778;
                icmp_ln63_reg_1763 <= icmp_ln63_fu_1542_p2;
                icmp_ln63_reg_1763_pp0_iter1_reg <= icmp_ln63_reg_1763;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_629_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                a_V_reg_1720 <= a_V_fu_898_p2;
                icmp_ln885_reg_1695 <= icmp_ln885_fu_640_p2;
                m_5_reg_1705 <= m_2_fu_870_p2(63 downto 1);
                p_Result_32_reg_1700 <= tmp_V_6_reg_230(21 downto 21);
                tmp_15_reg_1710 <= m_2_fu_870_p2(54 downto 54);
                trunc_ln893_reg_1715 <= trunc_ln893_fu_894_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then
                add_ln703_reg_1820 <= add_ln703_fu_1641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                e_V_reg_1682 <= e_V_fu_621_p3;
                    numBF_reg_1677(9 downto 0) <= numBF_fu_347_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_fu_1542_p2 = ap_const_lv1_1))) then
                i_3_reg_1790 <= i_3_fu_1565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                j_reg_1690 <= j_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then
                p_Val2_51_reg_1810 <= X_I_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                select_ln885_reg_1730 <= select_ln885_fu_953_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                sext_ln1118_1_reg_1751 <= sext_ln1118_1_fu_1524_p1;
                sext_ln1118_3_reg_1757 <= sext_ln1118_3_fu_1528_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then
                sext_ln1118_2_reg_1800 <= sext_ln1118_2_fu_1574_p1;
                sext_ln1118_reg_1795 <= sext_ln1118_fu_1570_p1;
                temp_R_V_reg_1805 <= ret_V_fu_1588_p2(32 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then
                temp_I_V_reg_1815 <= ret_V_20_fu_1619_p2(32 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_1667 <= grp_fu_313_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln_reg_1661 <= DFTpts_fu_326_p2(10 downto 1);
                    zext_ln51_reg_1655(10 downto 0) <= zext_ln51_fu_332_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_boolean_0 = ap_block_state32_on_subcall_done))) then
                v_assign_1_reg_1736 <= grp_sin_or_cos_double_s_fu_262_ap_return;
                v_assign_2_reg_1741 <= grp_sin_or_cos_double_s_fu_281_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                v_assign_reg_1672 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    zext_ln51_reg_1655(31 downto 11) <= "000000000000000000000";
    numBF_reg_1677(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln50_fu_316_p2, ap_CS_fsm_state30, icmp_ln57_fu_629_p2, ap_CS_fsm_state32, ap_block_state32_on_subcall_done, icmp_ln63_fu_1542_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, grp_bit_reverse_fu_300_ap_done, ap_CS_fsm_state2, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_bit_reverse_fu_300_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln50_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln57_fu_629_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_boolean_0 = ap_block_state32_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln63_fu_1542_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln63_fu_1542_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DFTpts_fu_326_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv11_1),to_integer(unsigned('0' & zext_ln50_fu_322_p1(11-1 downto 0)))));
    F2_1_fu_1031_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_1_fu_991_p1));
    F2_2_fu_1310_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_2_fu_1270_p1));
    F2_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_375_p1));

    X_I_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, X_I_V_addr_1_reg_1784_pp0_iter1_reg, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, grp_bit_reverse_fu_300_X_I_V_address0, ap_CS_fsm_state2, ap_block_pp0_stage0, sext_ln65_fu_1553_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            X_I_V_address0 <= X_I_V_addr_1_reg_1784_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_V_address0 <= sext_ln65_fu_1553_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_V_address0 <= grp_bit_reverse_fu_300_X_I_V_address0;
        else 
            X_I_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, X_I_V_addr_reg_1772, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, sext_ln67_fu_1559_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_I_V_address1 <= X_I_V_addr_reg_1772;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_I_V_address1 <= sext_ln67_fu_1559_p1(10 - 1 downto 0);
            else 
                X_I_V_address1 <= "XXXXXXXXXX";
            end if;
        else 
            X_I_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1, grp_bit_reverse_fu_300_X_I_V_ce0, ap_CS_fsm_state2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            X_I_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_V_ce0 <= grp_bit_reverse_fu_300_X_I_V_ce0;
        else 
            X_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            X_I_V_ce1 <= ap_const_logic_1;
        else 
            X_I_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, grp_bit_reverse_fu_300_X_I_V_d0, ap_CS_fsm_state2, ap_block_pp0_stage2, add_ln703_1_fu_1646_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            X_I_V_d0 <= add_ln703_1_fu_1646_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_V_d0 <= grp_bit_reverse_fu_300_X_I_V_d0;
        else 
            X_I_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    X_I_V_d1 <= std_logic_vector(unsigned(p_Val2_51_reg_1810) - unsigned(temp_I_V_fu_1625_p4));

    X_I_V_we0_assign_proc : process(icmp_ln63_reg_1763_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1, grp_bit_reverse_fu_300_X_I_V_we0, ap_CS_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_1763_pp0_iter1_reg = ap_const_lv1_1))) then 
            X_I_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_V_we0 <= grp_bit_reverse_fu_300_X_I_V_we0;
        else 
            X_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_V_we1_assign_proc : process(icmp_ln63_reg_1763, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then 
            X_I_V_we1 <= ap_const_logic_1;
        else 
            X_I_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, X_R_V_addr_reg_1767, X_R_V_addr_1_reg_1778, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, grp_bit_reverse_fu_300_X_R_V_address0, ap_CS_fsm_state2, ap_block_pp0_stage0, sext_ln65_fu_1553_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_R_V_address0 <= X_R_V_addr_1_reg_1778;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_R_V_address0 <= X_R_V_addr_reg_1767;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_V_address0 <= sext_ln65_fu_1553_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_V_address0 <= grp_bit_reverse_fu_300_X_R_V_address0;
        else 
            X_R_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, X_R_V_addr_1_reg_1778_pp0_iter1_reg, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, sext_ln67_fu_1559_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_R_V_address1 <= X_R_V_addr_1_reg_1778_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_V_address1 <= sext_ln67_fu_1559_p1(10 - 1 downto 0);
        else 
            X_R_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, grp_bit_reverse_fu_300_X_R_V_ce0, ap_CS_fsm_state2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            X_R_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_V_ce0 <= grp_bit_reverse_fu_300_X_R_V_ce0;
        else 
            X_R_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            X_R_V_ce1 <= ap_const_logic_1;
        else 
            X_R_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_V_d0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, grp_bit_reverse_fu_300_X_R_V_d0, ap_CS_fsm_state2, sub_ln703_fu_1604_p2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            X_R_V_d0 <= sub_ln703_fu_1604_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_V_d0 <= grp_bit_reverse_fu_300_X_R_V_d0;
        else 
            X_R_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    X_R_V_d1 <= add_ln703_reg_1820;

    X_R_V_we0_assign_proc : process(icmp_ln63_reg_1763, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, grp_bit_reverse_fu_300_X_R_V_we0, ap_CS_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then 
            X_R_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_V_we0 <= grp_bit_reverse_fu_300_X_R_V_we0;
        else 
            X_R_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_V_we1_assign_proc : process(icmp_ln63_reg_1763_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln63_reg_1763_pp0_iter1_reg = ap_const_lv1_1))) then 
            X_R_V_we1 <= ap_const_logic_1;
        else 
            X_R_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a_V_fu_898_p2 <= std_logic_vector(unsigned(tmp_V_6_reg_230) + unsigned(e_V_reg_1682));
    a_fu_758_p2 <= (icmp_ln897_fu_720_p2 and icmp_ln897_1_fu_752_p2);
    add_ln581_1_fu_1043_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_1_fu_1031_p2));
    add_ln581_2_fu_1322_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_2_fu_1310_p2));
    add_ln581_fu_427_p2 <= std_logic_vector(signed(ap_const_lv12_FF5) + signed(F2_fu_415_p2));
    add_ln703_1_fu_1646_p2 <= std_logic_vector(unsigned(X_I_V_q0) + unsigned(temp_I_V_reg_1815));
    add_ln703_fu_1641_p2 <= std_logic_vector(unsigned(X_R_V_q0) + unsigned(temp_R_V_reg_1805));
    add_ln899_fu_778_p2 <= std_logic_vector(signed(ap_const_lv22_3FFFCB) + signed(trunc_ln894_fu_700_p1));
    add_ln908_fu_826_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_fu_694_p2));
    add_ln915_fu_924_p2 <= std_logic_vector(unsigned(sub_ln915_fu_919_p2) + unsigned(select_ln915_fu_912_p3));
    and_ln581_1_fu_1153_p2 <= (xor_ln582_1_fu_1147_p2 and icmp_ln581_1_fu_1037_p2);
    and_ln581_2_fu_1432_p2 <= (xor_ln582_2_fu_1426_p2 and icmp_ln581_2_fu_1316_p2);
    and_ln581_fu_537_p2 <= (xor_ln582_fu_531_p2 and icmp_ln581_fu_421_p2);
    and_ln582_1_fu_1135_p2 <= (xor_ln571_1_fu_1129_p2 and icmp_ln582_1_fu_1067_p2);
    and_ln582_2_fu_1414_p2 <= (xor_ln571_2_fu_1408_p2 and icmp_ln582_2_fu_1346_p2);
    and_ln582_fu_519_p2 <= (xor_ln571_fu_513_p2 and icmp_ln582_fu_451_p2);
    and_ln585_1_fu_555_p2 <= (icmp_ln585_fu_461_p2 and and_ln581_fu_537_p2);
    and_ln585_2_fu_1165_p2 <= (xor_ln585_1_fu_1159_p2 and and_ln581_1_fu_1153_p2);
    and_ln585_3_fu_1171_p2 <= (icmp_ln585_1_fu_1077_p2 and and_ln581_1_fu_1153_p2);
    and_ln585_4_fu_1444_p2 <= (xor_ln585_2_fu_1438_p2 and and_ln581_2_fu_1432_p2);
    and_ln585_5_fu_1450_p2 <= (icmp_ln585_2_fu_1356_p2 and and_ln581_2_fu_1432_p2);
    and_ln585_fu_549_p2 <= (xor_ln585_fu_543_p2 and and_ln581_fu_537_p2);
    and_ln603_1_fu_1189_p2 <= (xor_ln581_1_fu_1183_p2 and icmp_ln603_1_fu_1083_p2);
    and_ln603_2_fu_1468_p2 <= (xor_ln581_2_fu_1462_p2 and icmp_ln603_2_fu_1362_p2);
    and_ln603_fu_573_p2 <= (xor_ln581_fu_567_p2 and icmp_ln603_fu_467_p2);
    and_ln899_fu_792_p2 <= (xor_ln899_fu_772_p2 and p_Result_6_fu_784_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(33);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(34);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(35);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state40 <= ap_CS_fsm(36);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
                ap_block_pp0 <= (((ap_const_boolean_1 = ap_block_pp0_stage2_subdone) and (ap_ST_fsm_pp0_stage2 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp0_stage1_subdone) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm)) or ((ap_const_boolean_1 = ap_block_pp0_stage0_subdone) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_262_ap_done, grp_sin_or_cos_double_s_fu_281_ap_done)
    begin
                ap_block_state32_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_281_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_262_ap_done = ap_const_logic_0));
    end process;

        ap_block_state34_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state34_assign_proc : process(icmp_ln63_fu_1542_p2)
    begin
        if ((icmp_ln63_fu_1542_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state34 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln50_fu_316_p2)
    begin
        if (((icmp_ln50_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_300_assign_proc : process(icmp_ln63_fu_1542_p2)
    begin
                ap_enable_operation_300 <= (icmp_ln63_fu_1542_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_302_assign_proc : process(icmp_ln63_fu_1542_p2)
    begin
                ap_enable_operation_302 <= (icmp_ln63_fu_1542_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_305_assign_proc : process(icmp_ln63_fu_1542_p2)
    begin
                ap_enable_operation_305 <= (icmp_ln63_fu_1542_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_307_assign_proc : process(icmp_ln63_fu_1542_p2)
    begin
                ap_enable_operation_307 <= (icmp_ln63_fu_1542_p2 = ap_const_lv1_1);
    end process;


    ap_enable_operation_309_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_309 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_311_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_311 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_317_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_317 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_319_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_319 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_320_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_320 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_326_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_326 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_327_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_327 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_328_assign_proc : process(icmp_ln63_reg_1763)
    begin
                ap_enable_operation_328 <= (icmp_ln63_reg_1763 = ap_const_lv1_1);
    end process;


    ap_enable_operation_330_assign_proc : process(icmp_ln63_reg_1763_pp0_iter1_reg)
    begin
                ap_enable_operation_330 <= (icmp_ln63_reg_1763_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_331_assign_proc : process(icmp_ln63_reg_1763_pp0_iter1_reg)
    begin
                ap_enable_operation_331 <= (icmp_ln63_reg_1763_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_336_assign_proc : process(icmp_ln63_reg_1763_pp0_iter1_reg)
    begin
                ap_enable_operation_336 <= (icmp_ln63_reg_1763_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_338_assign_proc : process(icmp_ln63_reg_1763_pp0_iter1_reg)
    begin
                ap_enable_operation_338 <= (icmp_ln63_reg_1763_pp0_iter1_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state34_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state34_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state35_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state35_pp0_iter0_stage1 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state36_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
                ap_enable_state36_pp0_iter0_stage2 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state37_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state37_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state38_pp0_iter1_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state38_pp0_iter1_stage1 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state39_pp0_iter1_stage2_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state39_pp0_iter1_stage2 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_256_p4_assign_proc : process(i_0_reg_253, icmp_ln63_reg_1763, ap_CS_fsm_pp0_stage0, i_3_reg_1790, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1763 = ap_const_lv1_1))) then 
            ap_phi_mux_i_0_phi_fu_256_p4 <= i_3_reg_1790;
        else 
            ap_phi_mux_i_0_phi_fu_256_p4 <= i_0_reg_253;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln50_fu_316_p2)
    begin
        if (((icmp_ln50_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_1093_p2 <= std_logic_vector(shift_right(signed(man_V_5_fu_1017_p3),to_integer(unsigned('0' & zext_ln586_1_fu_1089_p1(31-1 downto 0)))));
    ashr_ln586_2_fu_1372_p2 <= std_logic_vector(shift_right(signed(man_V_8_fu_1296_p3),to_integer(unsigned('0' & zext_ln586_2_fu_1368_p1(31-1 downto 0)))));
    ashr_ln586_fu_477_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_401_p3),to_integer(unsigned('0' & zext_ln586_fu_473_p1(31-1 downto 0)))));
    bitcast_ln729_fu_949_p1 <= p_Result_34_fu_937_p5;
    c_V_fu_1237_p3 <= 
        select_ln603_6_fu_1223_p3 when (or_ln603_5_fu_1231_p2(0) = '1') else 
        ap_const_lv22_0;
    e_V_fu_621_p3 <= 
        select_ln603_2_fu_607_p3 when (or_ln603_2_fu_615_p2(0) = '1') else 
        ap_const_lv22_0;
    exp_tmp_V_1_fu_981_p4 <= ireg_V_1_fu_966_p1(62 downto 52);
    exp_tmp_V_2_fu_1260_p4 <= ireg_V_2_fu_1245_p1(62 downto 52);
    exp_tmp_V_fu_365_p4 <= ireg_V_fu_350_p1(62 downto 52);
    grp_bit_reverse_fu_300_ap_start <= grp_bit_reverse_fu_300_ap_start_reg;
    grp_fu_313_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_326_p2),32));
    grp_sin_or_cos_double_s_fu_262_ap_start <= grp_sin_or_cos_double_s_fu_262_ap_start_reg;
    grp_sin_or_cos_double_s_fu_262_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_281_ap_start <= grp_sin_or_cos_double_s_fu_281_ap_start_reg;
    grp_sin_or_cos_double_s_fu_281_do_cos <= ap_const_logic_0;
    i_3_fu_1565_p2 <= std_logic_vector(unsigned(zext_ln51_reg_1655) + unsigned(ap_phi_mux_i_0_phi_fu_256_p4));
    i_lower_fu_1548_p2 <= std_logic_vector(signed(ap_phi_mux_i_0_phi_fu_256_p4) + signed(numBF_reg_1677));
    icmp_ln50_fu_316_p2 <= "1" when (stage_0_reg_218 = ap_const_lv4_B) else "0";
    icmp_ln571_1_fu_1025_p2 <= "1" when (trunc_ln556_1_fu_969_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_2_fu_1304_p2 <= "1" when (trunc_ln556_2_fu_1248_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_409_p2 <= "1" when (trunc_ln556_fu_353_p1 = ap_const_lv63_0) else "0";
    icmp_ln57_fu_629_p2 <= "1" when (i_reg_241 = trunc_ln_reg_1661) else "0";
    icmp_ln581_1_fu_1037_p2 <= "1" when (signed(F2_1_fu_1031_p2) > signed(ap_const_lv12_B)) else "0";
    icmp_ln581_2_fu_1316_p2 <= "1" when (signed(F2_2_fu_1310_p2) > signed(ap_const_lv12_B)) else "0";
    icmp_ln581_fu_421_p2 <= "1" when (signed(F2_fu_415_p2) > signed(ap_const_lv12_B)) else "0";
    icmp_ln582_1_fu_1067_p2 <= "1" when (F2_1_fu_1031_p2 = ap_const_lv12_B) else "0";
    icmp_ln582_2_fu_1346_p2 <= "1" when (F2_2_fu_1310_p2 = ap_const_lv12_B) else "0";
    icmp_ln582_fu_451_p2 <= "1" when (F2_fu_415_p2 = ap_const_lv12_B) else "0";
    icmp_ln585_1_fu_1077_p2 <= "1" when (unsigned(sh_amt_1_fu_1055_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_2_fu_1356_p2 <= "1" when (unsigned(sh_amt_2_fu_1334_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_461_p2 <= "1" when (unsigned(sh_amt_fu_439_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_1083_p2 <= "1" when (unsigned(sh_amt_1_fu_1055_p3) < unsigned(ap_const_lv12_16)) else "0";
    icmp_ln603_2_fu_1362_p2 <= "1" when (unsigned(sh_amt_2_fu_1334_p3) < unsigned(ap_const_lv12_16)) else "0";
    icmp_ln603_fu_467_p2 <= "1" when (unsigned(sh_amt_fu_439_p3) < unsigned(ap_const_lv12_16)) else "0";
    icmp_ln63_fu_1542_p2 <= "1" when (signed(tmp_20_fu_1532_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln885_fu_640_p2 <= "1" when (tmp_V_6_reg_230 = ap_const_lv22_0) else "0";
    icmp_ln897_1_fu_752_p2 <= "0" when (p_Result_s_fu_746_p2 = ap_const_lv22_0) else "1";
    icmp_ln897_fu_720_p2 <= "1" when (signed(tmp_13_fu_710_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_820_p2 <= "1" when (signed(lsb_index_fu_704_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_1_fu_966_p1 <= v_assign_1_reg_1736;
    ireg_V_2_fu_1245_p1 <= v_assign_2_reg_1741;
    ireg_V_fu_350_p1 <= v_assign_reg_1672;
    j_fu_634_p2 <= std_logic_vector(unsigned(i_reg_241) + unsigned(ap_const_lv10_1));
    
    l_fu_686_p3_proc : process(p_Result_33_fu_678_p3)
    begin
        l_fu_686_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_33_fu_678_p3(i) = '1' then
                l_fu_686_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_704_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_694_p2));
    lshr_ln897_fu_740_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv22_3FFFFF),to_integer(unsigned('0' & zext_ln897_fu_736_p1(22-1 downto 0)))));
    lshr_ln908_fu_832_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_816_p1),to_integer(unsigned('0' & add_ln908_fu_826_p2(31-1 downto 0)))));
    m_1_fu_858_p3 <= 
        zext_ln908_fu_838_p1 when (icmp_ln908_fu_820_p2(0) = '1') else 
        shl_ln908_fu_852_p2;
    m_2_fu_870_p2 <= std_logic_vector(unsigned(zext_ln911_fu_866_p1) + unsigned(m_1_fu_858_p3));
    m_6_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_1705),64));
    m_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_fu_660_p3),64));
    man_V_1_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_31_fu_391_p1));
    man_V_2_fu_401_p3 <= 
        man_V_1_fu_395_p2 when (p_Result_30_fu_357_p3(0) = '1') else 
        p_Result_31_fu_391_p1;
    man_V_4_fu_1011_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_36_fu_1007_p1));
    man_V_5_fu_1017_p3 <= 
        man_V_4_fu_1011_p2 when (p_Result_35_fu_973_p3(0) = '1') else 
        p_Result_36_fu_1007_p1;
    man_V_7_fu_1290_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_38_fu_1286_p1));
    man_V_8_fu_1296_p3 <= 
        man_V_7_fu_1290_p2 when (p_Result_37_fu_1252_p3(0) = '1') else 
        p_Result_38_fu_1286_p1;
    mul_ln1192_fu_1615_p0 <= sext_ln1118_reg_1795(22 - 1 downto 0);
    mul_ln1192_fu_1615_p1 <= sext_ln1118_3_reg_1757(22 - 1 downto 0);
    mul_ln1192_fu_1615_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_1615_p0) * signed(mul_ln1192_fu_1615_p1))), 33));
    mul_ln1193_fu_1583_p0 <= sext_ln1118_2_fu_1574_p0;
    mul_ln1193_fu_1583_p1 <= sext_ln1118_3_reg_1757(22 - 1 downto 0);
    mul_ln1193_fu_1583_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1193_fu_1583_p0) * signed(mul_ln1193_fu_1583_p1))), 33));
    mul_ln700_1_fu_1611_p0 <= sext_ln1118_2_reg_1800(22 - 1 downto 0);
    mul_ln700_1_fu_1611_p1 <= sext_ln1118_1_reg_1751(22 - 1 downto 0);
    mul_ln700_1_fu_1611_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_1_fu_1611_p0) * signed(mul_ln700_1_fu_1611_p1))), 33));
    mul_ln700_fu_1578_p0 <= sext_ln1118_fu_1570_p0;
    mul_ln700_fu_1578_p1 <= sext_ln1118_1_reg_1751(22 - 1 downto 0);
    mul_ln700_fu_1578_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_1578_p0) * signed(mul_ln700_fu_1578_p1))), 33));
    numBF_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_1661),32));
    or_ln581_1_fu_1177_p2 <= (or_ln582_1_fu_1141_p2 or icmp_ln581_1_fu_1037_p2);
    or_ln581_2_fu_1456_p2 <= (or_ln582_2_fu_1420_p2 or icmp_ln581_2_fu_1316_p2);
    or_ln581_fu_561_p2 <= (or_ln582_fu_525_p2 or icmp_ln581_fu_421_p2);
    or_ln582_1_fu_1141_p2 <= (icmp_ln582_1_fu_1067_p2 or icmp_ln571_1_fu_1025_p2);
    or_ln582_2_fu_1420_p2 <= (icmp_ln582_2_fu_1346_p2 or icmp_ln571_2_fu_1304_p2);
    or_ln582_fu_525_p2 <= (icmp_ln582_fu_451_p2 or icmp_ln571_fu_409_p2);
    or_ln603_1_fu_601_p2 <= (and_ln585_fu_549_p2 or and_ln582_fu_519_p2);
    or_ln603_2_fu_615_p2 <= (or_ln603_fu_587_p2 or or_ln603_1_fu_601_p2);
    or_ln603_3_fu_1203_p2 <= (and_ln603_1_fu_1189_p2 or and_ln585_3_fu_1171_p2);
    or_ln603_4_fu_1217_p2 <= (and_ln585_2_fu_1165_p2 or and_ln582_1_fu_1135_p2);
    or_ln603_5_fu_1231_p2 <= (or_ln603_4_fu_1217_p2 or or_ln603_3_fu_1203_p2);
    or_ln603_6_fu_1482_p2 <= (and_ln603_2_fu_1468_p2 or and_ln585_5_fu_1450_p2);
    or_ln603_7_fu_1496_p2 <= (and_ln585_4_fu_1444_p2 or and_ln582_2_fu_1414_p2);
    or_ln603_8_fu_1510_p2 <= (or_ln603_7_fu_1496_p2 or or_ln603_6_fu_1482_p2);
    or_ln603_fu_587_p2 <= (and_ln603_fu_573_p2 or and_ln585_1_fu_555_p2);
    or_ln899_fu_798_p2 <= (and_ln899_fu_792_p2 or a_fu_758_p2);
    or_ln_fu_804_p3 <= (ap_const_lv31_0 & or_ln899_fu_798_p2);
    p_Result_30_fu_357_p3 <= ireg_V_fu_350_p1(63 downto 63);
    p_Result_31_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_383_p3),54));
    p_Result_32_fu_646_p3 <= tmp_V_6_reg_230(21 downto 21);
    p_Result_33_fu_678_p3 <= (ap_const_lv10_3FF & p_Result_3_fu_668_p4);
    p_Result_34_fu_937_p5 <= (tmp_2_fu_930_p3 & m_6_fu_909_p1(51 downto 0));
    p_Result_35_fu_973_p3 <= ireg_V_1_fu_966_p1(63 downto 63);
    p_Result_36_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_999_p3),54));
    p_Result_37_fu_1252_p3 <= ireg_V_2_fu_1245_p1(63 downto 63);
    p_Result_38_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1278_p3),54));
    
    p_Result_3_fu_668_p4_proc : process(tmp_V_7_fu_660_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(22+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable p_Result_3_fu_668_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(22 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_15(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_7_fu_660_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(22-1-unsigned(ap_const_lv32_15(5-1 downto 0)));
            for p_Result_3_fu_668_p4_i in 0 to 22-1 loop
                v0_cpy(p_Result_3_fu_668_p4_i) := tmp_V_7_fu_660_p3(22-1-p_Result_3_fu_668_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(22-1 downto 0)))));
        res_mask := res_mask(22-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_3_fu_668_p4 <= resvalue(22-1 downto 0);
    end process;

    p_Result_6_fu_784_p3 <= tmp_V_7_fu_660_p3(to_integer(unsigned(add_ln899_fu_778_p2)) downto to_integer(unsigned(add_ln899_fu_778_p2))) when (to_integer(unsigned(add_ln899_fu_778_p2))>= 0 and to_integer(unsigned(add_ln899_fu_778_p2))<=21) else "-";
    p_Result_s_fu_746_p2 <= (tmp_V_7_fu_660_p3 and lshr_ln897_fu_740_p2);
    ret_V_20_fu_1619_p2 <= std_logic_vector(unsigned(mul_ln700_1_fu_1611_p2) + unsigned(mul_ln1192_fu_1615_p2));
    ret_V_fu_1588_p2 <= std_logic_vector(unsigned(mul_ln700_fu_1578_p2) - unsigned(mul_ln1193_fu_1583_p2));
    s_V_fu_1516_p3 <= 
        select_ln603_10_fu_1502_p3 when (or_ln603_8_fu_1510_p2(0) = '1') else 
        ap_const_lv22_0;
    select_ln588_1_fu_1111_p3 <= 
        ap_const_lv22_3FFFFF when (tmp_17_fu_1103_p3(0) = '1') else 
        ap_const_lv22_0;
    select_ln588_2_fu_1390_p3 <= 
        ap_const_lv22_3FFFFF when (tmp_19_fu_1382_p3(0) = '1') else 
        ap_const_lv22_0;
    select_ln588_fu_495_p3 <= 
        ap_const_lv22_3FFFFF when (tmp_11_fu_487_p3(0) = '1') else 
        ap_const_lv22_0;
    select_ln603_10_fu_1502_p3 <= 
        select_ln603_8_fu_1474_p3 when (or_ln603_6_fu_1482_p2(0) = '1') else 
        select_ln603_9_fu_1488_p3;
    select_ln603_1_fu_593_p3 <= 
        select_ln588_fu_495_p3 when (and_ln585_fu_549_p2(0) = '1') else 
        trunc_ln583_fu_457_p1;
    select_ln603_2_fu_607_p3 <= 
        select_ln603_fu_579_p3 when (or_ln603_fu_587_p2(0) = '1') else 
        select_ln603_1_fu_593_p3;
    select_ln603_4_fu_1195_p3 <= 
        shl_ln604_1_fu_1123_p2 when (and_ln603_1_fu_1189_p2(0) = '1') else 
        trunc_ln586_1_fu_1099_p1;
    select_ln603_5_fu_1209_p3 <= 
        select_ln588_1_fu_1111_p3 when (and_ln585_2_fu_1165_p2(0) = '1') else 
        trunc_ln583_1_fu_1073_p1;
    select_ln603_6_fu_1223_p3 <= 
        select_ln603_4_fu_1195_p3 when (or_ln603_3_fu_1203_p2(0) = '1') else 
        select_ln603_5_fu_1209_p3;
    select_ln603_8_fu_1474_p3 <= 
        shl_ln604_2_fu_1402_p2 when (and_ln603_2_fu_1468_p2(0) = '1') else 
        trunc_ln586_2_fu_1378_p1;
    select_ln603_9_fu_1488_p3 <= 
        select_ln588_2_fu_1390_p3 when (and_ln585_4_fu_1444_p2(0) = '1') else 
        trunc_ln583_2_fu_1352_p1;
    select_ln603_fu_579_p3 <= 
        shl_ln604_fu_507_p2 when (and_ln603_fu_573_p2(0) = '1') else 
        trunc_ln586_fu_483_p1;
    select_ln885_fu_953_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_reg_1695(0) = '1') else 
        bitcast_ln729_fu_949_p1;
    select_ln915_fu_912_p3 <= 
        ap_const_lv11_3FF when (tmp_15_reg_1710(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1118_1_fu_1524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_V_fu_1237_p3),33));

    sext_ln1118_2_fu_1574_p0 <= X_I_V_q0;
        sext_ln1118_2_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_2_fu_1574_p0),33));

        sext_ln1118_3_fu_1528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_V_fu_1516_p3),33));

    sext_ln1118_fu_1570_p0 <= X_R_V_q0;
        sext_ln1118_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_fu_1570_p0),33));

        sext_ln581_1_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_fu_1055_p3),32));

    sext_ln581_1cast_fu_1119_p1 <= sext_ln581_1_fu_1063_p1(22 - 1 downto 0);
        sext_ln581_2_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_fu_1334_p3),32));

    sext_ln581_2cast_fu_1398_p1 <= sext_ln581_2_fu_1342_p1(22 - 1 downto 0);
        sext_ln581_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_439_p3),32));

    sext_ln581cast_fu_503_p1 <= sext_ln581_fu_447_p1(22 - 1 downto 0);
        sext_ln65_fu_1553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_1548_p2),64));

        sext_ln67_fu_1559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_i_0_phi_fu_256_p4),64));

    sh_amt_1_fu_1055_p3 <= 
        add_ln581_1_fu_1043_p2 when (icmp_ln581_1_fu_1037_p2(0) = '1') else 
        sub_ln581_1_fu_1049_p2;
    sh_amt_2_fu_1334_p3 <= 
        add_ln581_2_fu_1322_p2 when (icmp_ln581_2_fu_1316_p2(0) = '1') else 
        sub_ln581_2_fu_1328_p2;
    sh_amt_fu_439_p3 <= 
        add_ln581_fu_427_p2 when (icmp_ln581_fu_421_p2(0) = '1') else 
        sub_ln581_fu_433_p2;
    shl_ln604_1_fu_1123_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_1_fu_1073_p1),to_integer(unsigned('0' & sext_ln581_1cast_fu_1119_p1(22-1 downto 0)))));
    shl_ln604_2_fu_1402_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_2_fu_1352_p1),to_integer(unsigned('0' & sext_ln581_2cast_fu_1398_p1(22-1 downto 0)))));
    shl_ln604_fu_507_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_457_p1),to_integer(unsigned('0' & sext_ln581cast_fu_503_p1(22-1 downto 0)))));
    shl_ln908_fu_852_p2 <= std_logic_vector(shift_left(unsigned(m_fu_812_p1),to_integer(unsigned('0' & zext_ln908_1_fu_848_p1(31-1 downto 0)))));
    stage_fu_903_p2 <= std_logic_vector(unsigned(stage_0_reg_218) + unsigned(ap_const_lv4_1));
    sub_ln581_1_fu_1049_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_1_fu_1031_p2));
    sub_ln581_2_fu_1328_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_2_fu_1310_p2));
    sub_ln581_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv12_B) - unsigned(F2_fu_415_p2));
    sub_ln703_fu_1604_p2 <= std_logic_vector(unsigned(X_R_V_q1) - unsigned(temp_R_V_fu_1594_p4));
    sub_ln894_fu_694_p2 <= std_logic_vector(unsigned(ap_const_lv32_16) - unsigned(l_fu_686_p3));
    sub_ln897_fu_730_p2 <= std_logic_vector(unsigned(ap_const_lv5_C) - unsigned(trunc_ln897_fu_726_p1));
    sub_ln908_fu_842_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_fu_694_p2));
    sub_ln915_fu_919_p2 <= std_logic_vector(unsigned(ap_const_lv11_B) - unsigned(trunc_ln893_reg_1715));
    temp_I_V_fu_1625_p4 <= ret_V_20_fu_1619_p2(32 downto 11);
    temp_R_V_fu_1594_p4 <= ret_V_fu_1588_p2(32 downto 11);
    tmp_11_fu_487_p3 <= ireg_V_fu_350_p1(63 downto 63);
    tmp_13_fu_710_p4 <= lsb_index_fu_704_p2(31 downto 1);
    tmp_14_fu_764_p3 <= lsb_index_fu_704_p2(31 downto 31);
    tmp_17_fu_1103_p3 <= ireg_V_1_fu_966_p1(63 downto 63);
    tmp_19_fu_1382_p3 <= ireg_V_2_fu_1245_p1(63 downto 63);
    tmp_20_fu_1532_p4 <= ap_phi_mux_i_0_phi_fu_256_p4(31 downto 10);
    tmp_2_fu_930_p3 <= (p_Result_32_reg_1700 & add_ln915_fu_924_p2);
    tmp_3_fu_999_p3 <= (ap_const_lv1_1 & trunc_ln565_1_fu_995_p1);
    tmp_6_fu_1278_p3 <= (ap_const_lv1_1 & trunc_ln565_2_fu_1274_p1);
    tmp_9_fu_383_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_379_p1);
    tmp_V_7_fu_660_p3 <= 
        tmp_V_fu_654_p2 when (p_Result_32_fu_646_p3(0) = '1') else 
        tmp_V_6_reg_230;
    tmp_V_fu_654_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(tmp_V_6_reg_230));
    trunc_ln556_1_fu_969_p1 <= ireg_V_1_fu_966_p1(63 - 1 downto 0);
    trunc_ln556_2_fu_1248_p1 <= ireg_V_2_fu_1245_p1(63 - 1 downto 0);
    trunc_ln556_fu_353_p1 <= ireg_V_fu_350_p1(63 - 1 downto 0);
    trunc_ln565_1_fu_995_p1 <= ireg_V_1_fu_966_p1(52 - 1 downto 0);
    trunc_ln565_2_fu_1274_p1 <= ireg_V_2_fu_1245_p1(52 - 1 downto 0);
    trunc_ln565_fu_379_p1 <= ireg_V_fu_350_p1(52 - 1 downto 0);
    trunc_ln583_1_fu_1073_p1 <= man_V_5_fu_1017_p3(22 - 1 downto 0);
    trunc_ln583_2_fu_1352_p1 <= man_V_8_fu_1296_p3(22 - 1 downto 0);
    trunc_ln583_fu_457_p1 <= man_V_2_fu_401_p3(22 - 1 downto 0);
    trunc_ln586_1_fu_1099_p1 <= ashr_ln586_1_fu_1093_p2(22 - 1 downto 0);
    trunc_ln586_2_fu_1378_p1 <= ashr_ln586_2_fu_1372_p2(22 - 1 downto 0);
    trunc_ln586_fu_483_p1 <= ashr_ln586_fu_477_p2(22 - 1 downto 0);
    trunc_ln893_fu_894_p1 <= l_fu_686_p3(11 - 1 downto 0);
    trunc_ln894_fu_700_p1 <= sub_ln894_fu_694_p2(22 - 1 downto 0);
    trunc_ln897_fu_726_p1 <= sub_ln894_fu_694_p2(5 - 1 downto 0);
    xor_ln571_1_fu_1129_p2 <= (icmp_ln571_1_fu_1025_p2 xor ap_const_lv1_1);
    xor_ln571_2_fu_1408_p2 <= (icmp_ln571_2_fu_1304_p2 xor ap_const_lv1_1);
    xor_ln571_fu_513_p2 <= (icmp_ln571_fu_409_p2 xor ap_const_lv1_1);
    xor_ln581_1_fu_1183_p2 <= (or_ln581_1_fu_1177_p2 xor ap_const_lv1_1);
    xor_ln581_2_fu_1462_p2 <= (or_ln581_2_fu_1456_p2 xor ap_const_lv1_1);
    xor_ln581_fu_567_p2 <= (or_ln581_fu_561_p2 xor ap_const_lv1_1);
    xor_ln582_1_fu_1147_p2 <= (or_ln582_1_fu_1141_p2 xor ap_const_lv1_1);
    xor_ln582_2_fu_1426_p2 <= (or_ln582_2_fu_1420_p2 xor ap_const_lv1_1);
    xor_ln582_fu_531_p2 <= (or_ln582_fu_525_p2 xor ap_const_lv1_1);
    xor_ln585_1_fu_1159_p2 <= (icmp_ln585_1_fu_1077_p2 xor ap_const_lv1_1);
    xor_ln585_2_fu_1438_p2 <= (icmp_ln585_2_fu_1356_p2 xor ap_const_lv1_1);
    xor_ln585_fu_543_p2 <= (icmp_ln585_fu_461_p2 xor ap_const_lv1_1);
    xor_ln899_fu_772_p2 <= (tmp_14_fu_764_p3 xor ap_const_lv1_1);
    zext_ln461_1_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_1_fu_981_p4),12));
    zext_ln461_2_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_2_fu_1260_p4),12));
    zext_ln461_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_365_p4),12));
    zext_ln50_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_0_reg_218),11));
    zext_ln51_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_326_p2),32));
    zext_ln586_1_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_1_fu_1063_p1),54));
    zext_ln586_2_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_2_fu_1342_p1),54));
    zext_ln586_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_447_p1),54));
    zext_ln891_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_241),32));
    zext_ln897_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_730_p2),22));
    zext_ln907_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_fu_660_p3),32));
    zext_ln908_1_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_842_p2),64));
    zext_ln908_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_832_p2),64));
    zext_ln911_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_804_p3),64));
end behav;
