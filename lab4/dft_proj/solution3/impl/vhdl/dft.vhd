-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sample_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_real_V_ce0 : OUT STD_LOGIC;
    sample_real_V_we0 : OUT STD_LOGIC;
    sample_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sample_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    sample_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_imag_V_ce0 : OUT STD_LOGIC;
    sample_imag_V_we0 : OUT STD_LOGIC;
    sample_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sample_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.955200,HLS_SYN_LAT=138498,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=109,HLS_SYN_FF=4300,HLS_SYN_LUT=9888,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_3F9921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "0011111110011001001000011111101101010100010001000010011000011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_FF4 : STD_LOGIC_VECTOR (11 downto 0) := "111111110100";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_24 : STD_LOGIC_VECTOR (10 downto 0) := "00000100100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_V_2_reg_270 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_2_reg_270_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_V_2_reg_270_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_2_reg_270_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_2_reg_270_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_2_reg_270_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_282 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_sin_or_cos_double_s_fu_304_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_332 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_ln27_reg_1705 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1705_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state15_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln27_reg_1705_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_1670 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln18_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1680 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_1685 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_real_V_addr_reg_1690 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal temp_imag_V_addr_reg_1695 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_fu_648_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_reg_1700 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln27_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1705_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1705_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1705_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1705_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1705_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_658_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_1709 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln1118_fu_664_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1118_reg_1714 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln885_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1719 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_37_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_37_reg_1724 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln888_fu_697_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln888_reg_1729 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln894_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1736 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln897_1_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_reg_1743 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_769_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1748 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln885_fu_964_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln885_reg_1753 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_V_fu_1259_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_V_reg_1768 : STD_LOGIC_VECTOR (15 downto 0);
    signal sample_real_V_load_reg_1773 : STD_LOGIC_VECTOR (15 downto 0);
    signal sample_imag_V_load_reg_1778 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_V_fu_1555_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_V_reg_1783 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_2_fu_1566_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_2_reg_1788 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_4_fu_1569_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_4_reg_1793 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1192_fu_1641_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1192_reg_1798 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1192_3_fu_1647_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1192_3_reg_1803 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_fu_1629_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_1811 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln41_fu_1635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_reg_1816 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln40_fu_1623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal temp_real_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_real_V_ce0 : STD_LOGIC;
    signal temp_real_V_we0 : STD_LOGIC;
    signal temp_real_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_imag_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_imag_V_ce0 : STD_LOGIC;
    signal temp_imag_V_we0 : STD_LOGIC;
    signal temp_imag_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sin_or_cos_double_s_fu_304_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_304_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_304_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_304_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_304_do_cos : STD_LOGIC;
    signal i_0_reg_258 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_phi_mux_tmp_V_2_phi_fu_274_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_mul_phi_fu_286_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_293 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_304_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln19_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ireg_V_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_374_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_388_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_1_fu_392_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_36_fu_400_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_35_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_404_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_362_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_424_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_436_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_448_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_410_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_13_fu_476_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_492_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_496_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_14_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln581cast_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln571_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_526_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_fu_502_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln585_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln582_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_598_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_fu_612_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln603_1_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_626_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_640_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_fu_683_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_4_fu_689_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_1_fu_701_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_38_fu_711_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_719_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln897_fu_737_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_fu_741_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_fu_747_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln897_fu_751_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_s_fu_757_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal lsb_index_fu_773_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_778_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln897_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_813_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_849_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln908_fu_854_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln908_fu_858_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln908_fu_867_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln908_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln908_2_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_876_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_832_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln911_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_882_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_894_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_900_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_18_fu_914_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_930_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_922_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_935_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_941_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_39_fu_948_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln729_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_1_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_1_fu_993_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_1_fu_1007_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_fu_1011_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_41_fu_1019_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_40_fu_985_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_4_fu_1023_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_1_fu_981_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_1_fu_1003_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_1043_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_1_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_1_fu_1055_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_1061_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_fu_1067_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_5_fu_1029_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_20_fu_1095_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_1_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_1111_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_1115_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_21_fu_1125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_1_fu_1085_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln581_1cast_fu_1141_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln571_1_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_1_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_1_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_1_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_1_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_1_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_1145_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_1_fu_1121_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln585_3_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_2_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_1_fu_1133_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln582_1_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_3_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_4_fu_1217_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_5_fu_1231_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln603_4_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_5_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_6_fu_1245_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln30_fu_1267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_2_fu_1275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_2_fu_1289_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_2_fu_1303_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_3_fu_1307_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_42_fu_1315_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_22_fu_1281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_7_fu_1319_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln30_fu_1271_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_2_fu_1299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_1339_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_2_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_2_fu_1351_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_2_fu_1357_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_fu_1363_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_8_fu_1325_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_23_fu_1391_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_2_fu_1371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_2_fu_1407_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_2_fu_1411_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_24_fu_1421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_2_fu_1381_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln581_2cast_fu_1437_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln571_2_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_2_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_2_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_2_fu_1459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_2_fu_1465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_2_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_2_fu_1471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_2_fu_1477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_2_fu_1495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_2_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_2_fu_1501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_fu_1507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_2_fu_1441_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_2_fu_1417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln585_5_fu_1489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_4_fu_1483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_2_fu_1429_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln582_2_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_6_fu_1521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_8_fu_1513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_9_fu_1527_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln603_7_fu_1535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_8_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_10_fu_1541_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1653_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_V_fu_1575_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_fu_1583_p2 : STD_LOGIC_VECTOR (27 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_1583_p2 : signal is "no";
    signal grp_fu_1660_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_V_2_fu_1599_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal ret_V_19_fu_1607_p2 : STD_LOGIC_VECTOR (27 downto 0);
    attribute use_dsp48 of ret_V_19_fu_1607_p2 : signal is "no";
    signal mul_ln1192_fu_1641_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1_fu_1563_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1192_3_fu_1647_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1653_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1653_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_3_fu_1572_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1660_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1660_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1409 : BOOLEAN;
    signal ap_condition_1413 : BOOLEAN;

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_dmul_64ns_64nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_sitodp_32ns_6jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_mul_mul_16s_1kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component dft_mac_mulsub_16lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component dft_mac_muladd_16mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component dft_temp_real_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    temp_real_V_U : component dft_temp_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_real_V_address0,
        ce0 => temp_real_V_ce0,
        we0 => temp_real_V_we0,
        d0 => temp_real_V_d0,
        q0 => temp_real_V_q0);

    temp_imag_V_U : component dft_temp_real_V
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_imag_V_address0,
        ce0 => temp_imag_V_ce0,
        we0 => temp_imag_V_we0,
        d0 => temp_imag_V_d0,
        q0 => temp_imag_V_q0);

    grp_sin_or_cos_double_s_fu_304 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_304_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_304_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_304_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_304_ap_ready,
        ap_ce => ap_const_logic_1,
        t_in => select_ln885_reg_1753,
        do_cos => grp_sin_or_cos_double_s_fu_304_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_304_ap_return);

    dft_dmul_64ns_64nibs_U17 : component dft_dmul_64ns_64nibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_1680,
        din1 => ap_const_lv64_3F9921FB5444261E,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    dft_sitodp_32ns_6jbC_U18 : component dft_sitodp_32ns_6jbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_329_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p1);

    dft_mul_mul_16s_1kbM_U19 : component dft_mul_mul_16s_1kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => sample_real_V_load_reg_1773,
        din1 => mul_ln1192_fu_1641_p1,
        dout => mul_ln1192_fu_1641_p2);

    dft_mul_mul_16s_1kbM_U20 : component dft_mul_mul_16s_1kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => sample_imag_V_load_reg_1778,
        din1 => mul_ln1192_3_fu_1647_p1,
        dout => mul_ln1192_3_fu_1647_p2);

    dft_mac_mulsub_16lbW_U21 : component dft_mac_mulsub_16lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_1653_p0,
        din1 => grp_fu_1653_p1,
        din2 => mul_ln1192_reg_1798,
        dout => grp_fu_1653_p3);

    dft_mac_muladd_16mb6_U22 : component dft_mac_muladd_16mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_1660_p0,
        din1 => grp_fu_1660_p1,
        din2 => mul_ln1192_3_reg_1803,
        dout => grp_fu_1660_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_304_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_304_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
                    grp_sin_or_cos_double_s_fu_304_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_304_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_304_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_258 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_0_reg_258 <= i_2_reg_1670;
            end if; 
        end if;
    end process;

    i_1_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_336_p2 = ap_const_lv1_1))) then 
                i_1_reg_293 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_1_reg_293 <= i_reg_1811;
            end if; 
        end if;
    end process;

    phi_mul_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                phi_mul_reg_282 <= add_ln1118_reg_1714;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_mul_reg_282 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    tmp_V_2_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                tmp_V_2_reg_270 <= j_reg_1709;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                tmp_V_2_reg_270 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_652_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln1118_reg_1714 <= add_ln1118_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1705_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                c_V_reg_1768 <= c_V_fu_1259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_1670 <= i_2_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_reg_1811 <= i_fu_1629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln27_reg_1705 <= icmp_ln27_fu_652_p2;
                icmp_ln27_reg_1705_pp0_iter1_reg <= icmp_ln27_reg_1705;
                icmp_ln27_reg_1705_pp0_iter2_reg <= icmp_ln27_reg_1705_pp0_iter1_reg;
                icmp_ln27_reg_1705_pp0_iter3_reg <= icmp_ln27_reg_1705_pp0_iter2_reg;
                icmp_ln27_reg_1705_pp0_iter4_reg <= icmp_ln27_reg_1705_pp0_iter3_reg;
                icmp_ln27_reg_1705_pp0_iter5_reg <= icmp_ln27_reg_1705_pp0_iter4_reg;
                icmp_ln27_reg_1705_pp0_iter6_reg <= icmp_ln27_reg_1705_pp0_iter5_reg;
                icmp_ln27_reg_1705_pp0_iter7_reg <= icmp_ln27_reg_1705_pp0_iter6_reg;
                tmp_V_2_reg_270_pp0_iter1_reg <= tmp_V_2_reg_270;
                tmp_V_2_reg_270_pp0_iter2_reg <= tmp_V_2_reg_270_pp0_iter1_reg;
                tmp_V_2_reg_270_pp0_iter3_reg <= tmp_V_2_reg_270_pp0_iter2_reg;
                tmp_V_2_reg_270_pp0_iter4_reg <= tmp_V_2_reg_270_pp0_iter3_reg;
                tmp_V_2_reg_270_pp0_iter5_reg <= tmp_V_2_reg_270_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_652_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln885_reg_1719 <= icmp_ln885_fu_669_p2;
                icmp_ln897_1_reg_1743 <= icmp_ln897_1_fu_763_p2;
                p_Result_37_reg_1724 <= ap_phi_mux_phi_mul_phi_fu_286_p4(23 downto 23);
                sext_ln888_reg_1729 <= sext_ln888_fu_697_p1;
                sub_ln894_reg_1736 <= sub_ln894_fu_731_p2;
                trunc_ln893_reg_1748 <= trunc_ln893_fu_769_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_reg_1709 <= j_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1705_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1192_3_reg_1803 <= mul_ln1192_3_fu_1647_p2;
                mul_ln1192_reg_1798 <= mul_ln1192_fu_1641_p2;
                s_V_reg_1783 <= s_V_fu_1555_p3;
                sext_ln1118_2_reg_1788 <= sext_ln1118_2_fu_1566_p1;
                sext_ln1118_4_reg_1793 <= sext_ln1118_4_fu_1569_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln27_reg_1705_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln27_reg_1705_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_332 <= grp_sin_or_cos_double_s_fu_304_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1705_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sample_imag_V_load_reg_1778 <= sample_imag_V_q0;
                sample_real_V_load_reg_1773 <= sample_real_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln885_reg_1753 <= select_ln885_fu_964_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sext_ln1118_reg_1700 <= sext_ln1118_fu_648_p1;
                temp_imag_V_addr_reg_1695 <= zext_ln19_fu_353_p1(8 - 1 downto 0);
                temp_real_V_addr_reg_1690 <= zext_ln19_fu_353_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_1680 <= grp_fu_329_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                v_assign_reg_1685 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_1623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    zext_ln41_reg_1816(8 downto 0) <= zext_ln41_fu_1635_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln41_reg_1816(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state2, icmp_ln18_fu_336_p2, icmp_ln27_fu_652_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state31, icmp_ln40_fu_1623_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln27_fu_652_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln27_fu_652_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln40_fu_1623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_1043_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_1_fu_1003_p1));
    F2_2_fu_1339_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_2_fu_1299_p1));
    F2_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_384_p1));
    a_fu_794_p2 <= (icmp_ln897_fu_788_p2 and icmp_ln897_1_reg_1743);
    add_ln1118_fu_664_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_mul_phi_fu_286_p4) + unsigned(sext_ln1118_reg_1700));
    add_ln581_1_fu_1055_p2 <= std_logic_vector(signed(ap_const_lv12_FF4) + signed(F2_1_fu_1043_p2));
    add_ln581_2_fu_1351_p2 <= std_logic_vector(signed(ap_const_lv12_FF4) + signed(F2_2_fu_1339_p2));
    add_ln581_fu_436_p2 <= std_logic_vector(signed(ap_const_lv12_FF4) + signed(F2_fu_424_p2));
    add_ln908_fu_849_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1736));
    add_ln915_fu_935_p2 <= std_logic_vector(unsigned(sub_ln915_fu_930_p2) + unsigned(select_ln915_fu_922_p3));
    and_ln581_1_fu_1175_p2 <= (xor_ln582_1_fu_1169_p2 and icmp_ln581_1_fu_1049_p2);
    and_ln581_2_fu_1471_p2 <= (xor_ln582_2_fu_1465_p2 and icmp_ln581_2_fu_1345_p2);
    and_ln581_fu_556_p2 <= (xor_ln582_fu_550_p2 and icmp_ln581_fu_430_p2);
    and_ln582_1_fu_1157_p2 <= (xor_ln571_1_fu_1151_p2 and icmp_ln582_1_fu_1079_p2);
    and_ln582_2_fu_1453_p2 <= (xor_ln571_2_fu_1447_p2 and icmp_ln582_2_fu_1375_p2);
    and_ln582_fu_538_p2 <= (xor_ln571_fu_532_p2 and icmp_ln582_fu_460_p2);
    and_ln585_1_fu_574_p2 <= (icmp_ln585_fu_470_p2 and and_ln581_fu_556_p2);
    and_ln585_2_fu_1187_p2 <= (xor_ln585_1_fu_1181_p2 and and_ln581_1_fu_1175_p2);
    and_ln585_3_fu_1193_p2 <= (icmp_ln585_1_fu_1089_p2 and and_ln581_1_fu_1175_p2);
    and_ln585_4_fu_1483_p2 <= (xor_ln585_2_fu_1477_p2 and and_ln581_2_fu_1471_p2);
    and_ln585_5_fu_1489_p2 <= (icmp_ln585_2_fu_1385_p2 and and_ln581_2_fu_1471_p2);
    and_ln585_fu_568_p2 <= (xor_ln585_fu_562_p2 and and_ln581_fu_556_p2);
    and_ln603_1_fu_1211_p2 <= (xor_ln581_1_fu_1205_p2 and icmp_ln603_1_fu_1105_p2);
    and_ln603_2_fu_1507_p2 <= (xor_ln581_2_fu_1501_p2 and icmp_ln603_2_fu_1401_p2);
    and_ln603_fu_592_p2 <= (xor_ln581_fu_586_p2 and icmp_ln603_fu_486_p2);
    and_ln899_fu_820_p2 <= (xor_ln899_fu_807_p2 and p_Result_4_fu_813_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state31 <= ap_CS_fsm(16);
    ap_CS_fsm_state32 <= ap_CS_fsm(17);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1409_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln27_reg_1705, ap_block_pp0_stage0)
    begin
                ap_condition_1409 <= ((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1413_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln27_reg_1705_pp0_iter1_reg, ap_block_pp0_stage1)
    begin
                ap_condition_1413 <= ((icmp_ln27_reg_1705_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state14_assign_proc : process(icmp_ln27_fu_652_p2)
    begin
        if ((icmp_ln27_fu_652_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state31, icmp_ln40_fu_1623_p2)
    begin
        if (((icmp_ln40_fu_1623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_mul_phi_fu_286_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, phi_mul_reg_282, icmp_ln27_reg_1705, add_ln1118_reg_1714, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_phi_mul_phi_fu_286_p4 <= add_ln1118_reg_1714;
        else 
            ap_phi_mux_phi_mul_phi_fu_286_p4 <= phi_mul_reg_282;
        end if; 
    end process;


    ap_phi_mux_tmp_V_2_phi_fu_274_p4_assign_proc : process(tmp_V_2_reg_270, ap_CS_fsm_pp0_stage0, icmp_ln27_reg_1705, j_reg_1709, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln27_reg_1705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_V_2_phi_fu_274_p4 <= j_reg_1709;
        else 
            ap_phi_mux_tmp_V_2_phi_fu_274_p4 <= tmp_V_2_reg_270;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31, icmp_ln40_fu_1623_p2)
    begin
        if (((icmp_ln40_fu_1623_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_1115_p2 <= std_logic_vector(shift_right(signed(man_V_5_fu_1029_p3),to_integer(unsigned('0' & zext_ln586_1_fu_1111_p1(31-1 downto 0)))));
    ashr_ln586_2_fu_1411_p2 <= std_logic_vector(shift_right(signed(man_V_8_fu_1325_p3),to_integer(unsigned('0' & zext_ln586_2_fu_1407_p1(31-1 downto 0)))));
    ashr_ln586_fu_496_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_410_p3),to_integer(unsigned('0' & zext_ln586_fu_492_p1(31-1 downto 0)))));
    bitcast_ln30_fu_1267_p1 <= reg_332;
    bitcast_ln729_fu_960_p1 <= p_Result_39_fu_948_p5;
    c_V_fu_1259_p3 <= 
        select_ln603_6_fu_1245_p3 when (or_ln603_5_fu_1253_p2(0) = '1') else 
        ap_const_lv16_0;
    exp_tmp_V_1_fu_993_p4 <= ireg_V_1_fu_977_p1(62 downto 52);
    exp_tmp_V_2_fu_1289_p4 <= ireg_V_2_fu_1275_p2(62 downto 52);
    exp_tmp_V_fu_374_p4 <= ireg_V_fu_359_p1(62 downto 52);
    grp_fu_1653_p0 <= sext_ln1118_4_reg_1793(16 - 1 downto 0);
    grp_fu_1653_p1 <= sext_ln1118_3_fu_1572_p1(16 - 1 downto 0);
    grp_fu_1660_p0 <= sext_ln1118_2_reg_1788(16 - 1 downto 0);
    grp_fu_1660_p1 <= sext_ln1118_3_fu_1572_p1(16 - 1 downto 0);
    grp_fu_329_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_258),32));
    grp_sin_or_cos_double_s_fu_304_ap_start <= grp_sin_or_cos_double_s_fu_304_ap_start_reg;

    grp_sin_or_cos_double_s_fu_304_do_cos_assign_proc : process(ap_enable_reg_pp0_iter1, ap_condition_1409, ap_condition_1413)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1413)) then 
                grp_sin_or_cos_double_s_fu_304_do_cos <= ap_const_logic_0;
            elsif ((ap_const_boolean_1 = ap_condition_1409)) then 
                grp_sin_or_cos_double_s_fu_304_do_cos <= ap_const_logic_1;
            else 
                grp_sin_or_cos_double_s_fu_304_do_cos <= 'X';
            end if;
        else 
            grp_sin_or_cos_double_s_fu_304_do_cos <= 'X';
        end if; 
    end process;

    i_2_fu_342_p2 <= std_logic_vector(unsigned(i_0_reg_258) + unsigned(ap_const_lv9_1));
    i_fu_1629_p2 <= std_logic_vector(unsigned(i_1_reg_293) + unsigned(ap_const_lv9_1));
    icmp_ln18_fu_336_p2 <= "1" when (i_0_reg_258 = ap_const_lv9_100) else "0";
    icmp_ln27_fu_652_p2 <= "1" when (ap_phi_mux_tmp_V_2_phi_fu_274_p4 = ap_const_lv9_100) else "0";
    icmp_ln40_fu_1623_p2 <= "1" when (i_1_reg_293 = ap_const_lv9_100) else "0";
    icmp_ln571_1_fu_1037_p2 <= "1" when (trunc_ln556_1_fu_981_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_2_fu_1333_p2 <= "1" when (trunc_ln30_fu_1271_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_418_p2 <= "1" when (trunc_ln556_fu_362_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_1049_p2 <= "1" when (signed(F2_1_fu_1043_p2) > signed(ap_const_lv12_C)) else "0";
    icmp_ln581_2_fu_1345_p2 <= "1" when (signed(F2_2_fu_1339_p2) > signed(ap_const_lv12_C)) else "0";
    icmp_ln581_fu_430_p2 <= "1" when (signed(F2_fu_424_p2) > signed(ap_const_lv12_C)) else "0";
    icmp_ln582_1_fu_1079_p2 <= "1" when (F2_1_fu_1043_p2 = ap_const_lv12_C) else "0";
    icmp_ln582_2_fu_1375_p2 <= "1" when (F2_2_fu_1339_p2 = ap_const_lv12_C) else "0";
    icmp_ln582_fu_460_p2 <= "1" when (F2_fu_424_p2 = ap_const_lv12_C) else "0";
    icmp_ln585_1_fu_1089_p2 <= "1" when (unsigned(sh_amt_1_fu_1067_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_2_fu_1385_p2 <= "1" when (unsigned(sh_amt_2_fu_1363_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_470_p2 <= "1" when (unsigned(sh_amt_fu_448_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_1105_p2 <= "1" when (tmp_20_fu_1095_p4 = ap_const_lv8_0) else "0";
    icmp_ln603_2_fu_1401_p2 <= "1" when (tmp_23_fu_1391_p4 = ap_const_lv8_0) else "0";
    icmp_ln603_fu_486_p2 <= "1" when (tmp_13_fu_476_p4 = ap_const_lv8_0) else "0";
    icmp_ln885_fu_669_p2 <= "1" when (ap_phi_mux_phi_mul_phi_fu_286_p4 = ap_const_lv24_0) else "0";
    icmp_ln897_1_fu_763_p2 <= "0" when (p_Result_s_fu_757_p2 = ap_const_lv48_0) else "1";
    icmp_ln897_fu_788_p2 <= "1" when (signed(tmp_16_fu_778_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_843_p2 <= "1" when (signed(lsb_index_fu_773_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_V_1_fu_977_p1 <= reg_332;
    ireg_V_2_fu_1275_p2 <= (bitcast_ln30_fu_1267_p1 xor ap_const_lv64_8000000000000000);
    ireg_V_fu_359_p1 <= v_assign_reg_1685;
    j_fu_658_p2 <= std_logic_vector(unsigned(ap_phi_mux_tmp_V_2_phi_fu_274_p4) + unsigned(ap_const_lv9_1));
    l_fu_727_p1 <= tmp_2_fu_719_p3(32 - 1 downto 0);
    lhs_V_2_fu_1599_p3 <= (temp_imag_V_q0 & ap_const_lv12_0);
    lhs_V_fu_1575_p3 <= (temp_real_V_q0 & ap_const_lv12_0);
    lsb_index_fu_773_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_reg_1736));
    lshr_ln897_fu_751_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_FFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln897_fu_747_p1(31-1 downto 0)))));
    lshr_ln908_fu_858_p2 <= std_logic_vector(shift_right(unsigned(sext_ln888_reg_1729),to_integer(unsigned('0' & zext_ln908_fu_854_p1(31-1 downto 0)))));
    m_1_fu_882_p3 <= 
        zext_ln908_2_fu_863_p1 when (icmp_ln908_fu_843_p2(0) = '1') else 
        shl_ln908_fu_876_p2;
    m_2_fu_894_p2 <= std_logic_vector(unsigned(zext_ln911_fu_890_p1) + unsigned(m_1_fu_882_p3));
    m_5_fu_900_p4 <= m_2_fu_894_p2(63 downto 1);
    m_6_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_900_p4),64));
    m_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln888_reg_1729),64));
    man_V_1_fu_404_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_36_fu_400_p1));
    man_V_2_fu_410_p3 <= 
        man_V_1_fu_404_p2 when (p_Result_35_fu_366_p3(0) = '1') else 
        p_Result_36_fu_400_p1;
    man_V_4_fu_1023_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_41_fu_1019_p1));
    man_V_5_fu_1029_p3 <= 
        man_V_4_fu_1023_p2 when (p_Result_40_fu_985_p3(0) = '1') else 
        p_Result_41_fu_1019_p1;
    man_V_7_fu_1319_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_42_fu_1315_p1));
    man_V_8_fu_1325_p3 <= 
        p_Result_42_fu_1315_p1 when (tmp_22_fu_1281_p3(0) = '1') else 
        man_V_7_fu_1319_p2;
    mul_ln1192_3_fu_1647_p1 <= sext_ln1118_1_fu_1563_p1(16 - 1 downto 0);
    mul_ln1192_fu_1641_p1 <= sext_ln1118_1_fu_1563_p1(16 - 1 downto 0);
    or_ln581_1_fu_1199_p2 <= (or_ln582_1_fu_1163_p2 or icmp_ln581_1_fu_1049_p2);
    or_ln581_2_fu_1495_p2 <= (or_ln582_2_fu_1459_p2 or icmp_ln581_2_fu_1345_p2);
    or_ln581_fu_580_p2 <= (or_ln582_fu_544_p2 or icmp_ln581_fu_430_p2);
    or_ln582_1_fu_1163_p2 <= (icmp_ln582_1_fu_1079_p2 or icmp_ln571_1_fu_1037_p2);
    or_ln582_2_fu_1459_p2 <= (icmp_ln582_2_fu_1375_p2 or icmp_ln571_2_fu_1333_p2);
    or_ln582_fu_544_p2 <= (icmp_ln582_fu_460_p2 or icmp_ln571_fu_418_p2);
    or_ln603_1_fu_620_p2 <= (and_ln585_fu_568_p2 or and_ln582_fu_538_p2);
    or_ln603_2_fu_634_p2 <= (or_ln603_fu_606_p2 or or_ln603_1_fu_620_p2);
    or_ln603_3_fu_1225_p2 <= (and_ln603_1_fu_1211_p2 or and_ln585_3_fu_1193_p2);
    or_ln603_4_fu_1239_p2 <= (and_ln585_2_fu_1187_p2 or and_ln582_1_fu_1157_p2);
    or_ln603_5_fu_1253_p2 <= (or_ln603_4_fu_1239_p2 or or_ln603_3_fu_1225_p2);
    or_ln603_6_fu_1521_p2 <= (and_ln603_2_fu_1507_p2 or and_ln585_5_fu_1489_p2);
    or_ln603_7_fu_1535_p2 <= (and_ln585_4_fu_1483_p2 or and_ln582_2_fu_1453_p2);
    or_ln603_8_fu_1549_p2 <= (or_ln603_7_fu_1535_p2 or or_ln603_6_fu_1521_p2);
    or_ln603_fu_606_p2 <= (and_ln603_fu_592_p2 or and_ln585_1_fu_574_p2);
    or_ln899_fu_826_p2 <= (and_ln899_fu_820_p2 or a_fu_794_p2);
    or_ln_fu_832_p3 <= (ap_const_lv31_0 & or_ln899_fu_826_p2);
    
    p_Result_1_fu_701_p4_proc : process(sext_ln888_fu_697_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(48+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(48+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(48 - 1 downto 0);
    variable p_Result_1_fu_701_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(48 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(48 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(48 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_2F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := sext_ln888_fu_697_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(48-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(48-1-unsigned(ap_const_lv32_2F(6-1 downto 0)));
            for p_Result_1_fu_701_p4_i in 0 to 48-1 loop
                v0_cpy(p_Result_1_fu_701_p4_i) := sext_ln888_fu_697_p1(48-1-p_Result_1_fu_701_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(48-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_1_fu_701_p4 <= resvalue(48-1 downto 0);
    end process;

    p_Result_35_fu_366_p3 <= ireg_V_fu_359_p1(63 downto 63);
    p_Result_36_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_392_p3),54));
    p_Result_37_fu_675_p3 <= ap_phi_mux_phi_mul_phi_fu_286_p4(23 downto 23);
    p_Result_38_fu_711_p3 <= (ap_const_lv16_FFFF & p_Result_1_fu_701_p4);
    p_Result_39_fu_948_p5 <= (tmp_6_fu_941_p3 & m_6_fu_910_p1(51 downto 0));
    p_Result_40_fu_985_p3 <= ireg_V_1_fu_977_p1(63 downto 63);
    p_Result_41_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1011_p3),54));
    p_Result_42_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1307_p3),54));
    p_Result_4_fu_813_p3 <= sext_ln888_reg_1729(to_integer(unsigned(lsb_index_fu_773_p2)) downto to_integer(unsigned(lsb_index_fu_773_p2))) when (to_integer(unsigned(lsb_index_fu_773_p2))>= 0 and to_integer(unsigned(lsb_index_fu_773_p2))<=47) else "-";
    p_Result_s_fu_757_p2 <= (sext_ln888_fu_697_p1 and lshr_ln897_fu_751_p2);
    ret_V_19_fu_1607_p2 <= std_logic_vector(signed(grp_fu_1660_p3) + signed(lhs_V_2_fu_1599_p3));
    ret_V_fu_1583_p2 <= std_logic_vector(signed(grp_fu_1653_p3) + signed(lhs_V_fu_1575_p3));
    s_V_fu_1555_p3 <= 
        select_ln603_10_fu_1541_p3 when (or_ln603_8_fu_1549_p2(0) = '1') else 
        ap_const_lv16_0;

    sample_imag_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, zext_ln41_reg_1816, ap_block_pp0_stage0, ap_CS_fsm_state32, zext_ln34_fu_971_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sample_imag_V_address0 <= zext_ln41_reg_1816(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_imag_V_address0 <= zext_ln34_fu_971_p1(8 - 1 downto 0);
        else 
            sample_imag_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_imag_V_ce0 <= ap_const_logic_1;
        else 
            sample_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_imag_V_d0 <= temp_imag_V_q0;

    sample_imag_V_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sample_imag_V_we0 <= ap_const_logic_1;
        else 
            sample_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, zext_ln41_reg_1816, ap_block_pp0_stage0, ap_CS_fsm_state32, zext_ln34_fu_971_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sample_real_V_address0 <= zext_ln41_reg_1816(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_real_V_address0 <= zext_ln34_fu_971_p1(8 - 1 downto 0);
        else 
            sample_real_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_real_V_ce0 <= ap_const_logic_1;
        else 
            sample_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_real_V_d0 <= temp_real_V_q0;

    sample_real_V_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sample_real_V_we0 <= ap_const_logic_1;
        else 
            sample_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln588_1_fu_1133_p3 <= 
        ap_const_lv16_FFFF when (tmp_21_fu_1125_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln588_2_fu_1429_p3 <= 
        ap_const_lv16_FFFF when (tmp_24_fu_1421_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln588_fu_514_p3 <= 
        ap_const_lv16_FFFF when (tmp_14_fu_506_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_10_fu_1541_p3 <= 
        select_ln603_8_fu_1513_p3 when (or_ln603_6_fu_1521_p2(0) = '1') else 
        select_ln603_9_fu_1527_p3;
    select_ln603_1_fu_612_p3 <= 
        select_ln588_fu_514_p3 when (and_ln585_fu_568_p2(0) = '1') else 
        trunc_ln583_fu_466_p1;
    select_ln603_2_fu_626_p3 <= 
        select_ln603_fu_598_p3 when (or_ln603_fu_606_p2(0) = '1') else 
        select_ln603_1_fu_612_p3;
    select_ln603_4_fu_1217_p3 <= 
        shl_ln604_1_fu_1145_p2 when (and_ln603_1_fu_1211_p2(0) = '1') else 
        trunc_ln586_1_fu_1121_p1;
    select_ln603_5_fu_1231_p3 <= 
        select_ln588_1_fu_1133_p3 when (and_ln585_2_fu_1187_p2(0) = '1') else 
        trunc_ln583_1_fu_1085_p1;
    select_ln603_6_fu_1245_p3 <= 
        select_ln603_4_fu_1217_p3 when (or_ln603_3_fu_1225_p2(0) = '1') else 
        select_ln603_5_fu_1231_p3;
    select_ln603_8_fu_1513_p3 <= 
        shl_ln604_2_fu_1441_p2 when (and_ln603_2_fu_1507_p2(0) = '1') else 
        trunc_ln586_2_fu_1417_p1;
    select_ln603_9_fu_1527_p3 <= 
        select_ln588_2_fu_1429_p3 when (and_ln585_4_fu_1483_p2(0) = '1') else 
        trunc_ln583_2_fu_1381_p1;
    select_ln603_fu_598_p3 <= 
        shl_ln604_fu_526_p2 when (and_ln603_fu_592_p2(0) = '1') else 
        trunc_ln586_fu_502_p1;
    select_ln885_fu_964_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_reg_1719(0) = '1') else 
        bitcast_ln729_fu_960_p1;
    select_ln915_fu_922_p3 <= 
        ap_const_lv11_3FF when (tmp_18_fu_914_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1118_1_fu_1563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_V_reg_1768),28));

        sext_ln1118_2_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_real_V_load_reg_1773),28));

        sext_ln1118_3_fu_1572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_V_reg_1783),28));

        sext_ln1118_4_fu_1569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_imag_V_load_reg_1778),28));

        sext_ln1118_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_fu_640_p3),24));

        sext_ln581_1_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_fu_1067_p3),32));

    sext_ln581_1cast_fu_1141_p1 <= sext_ln581_1_fu_1075_p1(16 - 1 downto 0);
        sext_ln581_2_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_fu_1363_p3),32));

    sext_ln581_2cast_fu_1437_p1 <= sext_ln581_2_fu_1371_p1(16 - 1 downto 0);
        sext_ln581_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_448_p3),32));

    sext_ln581cast_fu_522_p1 <= sext_ln581_fu_456_p1(16 - 1 downto 0);
        sext_ln888_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_4_fu_689_p3),48));

    sh_amt_1_fu_1067_p3 <= 
        add_ln581_1_fu_1055_p2 when (icmp_ln581_1_fu_1049_p2(0) = '1') else 
        sub_ln581_1_fu_1061_p2;
    sh_amt_2_fu_1363_p3 <= 
        add_ln581_2_fu_1351_p2 when (icmp_ln581_2_fu_1345_p2(0) = '1') else 
        sub_ln581_2_fu_1357_p2;
    sh_amt_fu_448_p3 <= 
        add_ln581_fu_436_p2 when (icmp_ln581_fu_430_p2(0) = '1') else 
        sub_ln581_fu_442_p2;
    shl_ln604_1_fu_1145_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_1_fu_1085_p1),to_integer(unsigned('0' & sext_ln581_1cast_fu_1141_p1(16-1 downto 0)))));
    shl_ln604_2_fu_1441_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_2_fu_1381_p1),to_integer(unsigned('0' & sext_ln581_2cast_fu_1437_p1(16-1 downto 0)))));
    shl_ln604_fu_526_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_466_p1),to_integer(unsigned('0' & sext_ln581cast_fu_522_p1(16-1 downto 0)))));
    shl_ln908_fu_876_p2 <= std_logic_vector(shift_left(unsigned(m_fu_840_p1),to_integer(unsigned('0' & zext_ln908_1_fu_872_p1(31-1 downto 0)))));
    sub_ln581_1_fu_1061_p2 <= std_logic_vector(unsigned(ap_const_lv12_C) - unsigned(F2_1_fu_1043_p2));
    sub_ln581_2_fu_1357_p2 <= std_logic_vector(unsigned(ap_const_lv12_C) - unsigned(F2_2_fu_1339_p2));
    sub_ln581_fu_442_p2 <= std_logic_vector(unsigned(ap_const_lv12_C) - unsigned(F2_fu_424_p2));
    sub_ln894_fu_731_p2 <= std_logic_vector(unsigned(ap_const_lv32_30) - unsigned(l_fu_727_p1));
    sub_ln897_fu_741_p2 <= std_logic_vector(signed(ap_const_lv6_26) - signed(trunc_ln897_fu_737_p1));
    sub_ln908_fu_867_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1736));
    sub_ln915_fu_930_p2 <= std_logic_vector(unsigned(ap_const_lv11_24) - unsigned(trunc_ln893_reg_1748));

    temp_imag_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state13, temp_imag_V_addr_reg_1695, ap_CS_fsm_state31, zext_ln41_fu_1635_p1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln19_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            temp_imag_V_address0 <= zext_ln41_fu_1635_p1(8 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            temp_imag_V_address0 <= temp_imag_V_addr_reg_1695;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_imag_V_address0 <= zext_ln19_fu_353_p1(8 - 1 downto 0);
        else 
            temp_imag_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            temp_imag_V_ce0 <= ap_const_logic_1;
        else 
            temp_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_imag_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state13, ap_enable_reg_pp0_iter7, ap_block_pp0_stage1, ret_V_19_fu_1607_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            temp_imag_V_d0 <= ret_V_19_fu_1607_p2(27 downto 12);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_imag_V_d0 <= ap_const_lv16_0;
        else 
            temp_imag_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_imag_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state13, icmp_ln27_reg_1705_pp0_iter7_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln27_reg_1705_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            temp_imag_V_we0 <= ap_const_logic_1;
        else 
            temp_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, temp_real_V_addr_reg_1690, ap_CS_fsm_state13, ap_CS_fsm_state31, zext_ln41_fu_1635_p1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln19_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            temp_real_V_address0 <= zext_ln41_fu_1635_p1(8 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            temp_real_V_address0 <= temp_real_V_addr_reg_1690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_real_V_address0 <= zext_ln19_fu_353_p1(8 - 1 downto 0);
        else 
            temp_real_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            temp_real_V_ce0 <= ap_const_logic_1;
        else 
            temp_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state13, ap_enable_reg_pp0_iter7, ap_block_pp0_stage1, ret_V_fu_1583_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            temp_real_V_d0 <= ret_V_fu_1583_p2(27 downto 12);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_real_V_d0 <= ap_const_lv16_0;
        else 
            temp_real_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_real_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state13, icmp_ln27_reg_1705_pp0_iter7_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln27_reg_1705_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            temp_real_V_we0 <= ap_const_logic_1;
        else 
            temp_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_fu_476_p4 <= sh_amt_fu_448_p3(11 downto 4);
    tmp_14_fu_506_p3 <= ireg_V_fu_359_p1(63 downto 63);
    tmp_16_fu_778_p4 <= lsb_index_fu_773_p2(31 downto 1);
    tmp_17_fu_799_p3 <= lsb_index_fu_773_p2(31 downto 31);
    tmp_18_fu_914_p3 <= m_2_fu_894_p2(54 downto 54);
    tmp_1_fu_392_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_388_p1);
    tmp_20_fu_1095_p4 <= sh_amt_1_fu_1067_p3(11 downto 4);
    tmp_21_fu_1125_p3 <= ireg_V_1_fu_977_p1(63 downto 63);
    tmp_22_fu_1281_p3 <= bitcast_ln30_fu_1267_p1(63 downto 63);
    tmp_23_fu_1391_p4 <= sh_amt_2_fu_1363_p3(11 downto 4);
    tmp_24_fu_1421_p3 <= ireg_V_2_fu_1275_p2(63 downto 63);
    
    tmp_2_fu_719_p3_proc : process(p_Result_38_fu_711_p3)
    begin
        tmp_2_fu_719_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_38_fu_711_p3(i) = '1' then
                tmp_2_fu_719_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_3_fu_1307_p3 <= (ap_const_lv1_1 & trunc_ln565_2_fu_1303_p1);
    tmp_6_fu_941_p3 <= (p_Result_37_reg_1724 & add_ln915_fu_935_p2);
    tmp_7_fu_1011_p3 <= (ap_const_lv1_1 & trunc_ln565_1_fu_1007_p1);
    tmp_V_4_fu_689_p3 <= 
        tmp_V_fu_683_p2 when (p_Result_37_fu_675_p3(0) = '1') else 
        ap_phi_mux_phi_mul_phi_fu_286_p4;
    tmp_V_fu_683_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(ap_phi_mux_phi_mul_phi_fu_286_p4));
    trunc_ln30_fu_1271_p1 <= bitcast_ln30_fu_1267_p1(63 - 1 downto 0);
    trunc_ln556_1_fu_981_p1 <= ireg_V_1_fu_977_p1(63 - 1 downto 0);
    trunc_ln556_fu_362_p1 <= ireg_V_fu_359_p1(63 - 1 downto 0);
    trunc_ln565_1_fu_1007_p1 <= ireg_V_1_fu_977_p1(52 - 1 downto 0);
    trunc_ln565_2_fu_1303_p1 <= ireg_V_2_fu_1275_p2(52 - 1 downto 0);
    trunc_ln565_fu_388_p1 <= ireg_V_fu_359_p1(52 - 1 downto 0);
    trunc_ln583_1_fu_1085_p1 <= man_V_5_fu_1029_p3(16 - 1 downto 0);
    trunc_ln583_2_fu_1381_p1 <= man_V_8_fu_1325_p3(16 - 1 downto 0);
    trunc_ln583_fu_466_p1 <= man_V_2_fu_410_p3(16 - 1 downto 0);
    trunc_ln586_1_fu_1121_p1 <= ashr_ln586_1_fu_1115_p2(16 - 1 downto 0);
    trunc_ln586_2_fu_1417_p1 <= ashr_ln586_2_fu_1411_p2(16 - 1 downto 0);
    trunc_ln586_fu_502_p1 <= ashr_ln586_fu_496_p2(16 - 1 downto 0);
    trunc_ln893_fu_769_p1 <= tmp_2_fu_719_p3(11 - 1 downto 0);
    trunc_ln897_fu_737_p1 <= sub_ln894_fu_731_p2(6 - 1 downto 0);
    w_V_fu_640_p3 <= 
        select_ln603_2_fu_626_p3 when (or_ln603_2_fu_634_p2(0) = '1') else 
        ap_const_lv16_0;
    xor_ln571_1_fu_1151_p2 <= (icmp_ln571_1_fu_1037_p2 xor ap_const_lv1_1);
    xor_ln571_2_fu_1447_p2 <= (icmp_ln571_2_fu_1333_p2 xor ap_const_lv1_1);
    xor_ln571_fu_532_p2 <= (icmp_ln571_fu_418_p2 xor ap_const_lv1_1);
    xor_ln581_1_fu_1205_p2 <= (or_ln581_1_fu_1199_p2 xor ap_const_lv1_1);
    xor_ln581_2_fu_1501_p2 <= (or_ln581_2_fu_1495_p2 xor ap_const_lv1_1);
    xor_ln581_fu_586_p2 <= (or_ln581_fu_580_p2 xor ap_const_lv1_1);
    xor_ln582_1_fu_1169_p2 <= (or_ln582_1_fu_1163_p2 xor ap_const_lv1_1);
    xor_ln582_2_fu_1465_p2 <= (or_ln582_2_fu_1459_p2 xor ap_const_lv1_1);
    xor_ln582_fu_550_p2 <= (or_ln582_fu_544_p2 xor ap_const_lv1_1);
    xor_ln585_1_fu_1181_p2 <= (icmp_ln585_1_fu_1089_p2 xor ap_const_lv1_1);
    xor_ln585_2_fu_1477_p2 <= (icmp_ln585_2_fu_1385_p2 xor ap_const_lv1_1);
    xor_ln585_fu_562_p2 <= (icmp_ln585_fu_470_p2 xor ap_const_lv1_1);
    xor_ln899_fu_807_p2 <= (tmp_17_fu_799_p3 xor ap_const_lv1_1);
    zext_ln19_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_258),64));
    zext_ln34_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_270_pp0_iter5_reg),64));
    zext_ln41_fu_1635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_293),64));
    zext_ln461_1_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_1_fu_993_p4),12));
    zext_ln461_2_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_2_fu_1289_p4),12));
    zext_ln461_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_374_p4),12));
    zext_ln586_1_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_1_fu_1075_p1),54));
    zext_ln586_2_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_2_fu_1371_p1),54));
    zext_ln586_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_456_p1),54));
    zext_ln897_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_741_p2),48));
    zext_ln908_1_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_867_p2),64));
    zext_ln908_2_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_858_p2),64));
    zext_ln908_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln908_fu_849_p2),48));
    zext_ln911_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_832_p3),64));
end behav;
