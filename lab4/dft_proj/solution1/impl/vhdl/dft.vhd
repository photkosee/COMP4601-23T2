-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sample_real_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_real_ce0 : OUT STD_LOGIC;
    sample_real_we0 : OUT STD_LOGIC;
    sample_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_imag_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sample_imag_ce0 : OUT STD_LOGIC;
    sample_imag_we0 : OUT STD_LOGIC;
    sample_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sample_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.841000,HLS_SYN_LAT=3411970,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=215,HLS_SYN_FF=7432,HLS_SYN_LUT=14617,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_3F9921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "0011111110011001001000011111101101010100010001000010011000011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_407 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_412 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_real_addr_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal temp_imag_addr_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal j_fu_354_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_445 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_209_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_209_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_209_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_228_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_228_ap_done : STD_LOGIC;
    signal ap_block_state25_on_subcall_done : BOOLEAN;
    signal c_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_523 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln41_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_reg_528 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln40_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_real_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_real_ce0 : STD_LOGIC;
    signal temp_real_we0 : STD_LOGIC;
    signal temp_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_imag_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_imag_ce0 : STD_LOGIC;
    signal temp_imag_we0 : STD_LOGIC;
    signal temp_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_209_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_209_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_209_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_228_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_228_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_228_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_228_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_150 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln27_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_43_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal empty_44_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_186 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_198 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln18_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sin_or_cos_double_s_fu_209_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_228_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln19_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_251_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln30_fu_364_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_247_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_280_ce : STD_LOGIC;
    signal grp_fu_284_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_faddfsub_32nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fadd_32ns_32njbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fmul_32ns_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_sitofp_32ns_3lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fptrunc_64ns_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft_fpext_32ns_64ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_dmul_64ns_64nocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_sitodp_32ns_6pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_temp_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_real_U : component dft_temp_real
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_real_address0,
        ce0 => temp_real_ce0,
        we0 => temp_real_we0,
        d0 => temp_real_d0,
        q0 => temp_real_q0);

    temp_imag_U : component dft_temp_real
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_imag_address0,
        ce0 => temp_imag_ce0,
        we0 => temp_imag_we0,
        d0 => temp_imag_d0,
        q0 => temp_imag_q0);

    grp_sin_or_cos_double_s_fu_209 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_209_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_209_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_209_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_209_ap_ready,
        t_in => x_assign_reg_455,
        do_cos => grp_sin_or_cos_double_s_fu_209_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_209_ap_return);

    grp_sin_or_cos_double_s_fu_228 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_228_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_228_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_228_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_228_ap_ready,
        t_in => x_assign_reg_455,
        do_cos => grp_sin_or_cos_double_s_fu_228_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_228_ap_return);

    dft_faddfsub_32nsibs_U22 : component dft_faddfsub_32nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        din1 => grp_fu_247_p1,
        opcode => grp_fu_247_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);

    dft_fadd_32ns_32njbC_U23 : component dft_fadd_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_251_p0,
        din1 => grp_fu_251_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    dft_fmul_32ns_32nkbM_U24 : component dft_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    dft_fmul_32ns_32nkbM_U25 : component dft_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_q0,
        din1 => s_reg_477,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    dft_fmul_32ns_32nkbM_U26 : component dft_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_q0,
        din1 => s_reg_477,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    dft_fmul_32ns_32nkbM_U27 : component dft_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_q0,
        din1 => c_reg_471,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p2);

    dft_sitofp_32ns_3lbW_U28 : component dft_sitofp_32ns_3lbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p1);

    dft_fptrunc_64ns_mb6_U29 : component dft_fptrunc_64ns_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_280_p0,
        ce => grp_fu_280_ce,
        dout => grp_fu_280_p1);

    dft_fptrunc_64ns_mb6_U30 : component dft_fptrunc_64ns_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        ce => grp_fu_284_ce,
        dout => grp_fu_284_p1);

    dft_fpext_32ns_64ncg_U31 : component dft_fpext_32ns_64ncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_300,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p1);

    dft_dmul_64ns_64nocq_U32 : component dft_dmul_64ns_64nocq
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_412,
        din1 => ap_const_lv64_3F9921FB5444261E,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    dft_sitodp_32ns_6pcA_U33 : component dft_sitodp_32ns_6pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_209_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_209_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_sin_or_cos_double_s_fu_209_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_209_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_209_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_228_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_228_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_sin_or_cos_double_s_fu_228_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_228_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_228_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_43_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                empty_43_reg_162 <= reg_313;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                empty_43_reg_162 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    empty_44_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                empty_44_reg_174 <= reg_306;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                empty_44_reg_174 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_0_reg_150 <= i_3_reg_407;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_150 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_198 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_1_reg_198 <= i_reg_523;
            end if; 
        end if;
    end process;

    j_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_0_reg_186 <= j_reg_445;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_0_reg_186 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                c_reg_471 <= grp_fu_280_p1;
                s_reg_477 <= grp_fu_284_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_407 <= i_3_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                i_reg_523 <= i_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_reg_445 <= j_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_300 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
                reg_306 <= grp_fu_247_p2;
                reg_313 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                temp_imag_addr_reg_427 <= zext_ln19_fu_337_p1(8 - 1 downto 0);
                temp_real_addr_reg_422 <= zext_ln19_fu_337_p1(8 - 1 downto 0);
                w_reg_432 <= grp_fu_280_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_2_reg_417 <= grp_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_3_reg_450 <= grp_fu_277_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_5_reg_515 <= grp_fu_272_p2;
                tmp_7_reg_510 <= grp_fu_267_p2;
                tmp_s_reg_505 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_412 <= grp_fu_297_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                x_assign_reg_455 <= grp_fu_287_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_381_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    zext_ln41_reg_528(8 downto 0) <= zext_ln41_fu_393_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln41_reg_528(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_block_state25_on_subcall_done, ap_CS_fsm_state42, icmp_ln40_fu_381_p2, icmp_ln27_fu_348_p2, icmp_ln18_fu_325_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln27_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_boolean_0 = ap_block_state25_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln40_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state25_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_209_ap_done, grp_sin_or_cos_double_s_fu_228_ap_done)
    begin
                ap_block_state25_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_228_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_209_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state42, icmp_ln40_fu_381_p2)
    begin
        if (((icmp_ln40_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42, icmp_ln40_fu_381_p2)
    begin
        if (((icmp_ln40_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln30_fu_360_p1 <= grp_sin_or_cos_double_s_fu_228_ap_return;

    grp_fu_247_opcode_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_247_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_247_opcode <= ap_const_lv2_0;
        else 
            grp_fu_247_opcode <= "XX";
        end if; 
    end process;


    grp_fu_247_p0_assign_proc : process(reg_300, empty_44_reg_174, ap_CS_fsm_state31, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_247_p0 <= empty_44_reg_174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_247_p0 <= reg_300;
        else 
            grp_fu_247_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_247_p1_assign_proc : process(reg_306, tmp_s_reg_505, ap_CS_fsm_state31, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_247_p1 <= reg_306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_247_p1 <= tmp_s_reg_505;
        else 
            grp_fu_247_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_251_p0_assign_proc : process(tmp_7_reg_510, empty_43_reg_162, ap_CS_fsm_state31, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_251_p0 <= empty_43_reg_162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_251_p0 <= tmp_7_reg_510;
        else 
            grp_fu_251_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_251_p1_assign_proc : process(reg_313, tmp_5_reg_515, ap_CS_fsm_state31, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_251_p1 <= reg_313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_251_p1 <= tmp_5_reg_515;
        else 
            grp_fu_251_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_p0_assign_proc : process(sample_real_q0, tmp_3_reg_450, ap_CS_fsm_state27, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_257_p0 <= sample_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_257_p0 <= tmp_3_reg_450;
        else 
            grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_p1_assign_proc : process(w_reg_432, c_reg_471, ap_CS_fsm_state27, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_257_p1 <= c_reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_257_p1 <= w_reg_432;
        else 
            grp_fu_257_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_277_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_186),32));

    grp_fu_280_ce_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state25, ap_block_state25_on_subcall_done, ap_CS_fsm_state26, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_boolean_0 = ap_block_state25_on_subcall_done)))) then 
            grp_fu_280_ce <= ap_const_logic_1;
        else 
            grp_fu_280_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_280_p0_assign_proc : process(tmp_2_reg_417, grp_sin_or_cos_double_s_fu_209_ap_return, ap_CS_fsm_state25, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_280_p0 <= grp_sin_or_cos_double_s_fu_209_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_280_p0 <= tmp_2_reg_417;
        else 
            grp_fu_280_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_ce_assign_proc : process(ap_CS_fsm_state25, ap_block_state25_on_subcall_done, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_boolean_0 = ap_block_state25_on_subcall_done)))) then 
            grp_fu_284_ce <= ap_const_logic_1;
        else 
            grp_fu_284_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_284_p0 <= xor_ln30_fu_364_p2;
    grp_fu_297_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_150),32));
    grp_sin_or_cos_double_s_fu_209_ap_start <= grp_sin_or_cos_double_s_fu_209_ap_start_reg;
    grp_sin_or_cos_double_s_fu_209_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_228_ap_start <= grp_sin_or_cos_double_s_fu_228_ap_start_reg;
    grp_sin_or_cos_double_s_fu_228_do_cos <= ap_const_logic_0;
    i_3_fu_331_p2 <= std_logic_vector(unsigned(i_0_reg_150) + unsigned(ap_const_lv9_1));
    i_fu_387_p2 <= std_logic_vector(unsigned(i_1_reg_198) + unsigned(ap_const_lv9_1));
    icmp_ln18_fu_325_p2 <= "1" when (i_0_reg_150 = ap_const_lv9_100) else "0";
    icmp_ln27_fu_348_p2 <= "1" when (j_0_reg_186 = ap_const_lv9_100) else "0";
    icmp_ln40_fu_381_p2 <= "1" when (i_1_reg_198 = ap_const_lv9_100) else "0";
    j_fu_354_p2 <= std_logic_vector(unsigned(j_0_reg_186) + unsigned(ap_const_lv9_1));

    sample_imag_address0_assign_proc : process(ap_CS_fsm_state26, zext_ln41_reg_528, ap_CS_fsm_state43, zext_ln34_fu_375_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sample_imag_address0 <= zext_ln41_reg_528(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sample_imag_address0 <= zext_ln34_fu_375_p1(8 - 1 downto 0);
        else 
            sample_imag_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_imag_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            sample_imag_ce0 <= ap_const_logic_1;
        else 
            sample_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_imag_d0 <= temp_imag_q0;

    sample_imag_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sample_imag_we0 <= ap_const_logic_1;
        else 
            sample_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_address0_assign_proc : process(ap_CS_fsm_state26, zext_ln41_reg_528, ap_CS_fsm_state43, zext_ln34_fu_375_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sample_real_address0 <= zext_ln41_reg_528(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sample_real_address0 <= zext_ln34_fu_375_p1(8 - 1 downto 0);
        else 
            sample_real_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_real_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            sample_real_ce0 <= ap_const_logic_1;
        else 
            sample_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_real_d0 <= temp_real_q0;

    sample_real_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sample_real_we0 <= ap_const_logic_1;
        else 
            sample_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_imag_address0_assign_proc : process(ap_CS_fsm_state14, temp_imag_addr_reg_427, ap_CS_fsm_state42, zext_ln41_fu_393_p1, ap_CS_fsm_state41, zext_ln19_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            temp_imag_address0 <= zext_ln41_fu_393_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            temp_imag_address0 <= temp_imag_addr_reg_427;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_imag_address0 <= zext_ln19_fu_337_p1(8 - 1 downto 0);
        else 
            temp_imag_address0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_imag_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state42, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_imag_ce0 <= ap_const_logic_1;
        else 
            temp_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_imag_d0_assign_proc : process(reg_313, ap_CS_fsm_state14, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            temp_imag_d0 <= reg_313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_imag_d0 <= ap_const_lv32_0;
        else 
            temp_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_imag_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_imag_we0 <= ap_const_logic_1;
        else 
            temp_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_address0_assign_proc : process(temp_real_addr_reg_422, ap_CS_fsm_state14, ap_CS_fsm_state42, zext_ln41_fu_393_p1, ap_CS_fsm_state41, zext_ln19_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            temp_real_address0 <= zext_ln41_fu_393_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            temp_real_address0 <= temp_real_addr_reg_422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_real_address0 <= zext_ln19_fu_337_p1(8 - 1 downto 0);
        else 
            temp_real_address0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_real_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state42, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_real_ce0 <= ap_const_logic_1;
        else 
            temp_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_d0_assign_proc : process(reg_306, ap_CS_fsm_state14, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            temp_real_d0 <= reg_306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_real_d0 <= ap_const_lv32_0;
        else 
            temp_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_real_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            temp_real_we0 <= ap_const_logic_1;
        else 
            temp_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln30_fu_364_p2 <= (bitcast_ln30_fu_360_p1 xor ap_const_lv64_8000000000000000);
    zext_ln19_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_150),64));
    zext_ln34_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_186),64));
    zext_ln41_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_198),64));
end behav;
