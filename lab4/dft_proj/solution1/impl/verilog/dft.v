// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.841000,HLS_SYN_LAT=3411970,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=215,HLS_SYN_FF=7432,HLS_SYN_LUT=14617,HLS_VERSION=2020_1}" *)

module dft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sample_real_address0,
        sample_real_ce0,
        sample_real_we0,
        sample_real_d0,
        sample_real_q0,
        sample_imag_address0,
        sample_imag_ce0,
        sample_imag_we0,
        sample_imag_d0,
        sample_imag_q0
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] sample_real_address0;
output   sample_real_ce0;
output   sample_real_we0;
output  [31:0] sample_real_d0;
input  [31:0] sample_real_q0;
output  [7:0] sample_imag_address0;
output   sample_imag_ce0;
output   sample_imag_we0;
output  [31:0] sample_imag_d0;
input  [31:0] sample_imag_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] sample_real_address0;
reg sample_real_ce0;
reg sample_real_we0;
reg[7:0] sample_imag_address0;
reg sample_imag_ce0;
reg sample_imag_we0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_257_p2;
reg   [31:0] reg_300;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] reg_306;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire   [31:0] grp_fu_251_p2;
reg   [31:0] reg_313;
wire    ap_CS_fsm_state2;
wire   [8:0] i_3_fu_331_p2;
reg   [8:0] i_3_reg_407;
wire   [63:0] grp_fu_297_p1;
reg   [63:0] tmp_reg_412;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_292_p2;
reg   [63:0] tmp_2_reg_417;
wire    ap_CS_fsm_state12;
reg   [7:0] temp_real_addr_reg_422;
wire    ap_CS_fsm_state14;
reg   [7:0] temp_imag_addr_reg_427;
wire   [31:0] grp_fu_280_p1;
reg   [31:0] w_reg_432;
wire    ap_CS_fsm_state15;
wire   [8:0] j_fu_354_p2;
reg   [8:0] j_reg_445;
wire   [31:0] grp_fu_277_p1;
reg   [31:0] tmp_3_reg_450;
wire    ap_CS_fsm_state18;
wire   [63:0] grp_fu_287_p1;
reg   [63:0] x_assign_reg_455;
wire    ap_CS_fsm_state24;
wire   [63:0] grp_sin_or_cos_double_s_fu_209_ap_return;
wire    ap_CS_fsm_state25;
wire    grp_sin_or_cos_double_s_fu_209_ap_ready;
wire    grp_sin_or_cos_double_s_fu_209_ap_done;
wire    grp_sin_or_cos_double_s_fu_228_ap_ready;
wire    grp_sin_or_cos_double_s_fu_228_ap_done;
reg    ap_block_state25_on_subcall_done;
reg   [31:0] c_reg_471;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_284_p1;
reg   [31:0] s_reg_477;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] tmp_s_reg_505;
wire   [31:0] grp_fu_267_p2;
reg   [31:0] tmp_7_reg_510;
wire   [31:0] grp_fu_272_p2;
reg   [31:0] tmp_5_reg_515;
wire   [8:0] i_fu_387_p2;
reg   [8:0] i_reg_523;
wire    ap_CS_fsm_state42;
wire   [63:0] zext_ln41_fu_393_p1;
reg   [63:0] zext_ln41_reg_528;
wire   [0:0] icmp_ln40_fu_381_p2;
reg   [7:0] temp_real_address0;
reg    temp_real_ce0;
reg    temp_real_we0;
reg   [31:0] temp_real_d0;
wire   [31:0] temp_real_q0;
reg   [7:0] temp_imag_address0;
reg    temp_imag_ce0;
reg    temp_imag_we0;
reg   [31:0] temp_imag_d0;
wire   [31:0] temp_imag_q0;
wire    grp_sin_or_cos_double_s_fu_209_ap_start;
wire    grp_sin_or_cos_double_s_fu_209_ap_idle;
wire    grp_sin_or_cos_double_s_fu_209_do_cos;
wire    grp_sin_or_cos_double_s_fu_228_ap_start;
wire    grp_sin_or_cos_double_s_fu_228_ap_idle;
wire    grp_sin_or_cos_double_s_fu_228_do_cos;
wire   [63:0] grp_sin_or_cos_double_s_fu_228_ap_return;
reg   [8:0] i_0_reg_150;
wire   [0:0] icmp_ln27_fu_348_p2;
reg   [31:0] empty_43_reg_162;
wire    ap_CS_fsm_state41;
reg   [31:0] empty_44_reg_174;
reg   [8:0] j_0_reg_186;
reg   [8:0] i_1_reg_198;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln18_fu_325_p2;
reg    grp_sin_or_cos_double_s_fu_209_ap_start_reg;
reg    grp_sin_or_cos_double_s_fu_228_ap_start_reg;
wire   [63:0] zext_ln19_fu_337_p1;
wire   [63:0] zext_ln34_fu_375_p1;
reg   [31:0] grp_fu_247_p0;
reg   [31:0] grp_fu_247_p1;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state36;
reg   [31:0] grp_fu_251_p0;
reg   [31:0] grp_fu_251_p1;
reg   [31:0] grp_fu_257_p0;
reg   [31:0] grp_fu_257_p1;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_277_p0;
reg   [63:0] grp_fu_280_p0;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_284_p0;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_297_p0;
wire   [63:0] bitcast_ln30_fu_360_p1;
wire   [63:0] xor_ln30_fu_364_p2;
reg   [1:0] grp_fu_247_opcode;
reg    grp_fu_280_ce;
reg    grp_fu_284_ce;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 grp_sin_or_cos_double_s_fu_209_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_228_ap_start_reg = 1'b0;
end

dft_temp_real #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
temp_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_real_address0),
    .ce0(temp_real_ce0),
    .we0(temp_real_we0),
    .d0(temp_real_d0),
    .q0(temp_real_q0)
);

dft_temp_real #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
temp_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_imag_address0),
    .ce0(temp_imag_ce0),
    .we0(temp_imag_we0),
    .d0(temp_imag_d0),
    .q0(temp_imag_q0)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_209(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_209_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_209_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_209_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_209_ap_ready),
    .t_in(x_assign_reg_455),
    .do_cos(grp_sin_or_cos_double_s_fu_209_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_209_ap_return)
);

sin_or_cos_double_s grp_sin_or_cos_double_s_fu_228(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_228_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_228_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_228_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_228_ap_ready),
    .t_in(x_assign_reg_455),
    .do_cos(grp_sin_or_cos_double_s_fu_228_do_cos),
    .ap_return(grp_sin_or_cos_double_s_fu_228_ap_return)
);

dft_faddfsub_32nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dft_faddfsub_32nsibs_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_247_p0),
    .din1(grp_fu_247_p1),
    .opcode(grp_fu_247_opcode),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

dft_fadd_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dft_fadd_32ns_32njbC_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_251_p0),
    .din1(grp_fu_251_p1),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

dft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dft_fmul_32ns_32nkbM_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_257_p0),
    .din1(grp_fu_257_p1),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

dft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dft_fmul_32ns_32nkbM_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sample_imag_q0),
    .din1(s_reg_477),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

dft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dft_fmul_32ns_32nkbM_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sample_real_q0),
    .din1(s_reg_477),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

dft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dft_fmul_32ns_32nkbM_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sample_imag_q0),
    .din1(c_reg_471),
    .ce(1'b1),
    .dout(grp_fu_272_p2)
);

dft_sitofp_32ns_3lbW #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dft_sitofp_32ns_3lbW_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_277_p0),
    .ce(1'b1),
    .dout(grp_fu_277_p1)
);

dft_fptrunc_64ns_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
dft_fptrunc_64ns_mb6_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_280_p0),
    .ce(grp_fu_280_ce),
    .dout(grp_fu_280_p1)
);

dft_fptrunc_64ns_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
dft_fptrunc_64ns_mb6_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .ce(grp_fu_284_ce),
    .dout(grp_fu_284_p1)
);

dft_fpext_32ns_64ncg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dft_fpext_32ns_64ncg_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_300),
    .ce(1'b1),
    .dout(grp_fu_287_p1)
);

dft_dmul_64ns_64nocq #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dft_dmul_64ns_64nocq_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_412),
    .din1(64'd4582731459160450590),
    .ce(1'b1),
    .dout(grp_fu_292_p2)
);

dft_sitodp_32ns_6pcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dft_sitodp_32ns_6pcA_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_297_p0),
    .ce(1'b1),
    .dout(grp_fu_297_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_209_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            grp_sin_or_cos_double_s_fu_209_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_209_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_209_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_228_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            grp_sin_or_cos_double_s_fu_228_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_228_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_228_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        empty_43_reg_162 <= reg_313;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_43_reg_162 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        empty_44_reg_174 <= reg_306;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_44_reg_174 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        i_0_reg_150 <= i_3_reg_407;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_150 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_198 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i_1_reg_198 <= i_reg_523;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        j_0_reg_186 <= j_reg_445;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_0_reg_186 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        c_reg_471 <= grp_fu_280_p1;
        s_reg_477 <= grp_fu_284_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_407 <= i_3_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_reg_523 <= i_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_reg_445 <= j_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_300 <= grp_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state40))) begin
        reg_306 <= grp_fu_247_p2;
        reg_313 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_imag_addr_reg_427 <= zext_ln19_fu_337_p1;
        temp_real_addr_reg_422 <= zext_ln19_fu_337_p1;
        w_reg_432 <= grp_fu_280_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_2_reg_417 <= grp_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_3_reg_450 <= grp_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_5_reg_515 <= grp_fu_272_p2;
        tmp_7_reg_510 <= grp_fu_267_p2;
        tmp_s_reg_505 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_412 <= grp_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        x_assign_reg_455 <= grp_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        zext_ln41_reg_528[8 : 0] <= zext_ln41_fu_393_p1[8 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_247_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_247_opcode = 2'd0;
    end else begin
        grp_fu_247_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_247_p0 = empty_44_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_247_p0 = reg_300;
    end else begin
        grp_fu_247_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_247_p1 = reg_306;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_247_p1 = tmp_s_reg_505;
    end else begin
        grp_fu_247_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_251_p0 = empty_43_reg_162;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_251_p0 = tmp_7_reg_510;
    end else begin
        grp_fu_251_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_251_p1 = reg_313;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_251_p1 = tmp_5_reg_515;
    end else begin
        grp_fu_251_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_257_p0 = sample_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_257_p0 = tmp_3_reg_450;
    end else begin
        grp_fu_257_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_257_p1 = c_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_257_p1 = w_reg_432;
    end else begin
        grp_fu_257_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == ap_block_state25_on_subcall_done)))) begin
        grp_fu_280_ce = 1'b1;
    end else begin
        grp_fu_280_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_280_p0 = grp_sin_or_cos_double_s_fu_209_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_280_p0 = tmp_2_reg_417;
    end else begin
        grp_fu_280_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == ap_block_state25_on_subcall_done)))) begin
        grp_fu_284_ce = 1'b1;
    end else begin
        grp_fu_284_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        sample_imag_address0 = zext_ln41_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sample_imag_address0 = zext_ln34_fu_375_p1;
    end else begin
        sample_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state26))) begin
        sample_imag_ce0 = 1'b1;
    end else begin
        sample_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        sample_imag_we0 = 1'b1;
    end else begin
        sample_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        sample_real_address0 = zext_ln41_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sample_real_address0 = zext_ln34_fu_375_p1;
    end else begin
        sample_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state26))) begin
        sample_real_ce0 = 1'b1;
    end else begin
        sample_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        sample_real_we0 = 1'b1;
    end else begin
        sample_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_imag_address0 = zext_ln41_fu_393_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_imag_address0 = temp_imag_addr_reg_427;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_imag_address0 = zext_ln19_fu_337_p1;
    end else begin
        temp_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state14))) begin
        temp_imag_ce0 = 1'b1;
    end else begin
        temp_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_imag_d0 = reg_313;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_imag_d0 = 32'd0;
    end else begin
        temp_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state14))) begin
        temp_imag_we0 = 1'b1;
    end else begin
        temp_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_real_address0 = zext_ln41_fu_393_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_real_address0 = temp_real_addr_reg_422;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_real_address0 = zext_ln19_fu_337_p1;
    end else begin
        temp_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state14))) begin
        temp_real_ce0 = 1'b1;
    end else begin
        temp_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_real_d0 = reg_306;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_real_d0 = 32'd0;
    end else begin
        temp_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state14))) begin
        temp_real_we0 = 1'b1;
    end else begin
        temp_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln27_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (1'b0 == ap_block_state25_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state42 : begin
            if (((icmp_ln40_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state25_on_subcall_done = ((grp_sin_or_cos_double_s_fu_228_ap_done == 1'b0) | (grp_sin_or_cos_double_s_fu_209_ap_done == 1'b0));
end

assign bitcast_ln30_fu_360_p1 = grp_sin_or_cos_double_s_fu_228_ap_return;

assign grp_fu_277_p0 = j_0_reg_186;

assign grp_fu_284_p0 = xor_ln30_fu_364_p2;

assign grp_fu_297_p0 = i_0_reg_150;

assign grp_sin_or_cos_double_s_fu_209_ap_start = grp_sin_or_cos_double_s_fu_209_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_209_do_cos = 1'd1;

assign grp_sin_or_cos_double_s_fu_228_ap_start = grp_sin_or_cos_double_s_fu_228_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_228_do_cos = 1'd0;

assign i_3_fu_331_p2 = (i_0_reg_150 + 9'd1);

assign i_fu_387_p2 = (i_1_reg_198 + 9'd1);

assign icmp_ln18_fu_325_p2 = ((i_0_reg_150 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_348_p2 = ((j_0_reg_186 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_381_p2 = ((i_1_reg_198 == 9'd256) ? 1'b1 : 1'b0);

assign j_fu_354_p2 = (j_0_reg_186 + 9'd1);

assign sample_imag_d0 = temp_imag_q0;

assign sample_real_d0 = temp_real_q0;

assign xor_ln30_fu_364_p2 = (bitcast_ln30_fu_360_p1 ^ 64'd9223372036854775808);

assign zext_ln19_fu_337_p1 = i_0_reg_150;

assign zext_ln34_fu_375_p1 = j_0_reg_186;

assign zext_ln41_fu_393_p1 = i_1_reg_198;

always @ (posedge ap_clk) begin
    zext_ln41_reg_528[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //dft
