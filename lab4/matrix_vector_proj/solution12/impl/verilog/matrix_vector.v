// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=24,HLS_SYN_FF=378,HLS_SYN_LUT=549,HLS_VERSION=2020_1}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_0_address0,
        M_0_ce0,
        M_0_q0,
        M_1_address0,
        M_1_ce0,
        M_1_q0,
        M_2_address0,
        M_2_ce0,
        M_2_q0,
        M_3_address0,
        M_3_ce0,
        M_3_q0,
        M_4_address0,
        M_4_ce0,
        M_4_q0,
        M_5_address0,
        M_5_ce0,
        M_5_q0,
        M_6_address0,
        M_6_ce0,
        M_6_q0,
        M_7_address0,
        M_7_ce0,
        M_7_q0,
        V_In_address0,
        V_In_ce0,
        V_In_q0,
        V_In_address1,
        V_In_ce1,
        V_In_q1,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] M_0_address0;
output   M_0_ce0;
input  [31:0] M_0_q0;
output  [2:0] M_1_address0;
output   M_1_ce0;
input  [31:0] M_1_q0;
output  [2:0] M_2_address0;
output   M_2_ce0;
input  [31:0] M_2_q0;
output  [2:0] M_3_address0;
output   M_3_ce0;
input  [31:0] M_3_q0;
output  [2:0] M_4_address0;
output   M_4_ce0;
input  [31:0] M_4_q0;
output  [2:0] M_5_address0;
output   M_5_ce0;
input  [31:0] M_5_q0;
output  [2:0] M_6_address0;
output   M_6_ce0;
input  [31:0] M_6_q0;
output  [2:0] M_7_address0;
output   M_7_ce0;
input  [31:0] M_7_q0;
output  [2:0] V_In_address0;
output   V_In_ce0;
input  [31:0] V_In_q0;
output  [2:0] V_In_address1;
output   V_In_ce1;
input  [31:0] V_In_q1;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg M_0_ce0;
reg M_1_ce0;
reg M_2_ce0;
reg M_3_ce0;
reg M_4_ce0;
reg M_5_ce0;
reg M_6_ce0;
reg M_7_ce0;
reg[2:0] V_In_address0;
reg V_In_ce0;
reg[2:0] V_In_address1;
reg V_In_ce1;
reg V_Out_ce0;
reg V_Out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_0_reg_264;
wire   [0:0] icmp_ln7_fu_275_p2;
reg   [0:0] icmp_ln7_reg_419;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln7_reg_419_pp0_iter1_reg;
wire   [3:0] i_fu_281_p2;
reg   [3:0] i_reg_423;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln11_fu_287_p1;
reg   [63:0] zext_ln11_reg_428;
reg   [63:0] zext_ln11_reg_428_pp0_iter1_reg;
reg  signed [31:0] M_2_load_reg_473;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] M_3_load_reg_478;
reg  signed [31:0] M_4_load_reg_483;
reg  signed [31:0] M_5_load_reg_488;
reg  signed [31:0] M_6_load_reg_493;
reg  signed [31:0] M_7_load_reg_498;
wire   [31:0] add_ln11_fu_311_p2;
reg   [31:0] add_ln11_reg_503;
wire   [31:0] add_ln11_1_fu_327_p2;
reg   [31:0] add_ln11_1_reg_508;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] mul_ln11_4_fu_333_p2;
reg   [31:0] mul_ln11_4_reg_513;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] mul_ln11_5_fu_338_p2;
reg   [31:0] mul_ln11_5_reg_518;
wire   [31:0] add_ln11_4_fu_353_p2;
reg   [31:0] add_ln11_4_reg_523;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] ap_phi_mux_i_0_phi_fu_268_p4;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire  signed [31:0] mul_ln11_fu_299_p0;
wire  signed [31:0] mul_ln11_fu_299_p1;
wire  signed [31:0] mul_ln11_1_fu_305_p0;
wire  signed [31:0] mul_ln11_1_fu_305_p1;
wire   [31:0] mul_ln11_fu_299_p2;
wire   [31:0] mul_ln11_1_fu_305_p2;
wire  signed [31:0] mul_ln11_2_fu_317_p0;
wire  signed [31:0] mul_ln11_3_fu_322_p0;
wire   [31:0] mul_ln11_2_fu_317_p2;
wire   [31:0] mul_ln11_3_fu_322_p2;
wire  signed [31:0] mul_ln11_4_fu_333_p0;
wire  signed [31:0] mul_ln11_5_fu_338_p0;
wire  signed [31:0] mul_ln11_6_fu_343_p0;
wire  signed [31:0] mul_ln11_7_fu_348_p0;
wire   [31:0] mul_ln11_6_fu_343_p2;
wire   [31:0] mul_ln11_7_fu_348_p2;
wire   [31:0] add_ln11_3_fu_363_p2;
wire   [31:0] add_ln11_5_fu_367_p2;
wire   [31:0] add_ln11_2_fu_359_p2;
wire    ap_CS_fsm_state8;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_reg_419 == 1'd0))) begin
        i_0_reg_264 <= i_reg_423;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_264 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln7_reg_419 == 1'd0))) begin
        M_2_load_reg_473 <= M_2_q0;
        M_3_load_reg_478 <= M_3_q0;
        M_4_load_reg_483 <= M_4_q0;
        M_5_load_reg_488 <= M_5_q0;
        M_6_load_reg_493 <= M_6_q0;
        M_7_load_reg_498 <= M_7_q0;
        add_ln11_reg_503 <= add_ln11_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln7_reg_419 == 1'd0))) begin
        add_ln11_1_reg_508 <= add_ln11_1_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_reg_419 == 1'd0))) begin
        add_ln11_4_reg_523 <= add_ln11_4_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_423 <= i_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln7_reg_419 <= icmp_ln7_fu_275_p2;
        icmp_ln7_reg_419_pp0_iter1_reg <= icmp_ln7_reg_419;
        zext_ln11_reg_428_pp0_iter1_reg[3 : 0] <= zext_ln11_reg_428[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln7_reg_419 == 1'd0))) begin
        mul_ln11_4_reg_513 <= mul_ln11_4_fu_333_p2;
        mul_ln11_5_reg_518 <= mul_ln11_5_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_fu_275_p2 == 1'd0))) begin
        zext_ln11_reg_428[3 : 0] <= zext_ln11_fu_287_p1[3 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_0_ce0 = 1'b1;
    end else begin
        M_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_1_ce0 = 1'b1;
    end else begin
        M_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_2_ce0 = 1'b1;
    end else begin
        M_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_3_ce0 = 1'b1;
    end else begin
        M_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_4_ce0 = 1'b1;
    end else begin
        M_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_5_ce0 = 1'b1;
    end else begin
        M_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_6_ce0 = 1'b1;
    end else begin
        M_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_7_ce0 = 1'b1;
    end else begin
        M_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            V_In_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            V_In_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            V_In_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            V_In_address0 = 64'd0;
        end else begin
            V_In_address0 = 'bx;
        end
    end else begin
        V_In_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            V_In_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            V_In_address1 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            V_In_address1 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            V_In_address1 = 64'd1;
        end else begin
            V_In_address1 = 'bx;
        end
    end else begin
        V_In_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        V_In_ce0 = 1'b1;
    end else begin
        V_In_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        V_In_ce1 = 1'b1;
    end else begin
        V_In_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln7_reg_419_pp0_iter1_reg == 1'd0))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln7_fu_275_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_reg_419 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_268_p4 = i_reg_423;
    end else begin
        ap_phi_mux_i_0_phi_fu_268_p4 = i_0_reg_264;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_275_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_0_address0 = zext_ln11_fu_287_p1;

assign M_1_address0 = zext_ln11_fu_287_p1;

assign M_2_address0 = zext_ln11_fu_287_p1;

assign M_3_address0 = zext_ln11_fu_287_p1;

assign M_4_address0 = zext_ln11_fu_287_p1;

assign M_5_address0 = zext_ln11_fu_287_p1;

assign M_6_address0 = zext_ln11_fu_287_p1;

assign M_7_address0 = zext_ln11_fu_287_p1;

assign V_Out_address0 = zext_ln11_reg_428_pp0_iter1_reg;

assign V_Out_d0 = (add_ln11_5_fu_367_p2 + add_ln11_2_fu_359_p2);

assign add_ln11_1_fu_327_p2 = (mul_ln11_2_fu_317_p2 + mul_ln11_3_fu_322_p2);

assign add_ln11_2_fu_359_p2 = (add_ln11_1_reg_508 + add_ln11_reg_503);

assign add_ln11_3_fu_363_p2 = (mul_ln11_4_reg_513 + mul_ln11_5_reg_518);

assign add_ln11_4_fu_353_p2 = (mul_ln11_6_fu_343_p2 + mul_ln11_7_fu_348_p2);

assign add_ln11_5_fu_367_p2 = (add_ln11_4_reg_523 + add_ln11_3_fu_363_p2);

assign add_ln11_fu_311_p2 = (mul_ln11_fu_299_p2 + mul_ln11_1_fu_305_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_281_p2 = (ap_phi_mux_i_0_phi_fu_268_p4 + 4'd1);

assign icmp_ln7_fu_275_p2 = ((ap_phi_mux_i_0_phi_fu_268_p4 == 4'd8) ? 1'b1 : 1'b0);

assign mul_ln11_1_fu_305_p0 = V_In_q1;

assign mul_ln11_1_fu_305_p1 = M_1_q0;

assign mul_ln11_1_fu_305_p2 = ($signed(mul_ln11_1_fu_305_p0) * $signed(mul_ln11_1_fu_305_p1));

assign mul_ln11_2_fu_317_p0 = V_In_q0;

assign mul_ln11_2_fu_317_p2 = ($signed(mul_ln11_2_fu_317_p0) * $signed(M_2_load_reg_473));

assign mul_ln11_3_fu_322_p0 = V_In_q1;

assign mul_ln11_3_fu_322_p2 = ($signed(mul_ln11_3_fu_322_p0) * $signed(M_3_load_reg_478));

assign mul_ln11_4_fu_333_p0 = V_In_q0;

assign mul_ln11_4_fu_333_p2 = ($signed(mul_ln11_4_fu_333_p0) * $signed(M_4_load_reg_483));

assign mul_ln11_5_fu_338_p0 = V_In_q1;

assign mul_ln11_5_fu_338_p2 = ($signed(mul_ln11_5_fu_338_p0) * $signed(M_5_load_reg_488));

assign mul_ln11_6_fu_343_p0 = V_In_q0;

assign mul_ln11_6_fu_343_p2 = ($signed(mul_ln11_6_fu_343_p0) * $signed(M_6_load_reg_493));

assign mul_ln11_7_fu_348_p0 = V_In_q1;

assign mul_ln11_7_fu_348_p2 = ($signed(mul_ln11_7_fu_348_p0) * $signed(M_7_load_reg_498));

assign mul_ln11_fu_299_p0 = V_In_q0;

assign mul_ln11_fu_299_p1 = M_0_q0;

assign mul_ln11_fu_299_p2 = ($signed(mul_ln11_fu_299_p0) * $signed(mul_ln11_fu_299_p1));

assign zext_ln11_fu_287_p1 = ap_phi_mux_i_0_phi_fu_268_p4;

always @ (posedge ap_clk) begin
    zext_ln11_reg_428[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln11_reg_428_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrix_vector
