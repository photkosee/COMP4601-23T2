-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_vector is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    M_ce0 : OUT STD_LOGIC;
    M_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    M_ce1 : OUT STD_LOGIC;
    M_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_In_ce0 : OUT STD_LOGIC;
    V_In_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_In_ce1 : OUT STD_LOGIC;
    V_In_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_Out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_Out_ce0 : OUT STD_LOGIC;
    V_Out_we0 : OUT STD_LOGIC;
    V_Out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_vector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=115,HLS_SYN_LUT=437,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_263_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_452 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_269_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_457 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln7_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln11_2_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_2_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_4_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln11_1_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_288_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_302_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_316_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_330_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_344_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_370_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_384_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln11_fu_282_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln11_1_fu_297_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln11_2_fu_311_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln11_3_fu_325_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln11_4_fu_339_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_1_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln11_5_fu_365_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln11_6_fu_379_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_5_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_223 <= i_reg_452;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_223 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln11_2_reg_497 <= add_ln11_2_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln11_4_reg_512 <= grp_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_452 <= i_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_253 <= grp_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_457(6 downto 3) <= tmp_fu_269_p3(6 downto 3);
            end if;
        end if;
    end process;
    tmp_reg_457(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_257_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    M_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln11_1_fu_277_p1, tmp_2_fu_302_p3, tmp_4_fu_330_p3, tmp_6_fu_370_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            M_address0 <= tmp_6_fu_370_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            M_address0 <= tmp_4_fu_330_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            M_address0 <= tmp_2_fu_302_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            M_address0 <= zext_ln11_1_fu_277_p1(6 - 1 downto 0);
        else 
            M_address0 <= "XXXXXX";
        end if; 
    end process;


    M_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_1_fu_288_p3, tmp_3_fu_316_p3, tmp_5_fu_344_p3, tmp_7_fu_384_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            M_address1 <= tmp_7_fu_384_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            M_address1 <= tmp_5_fu_344_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            M_address1 <= tmp_3_fu_316_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            M_address1 <= tmp_1_fu_288_p3(6 - 1 downto 0);
        else 
            M_address1 <= "XXXXXX";
        end if; 
    end process;


    M_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            M_ce0 <= ap_const_logic_1;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            M_ce1 <= ap_const_logic_1;
        else 
            M_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    V_In_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            V_In_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            V_In_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_In_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_In_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            V_In_address0 <= "XXX";
        end if; 
    end process;


    V_In_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            V_In_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            V_In_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_In_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_In_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            V_In_address1 <= "XXX";
        end if; 
    end process;


    V_In_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            V_In_ce0 <= ap_const_logic_1;
        else 
            V_In_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_In_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            V_In_ce1 <= ap_const_logic_1;
        else 
            V_In_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_address0 <= zext_ln11_fu_393_p1(3 - 1 downto 0);

    V_Out_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            V_Out_ce0 <= ap_const_logic_1;
        else 
            V_Out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_d0 <= std_logic_vector(unsigned(add_ln11_2_reg_497) + unsigned(add_ln11_5_fu_398_p2));

    V_Out_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            V_Out_we0 <= ap_const_logic_1;
        else 
            V_Out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_1_fu_353_p2 <= std_logic_vector(unsigned(grp_fu_241_p2) + unsigned(grp_fu_235_p2));
    add_ln11_2_fu_359_p2 <= std_logic_vector(unsigned(reg_253) + unsigned(add_ln11_1_fu_353_p2));
    add_ln11_5_fu_398_p2 <= std_logic_vector(unsigned(reg_253) + unsigned(add_ln11_4_reg_512));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_257_p2)
    begin
        if (((icmp_ln7_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_257_p2)
    begin
        if (((icmp_ln7_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_235_p0 <= M_q0;
    grp_fu_235_p1 <= V_In_q0;
    grp_fu_235_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_235_p0) * signed(grp_fu_235_p1))), 32));
    grp_fu_241_p0 <= M_q1;
    grp_fu_241_p1 <= V_In_q1;
    grp_fu_241_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_241_p0) * signed(grp_fu_241_p1))), 32));
    grp_fu_247_p2 <= std_logic_vector(unsigned(grp_fu_241_p2) + unsigned(grp_fu_235_p2));
    i_fu_263_p2 <= std_logic_vector(unsigned(i_0_reg_223) + unsigned(ap_const_lv4_1));
    icmp_ln7_fu_257_p2 <= "1" when (i_0_reg_223 = ap_const_lv4_8) else "0";
    or_ln11_1_fu_297_p2 <= (tmp_reg_457 or ap_const_lv7_2);
    or_ln11_2_fu_311_p2 <= (tmp_reg_457 or ap_const_lv7_3);
    or_ln11_3_fu_325_p2 <= (tmp_reg_457 or ap_const_lv7_4);
    or_ln11_4_fu_339_p2 <= (tmp_reg_457 or ap_const_lv7_5);
    or_ln11_5_fu_365_p2 <= (tmp_reg_457 or ap_const_lv7_6);
    or_ln11_6_fu_379_p2 <= (tmp_reg_457 or ap_const_lv7_7);
    or_ln11_fu_282_p2 <= (tmp_fu_269_p3 or ap_const_lv7_1);
    tmp_1_fu_288_p3 <= (ap_const_lv57_0 & or_ln11_fu_282_p2);
    tmp_2_fu_302_p3 <= (ap_const_lv57_0 & or_ln11_1_fu_297_p2);
    tmp_3_fu_316_p3 <= (ap_const_lv57_0 & or_ln11_2_fu_311_p2);
    tmp_4_fu_330_p3 <= (ap_const_lv57_0 & or_ln11_3_fu_325_p2);
    tmp_5_fu_344_p3 <= (ap_const_lv57_0 & or_ln11_4_fu_339_p2);
    tmp_6_fu_370_p3 <= (ap_const_lv57_0 & or_ln11_5_fu_365_p2);
    tmp_7_fu_384_p3 <= (ap_const_lv57_0 & or_ln11_6_fu_379_p2);
    tmp_fu_269_p3 <= (i_0_reg_223 & ap_const_lv3_0);
    zext_ln11_1_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_269_p3),64));
    zext_ln11_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_223),64));
end behav;
