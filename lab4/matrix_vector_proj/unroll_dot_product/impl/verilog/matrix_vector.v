// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=115,HLS_SYN_LUT=437,HLS_VERSION=2020_1}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_address0,
        M_ce0,
        M_q0,
        M_address1,
        M_ce1,
        M_q1,
        V_In_address0,
        V_In_ce0,
        V_In_q0,
        V_In_address1,
        V_In_ce1,
        V_In_q1,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] M_address0;
output   M_ce0;
input  [31:0] M_q0;
output  [5:0] M_address1;
output   M_ce1;
input  [31:0] M_q1;
output  [2:0] V_In_address0;
output   V_In_ce0;
input  [31:0] V_In_q0;
output  [2:0] V_In_address1;
output   V_In_ce1;
input  [31:0] V_In_q1;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] M_address0;
reg M_ce0;
reg[5:0] M_address1;
reg M_ce1;
reg[2:0] V_In_address0;
reg V_In_ce0;
reg[2:0] V_In_address1;
reg V_In_ce1;
reg V_Out_ce0;
reg V_Out_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] reg_253;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire   [3:0] i_fu_263_p2;
reg   [3:0] i_reg_452;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_fu_269_p3;
reg   [6:0] tmp_reg_457;
wire   [0:0] icmp_ln7_fu_257_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln11_2_fu_359_p2;
reg   [31:0] add_ln11_2_reg_497;
reg   [31:0] add_ln11_4_reg_512;
wire    ap_CS_fsm_state6;
reg   [3:0] i_0_reg_223;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln11_1_fu_277_p1;
wire   [63:0] tmp_1_fu_288_p3;
wire   [63:0] tmp_2_fu_302_p3;
wire   [63:0] tmp_3_fu_316_p3;
wire   [63:0] tmp_4_fu_330_p3;
wire   [63:0] tmp_5_fu_344_p3;
wire   [63:0] tmp_6_fu_370_p3;
wire   [63:0] tmp_7_fu_384_p3;
wire   [63:0] zext_ln11_fu_393_p1;
wire  signed [31:0] grp_fu_235_p0;
wire  signed [31:0] grp_fu_235_p1;
wire  signed [31:0] grp_fu_241_p0;
wire  signed [31:0] grp_fu_241_p1;
wire   [31:0] grp_fu_241_p2;
wire   [31:0] grp_fu_235_p2;
wire   [6:0] or_ln11_fu_282_p2;
wire   [6:0] or_ln11_1_fu_297_p2;
wire   [6:0] or_ln11_2_fu_311_p2;
wire   [6:0] or_ln11_3_fu_325_p2;
wire   [6:0] or_ln11_4_fu_339_p2;
wire   [31:0] add_ln11_1_fu_353_p2;
wire   [6:0] or_ln11_5_fu_365_p2;
wire   [6:0] or_ln11_6_fu_379_p2;
wire   [31:0] add_ln11_5_fu_398_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_223 <= i_reg_452;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_223 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln11_2_reg_497 <= add_ln11_2_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln11_4_reg_512 <= grp_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_452 <= i_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_253 <= grp_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_457[6 : 3] <= tmp_fu_269_p3[6 : 3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        M_address0 = tmp_6_fu_370_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        M_address0 = tmp_4_fu_330_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        M_address0 = tmp_2_fu_302_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        M_address0 = zext_ln11_1_fu_277_p1;
    end else begin
        M_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        M_address1 = tmp_7_fu_384_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        M_address1 = tmp_5_fu_344_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        M_address1 = tmp_3_fu_316_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        M_address1 = tmp_1_fu_288_p3;
    end else begin
        M_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        M_ce1 = 1'b1;
    end else begin
        M_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        V_In_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        V_In_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        V_In_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        V_In_address0 = 64'd0;
    end else begin
        V_In_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        V_In_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        V_In_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        V_In_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        V_In_address1 = 64'd1;
    end else begin
        V_In_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        V_In_ce0 = 1'b1;
    end else begin
        V_In_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        V_In_ce1 = 1'b1;
    end else begin
        V_In_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_Out_address0 = zext_ln11_fu_393_p1;

assign V_Out_d0 = (add_ln11_2_reg_497 + add_ln11_5_fu_398_p2);

assign add_ln11_1_fu_353_p2 = (grp_fu_241_p2 + grp_fu_235_p2);

assign add_ln11_2_fu_359_p2 = (reg_253 + add_ln11_1_fu_353_p2);

assign add_ln11_5_fu_398_p2 = (reg_253 + add_ln11_4_reg_512);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_fu_235_p0 = M_q0;

assign grp_fu_235_p1 = V_In_q0;

assign grp_fu_235_p2 = ($signed(grp_fu_235_p0) * $signed(grp_fu_235_p1));

assign grp_fu_241_p0 = M_q1;

assign grp_fu_241_p1 = V_In_q1;

assign grp_fu_241_p2 = ($signed(grp_fu_241_p0) * $signed(grp_fu_241_p1));

assign grp_fu_247_p2 = (grp_fu_241_p2 + grp_fu_235_p2);

assign i_fu_263_p2 = (i_0_reg_223 + 4'd1);

assign icmp_ln7_fu_257_p2 = ((i_0_reg_223 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln11_1_fu_297_p2 = (tmp_reg_457 | 7'd2);

assign or_ln11_2_fu_311_p2 = (tmp_reg_457 | 7'd3);

assign or_ln11_3_fu_325_p2 = (tmp_reg_457 | 7'd4);

assign or_ln11_4_fu_339_p2 = (tmp_reg_457 | 7'd5);

assign or_ln11_5_fu_365_p2 = (tmp_reg_457 | 7'd6);

assign or_ln11_6_fu_379_p2 = (tmp_reg_457 | 7'd7);

assign or_ln11_fu_282_p2 = (tmp_fu_269_p3 | 7'd1);

assign tmp_1_fu_288_p3 = {{57'd0}, {or_ln11_fu_282_p2}};

assign tmp_2_fu_302_p3 = {{57'd0}, {or_ln11_1_fu_297_p2}};

assign tmp_3_fu_316_p3 = {{57'd0}, {or_ln11_2_fu_311_p2}};

assign tmp_4_fu_330_p3 = {{57'd0}, {or_ln11_3_fu_325_p2}};

assign tmp_5_fu_344_p3 = {{57'd0}, {or_ln11_4_fu_339_p2}};

assign tmp_6_fu_370_p3 = {{57'd0}, {or_ln11_5_fu_365_p2}};

assign tmp_7_fu_384_p3 = {{57'd0}, {or_ln11_6_fu_379_p2}};

assign tmp_fu_269_p3 = {{i_0_reg_223}, {3'd0}};

assign zext_ln11_1_fu_277_p1 = tmp_fu_269_p3;

assign zext_ln11_fu_393_p1 = i_0_reg_223;

always @ (posedge ap_clk) begin
    tmp_reg_457[2:0] <= 3'b000;
end

endmodule //matrix_vector
