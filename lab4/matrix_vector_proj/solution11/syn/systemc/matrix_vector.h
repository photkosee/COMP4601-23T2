// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix_vector_HH_
#define _matrix_vector_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct matrix_vector : public sc_module {
    // Port declarations 42
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > M_0_address0;
    sc_out< sc_logic > M_0_ce0;
    sc_in< sc_lv<32> > M_0_q0;
    sc_out< sc_lv<3> > M_1_address0;
    sc_out< sc_logic > M_1_ce0;
    sc_in< sc_lv<32> > M_1_q0;
    sc_out< sc_lv<3> > M_2_address0;
    sc_out< sc_logic > M_2_ce0;
    sc_in< sc_lv<32> > M_2_q0;
    sc_out< sc_lv<3> > M_3_address0;
    sc_out< sc_logic > M_3_ce0;
    sc_in< sc_lv<32> > M_3_q0;
    sc_out< sc_lv<3> > M_4_address0;
    sc_out< sc_logic > M_4_ce0;
    sc_in< sc_lv<32> > M_4_q0;
    sc_out< sc_lv<3> > M_5_address0;
    sc_out< sc_logic > M_5_ce0;
    sc_in< sc_lv<32> > M_5_q0;
    sc_out< sc_lv<3> > M_6_address0;
    sc_out< sc_logic > M_6_ce0;
    sc_in< sc_lv<32> > M_6_q0;
    sc_out< sc_lv<3> > M_7_address0;
    sc_out< sc_logic > M_7_ce0;
    sc_in< sc_lv<32> > M_7_q0;
    sc_in< sc_lv<32> > V_In_0;
    sc_in< sc_lv<32> > V_In_1;
    sc_in< sc_lv<32> > V_In_2;
    sc_in< sc_lv<32> > V_In_3;
    sc_in< sc_lv<32> > V_In_4;
    sc_in< sc_lv<32> > V_In_5;
    sc_in< sc_lv<32> > V_In_6;
    sc_in< sc_lv<32> > V_In_7;
    sc_out< sc_lv<3> > V_Out_address0;
    sc_out< sc_logic > V_Out_ce0;
    sc_out< sc_logic > V_Out_we0;
    sc_out< sc_lv<32> > V_Out_d0;


    // Module declarations
    matrix_vector(sc_module_name name);
    SC_HAS_PROCESS(matrix_vector);

    ~matrix_vector();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_0_reg_237;
    sc_signal< sc_lv<1> > icmp_ln7_fu_248_p2;
    sc_signal< sc_lv<1> > icmp_ln7_reg_339;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln7_reg_339_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln7_reg_339_pp0_iter2_reg;
    sc_signal< sc_lv<4> > i_fu_254_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln11_fu_260_p1;
    sc_signal< sc_lv<64> > zext_ln11_reg_348;
    sc_signal< sc_lv<64> > zext_ln11_reg_348_pp0_iter1_reg;
    sc_signal< sc_lv<64> > zext_ln11_reg_348_pp0_iter2_reg;
    sc_signal< sc_lv<32> > V_In_0_read_reg_353;
    sc_signal< sc_lv<32> > V_In_0_read_reg_353_pp0_iter1_reg;
    sc_signal< sc_lv<32> > V_In_1_read_reg_363;
    sc_signal< sc_lv<32> > V_In_1_read_reg_363_pp0_iter1_reg;
    sc_signal< sc_lv<32> > V_In_2_read_reg_373;
    sc_signal< sc_lv<32> > V_In_2_read_reg_373_pp0_iter1_reg;
    sc_signal< sc_lv<32> > V_In_3_read_reg_383;
    sc_signal< sc_lv<32> > V_In_3_read_reg_383_pp0_iter1_reg;
    sc_signal< sc_lv<32> > V_In_4_read_reg_393;
    sc_signal< sc_lv<32> > V_In_4_read_reg_393_pp0_iter1_reg;
    sc_signal< sc_lv<32> > V_In_5_read_reg_403;
    sc_signal< sc_lv<32> > V_In_5_read_reg_403_pp0_iter1_reg;
    sc_signal< sc_lv<32> > V_In_6_read_reg_413;
    sc_signal< sc_lv<32> > V_In_6_read_reg_413_pp0_iter1_reg;
    sc_signal< sc_lv<32> > V_In_7_read_reg_423;
    sc_signal< sc_lv<32> > V_In_7_read_reg_423_pp0_iter1_reg;
    sc_signal< sc_lv<32> > M_0_load_reg_433;
    sc_signal< sc_lv<32> > M_1_load_reg_438;
    sc_signal< sc_lv<32> > M_2_load_reg_443;
    sc_signal< sc_lv<32> > M_3_load_reg_448;
    sc_signal< sc_lv<32> > M_4_load_reg_453;
    sc_signal< sc_lv<32> > M_5_load_reg_458;
    sc_signal< sc_lv<32> > M_6_load_reg_463;
    sc_signal< sc_lv<32> > M_7_load_reg_468;
    sc_signal< sc_lv<32> > mul_ln11_fu_272_p2;
    sc_signal< sc_lv<32> > mul_ln11_reg_473;
    sc_signal< sc_lv<32> > mul_ln11_1_fu_276_p2;
    sc_signal< sc_lv<32> > mul_ln11_1_reg_478;
    sc_signal< sc_lv<32> > mul_ln11_2_fu_280_p2;
    sc_signal< sc_lv<32> > mul_ln11_2_reg_483;
    sc_signal< sc_lv<32> > mul_ln11_3_fu_284_p2;
    sc_signal< sc_lv<32> > mul_ln11_3_reg_488;
    sc_signal< sc_lv<32> > mul_ln11_4_fu_288_p2;
    sc_signal< sc_lv<32> > mul_ln11_4_reg_493;
    sc_signal< sc_lv<32> > mul_ln11_5_fu_292_p2;
    sc_signal< sc_lv<32> > mul_ln11_5_reg_498;
    sc_signal< sc_lv<32> > mul_ln11_6_fu_296_p2;
    sc_signal< sc_lv<32> > mul_ln11_6_reg_503;
    sc_signal< sc_lv<32> > mul_ln11_7_fu_300_p2;
    sc_signal< sc_lv<32> > mul_ln11_7_reg_508;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > add_ln11_1_fu_308_p2;
    sc_signal< sc_lv<32> > add_ln11_fu_304_p2;
    sc_signal< sc_lv<32> > add_ln11_4_fu_322_p2;
    sc_signal< sc_lv<32> > add_ln11_3_fu_318_p2;
    sc_signal< sc_lv<32> > add_ln11_5_fu_326_p2;
    sc_signal< sc_lv<32> > add_ln11_2_fu_312_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_M_0_address0();
    void thread_M_0_ce0();
    void thread_M_1_address0();
    void thread_M_1_ce0();
    void thread_M_2_address0();
    void thread_M_2_ce0();
    void thread_M_3_address0();
    void thread_M_3_ce0();
    void thread_M_4_address0();
    void thread_M_4_ce0();
    void thread_M_5_address0();
    void thread_M_5_ce0();
    void thread_M_6_address0();
    void thread_M_6_ce0();
    void thread_M_7_address0();
    void thread_M_7_ce0();
    void thread_V_Out_address0();
    void thread_V_Out_ce0();
    void thread_V_Out_d0();
    void thread_V_Out_we0();
    void thread_add_ln11_1_fu_308_p2();
    void thread_add_ln11_2_fu_312_p2();
    void thread_add_ln11_3_fu_318_p2();
    void thread_add_ln11_4_fu_322_p2();
    void thread_add_ln11_5_fu_326_p2();
    void thread_add_ln11_fu_304_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_fu_254_p2();
    void thread_icmp_ln7_fu_248_p2();
    void thread_mul_ln11_1_fu_276_p2();
    void thread_mul_ln11_2_fu_280_p2();
    void thread_mul_ln11_3_fu_284_p2();
    void thread_mul_ln11_4_fu_288_p2();
    void thread_mul_ln11_5_fu_292_p2();
    void thread_mul_ln11_6_fu_296_p2();
    void thread_mul_ln11_7_fu_300_p2();
    void thread_mul_ln11_fu_272_p2();
    void thread_zext_ln11_fu_260_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
