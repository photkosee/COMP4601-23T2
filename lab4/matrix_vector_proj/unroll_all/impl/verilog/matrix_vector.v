// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.762000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=54,HLS_SYN_FF=866,HLS_SYN_LUT=1671,HLS_VERSION=2020_1}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_address0,
        M_ce0,
        M_q0,
        M_address1,
        M_ce1,
        M_q1,
        V_In_address0,
        V_In_ce0,
        V_In_q0,
        V_In_address1,
        V_In_ce1,
        V_In_q1,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0,
        V_Out_address1,
        V_Out_ce1,
        V_Out_we1,
        V_Out_d1
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] M_address0;
output   M_ce0;
input  [31:0] M_q0;
output  [5:0] M_address1;
output   M_ce1;
input  [31:0] M_q1;
output  [2:0] V_In_address0;
output   V_In_ce0;
input  [31:0] V_In_q0;
output  [2:0] V_In_address1;
output   V_In_ce1;
input  [31:0] V_In_q1;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;
output  [2:0] V_Out_address1;
output   V_Out_ce1;
output   V_Out_we1;
output  [31:0] V_Out_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] M_address0;
reg M_ce0;
reg[5:0] M_address1;
reg M_ce1;
reg[2:0] V_In_address0;
reg V_In_ce0;
reg[2:0] V_In_address1;
reg V_In_ce1;
reg[2:0] V_Out_address0;
reg V_Out_ce0;
reg V_Out_we0;
reg[31:0] V_Out_d0;
reg[2:0] V_Out_address1;
reg V_Out_ce1;
reg V_Out_we1;
reg[31:0] V_Out_d1;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] reg_937;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
reg  signed [31:0] reg_941;
wire   [31:0] grp_fu_899_p2;
reg   [31:0] reg_945;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_915_p2;
reg   [31:0] reg_949;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire   [31:0] grp_fu_931_p2;
reg   [31:0] reg_953;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state3;
reg  signed [31:0] M_load_2_reg_1147;
reg  signed [31:0] M_load_3_reg_1152;
wire    ap_CS_fsm_state4;
reg  signed [31:0] M_load_4_reg_1167;
reg  signed [31:0] M_load_5_reg_1172;
wire    ap_CS_fsm_state5;
reg  signed [31:0] M_load_6_reg_1197;
reg  signed [31:0] M_load_7_reg_1202;
reg  signed [31:0] V_In_load_reg_1217;
reg  signed [31:0] V_In_load_1_reg_1222;
wire   [31:0] add_ln11_fu_1005_p2;
reg   [31:0] add_ln11_reg_1237;
wire    ap_CS_fsm_state7;
reg  signed [31:0] V_In_load_2_reg_1252;
reg  signed [31:0] V_In_load_3_reg_1257;
wire   [31:0] add_ln11_1_fu_1021_p2;
reg   [31:0] add_ln11_1_reg_1272;
reg   [31:0] add_ln11_8_reg_1277;
reg  signed [31:0] V_In_load_4_reg_1292;
reg  signed [31:0] V_In_load_5_reg_1299;
wire    ap_CS_fsm_state9;
reg  signed [31:0] V_In_load_6_reg_1326;
reg  signed [31:0] V_In_load_7_reg_1331;
wire   [31:0] add_ln11_5_fu_1057_p2;
reg   [31:0] add_ln11_5_reg_1336;
reg   [31:0] add_ln11_11_reg_1341;
wire    ap_CS_fsm_state32;
wire   [31:0] mul_ln11_60_fu_1090_p2;
reg   [31:0] mul_ln11_60_reg_1576;
wire   [31:0] mul_ln11_61_fu_1095_p2;
reg   [31:0] mul_ln11_61_reg_1581;
wire    ap_CS_fsm_state34;
wire   [31:0] add_ln11_6_fu_1067_p2;
wire   [31:0] add_ln11_13_fu_1083_p2;
wire   [31:0] grp_fu_985_p2;
wire   [31:0] add_ln11_55_fu_1110_p2;
reg  signed [31:0] grp_fu_887_p0;
wire  signed [31:0] grp_fu_887_p1;
reg  signed [31:0] grp_fu_893_p0;
wire  signed [31:0] grp_fu_893_p1;
wire   [31:0] grp_fu_887_p2;
wire   [31:0] grp_fu_893_p2;
wire  signed [31:0] grp_fu_905_p1;
wire  signed [31:0] grp_fu_910_p1;
wire   [31:0] grp_fu_905_p2;
wire   [31:0] grp_fu_910_p2;
wire  signed [31:0] grp_fu_921_p1;
wire  signed [31:0] grp_fu_926_p1;
wire   [31:0] grp_fu_921_p2;
wire   [31:0] grp_fu_926_p2;
wire   [31:0] grp_fu_957_p2;
wire   [31:0] grp_fu_962_p2;
wire   [31:0] grp_fu_967_p2;
wire   [31:0] grp_fu_979_p2;
wire   [31:0] grp_fu_973_p2;
wire  signed [31:0] mul_ln11_fu_993_p0;
wire  signed [31:0] mul_ln11_1_fu_999_p0;
wire   [31:0] mul_ln11_fu_993_p2;
wire   [31:0] mul_ln11_1_fu_999_p2;
wire  signed [31:0] mul_ln11_2_fu_1011_p0;
wire  signed [31:0] mul_ln11_3_fu_1016_p0;
wire   [31:0] mul_ln11_2_fu_1011_p2;
wire   [31:0] mul_ln11_3_fu_1016_p2;
wire  signed [31:0] mul_ln11_6_fu_1035_p0;
wire  signed [31:0] mul_ln11_7_fu_1040_p0;
wire   [31:0] mul_ln11_4_fu_1027_p2;
wire   [31:0] mul_ln11_5_fu_1031_p2;
wire   [31:0] mul_ln11_6_fu_1035_p2;
wire   [31:0] mul_ln11_7_fu_1040_p2;
wire   [31:0] add_ln11_4_fu_1051_p2;
wire   [31:0] add_ln11_3_fu_1045_p2;
wire   [31:0] add_ln11_2_fu_1063_p2;
wire   [31:0] add_ln11_12_fu_1078_p2;
wire   [31:0] add_ln11_9_fu_1073_p2;
wire  signed [31:0] mul_ln11_60_fu_1090_p1;
wire  signed [31:0] mul_ln11_61_fu_1095_p1;
wire   [31:0] add_ln11_52_fu_1100_p2;
wire   [31:0] add_ln11_54_fu_1104_p2;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        M_load_2_reg_1147 <= M_q0;
        M_load_3_reg_1152 <= M_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        M_load_4_reg_1167 <= M_q0;
        M_load_5_reg_1172 <= M_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        M_load_6_reg_1197 <= M_q0;
        M_load_7_reg_1202 <= M_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        V_In_load_1_reg_1222 <= V_In_q1;
        V_In_load_reg_1217 <= V_In_q0;
        add_ln11_reg_1237 <= add_ln11_fu_1005_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        V_In_load_2_reg_1252 <= V_In_q0;
        V_In_load_3_reg_1257 <= V_In_q1;
        add_ln11_1_reg_1272 <= add_ln11_1_fu_1021_p2;
        add_ln11_8_reg_1277 <= grp_fu_899_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        V_In_load_4_reg_1292 <= V_In_q0;
        V_In_load_5_reg_1299 <= V_In_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        V_In_load_6_reg_1326 <= V_In_q0;
        V_In_load_7_reg_1331 <= V_In_q1;
        add_ln11_11_reg_1341 <= grp_fu_899_p2;
        add_ln11_5_reg_1336 <= add_ln11_5_fu_1057_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mul_ln11_60_reg_1576 <= mul_ln11_60_fu_1090_p2;
        mul_ln11_61_reg_1581 <= mul_ln11_61_fu_1095_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_937 <= M_q0;
        reg_941 <= M_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_945 <= grp_fu_899_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_949 <= grp_fu_915_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_953 <= grp_fu_931_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        M_address0 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        M_address0 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        M_address0 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        M_address0 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        M_address0 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        M_address0 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        M_address0 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        M_address0 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        M_address0 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        M_address0 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        M_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        M_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        M_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        M_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        M_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        M_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        M_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        M_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        M_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        M_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        M_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        M_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        M_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        M_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        M_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        M_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        M_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        M_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        M_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        M_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        M_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        M_address0 = 64'd0;
    end else begin
        M_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        M_address1 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        M_address1 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        M_address1 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        M_address1 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        M_address1 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        M_address1 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        M_address1 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        M_address1 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        M_address1 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        M_address1 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        M_address1 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        M_address1 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        M_address1 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        M_address1 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        M_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        M_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        M_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        M_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        M_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        M_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        M_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        M_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        M_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        M_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        M_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        M_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        M_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        M_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        M_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        M_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        M_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        M_address1 = 64'd1;
    end else begin
        M_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        M_ce1 = 1'b1;
    end else begin
        M_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        V_In_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        V_In_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        V_In_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        V_In_address0 = 64'd0;
    end else begin
        V_In_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        V_In_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        V_In_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        V_In_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        V_In_address1 = 64'd1;
    end else begin
        V_In_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        V_In_ce0 = 1'b1;
    end else begin
        V_In_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        V_In_ce1 = 1'b1;
    end else begin
        V_In_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        V_Out_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        V_Out_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        V_Out_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_Out_address0 = 64'd0;
    end else begin
        V_Out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        V_Out_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        V_Out_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        V_Out_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_Out_address1 = 64'd1;
    end else begin
        V_Out_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        V_Out_ce1 = 1'b1;
    end else begin
        V_Out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        V_Out_d0 = grp_fu_985_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_Out_d0 = add_ln11_6_fu_1067_p2;
    end else begin
        V_Out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        V_Out_d1 = add_ln11_55_fu_1110_p2;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18))) begin
        V_Out_d1 = grp_fu_985_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_Out_d1 = add_ln11_13_fu_1083_p2;
    end else begin
        V_Out_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        V_Out_we1 = 1'b1;
    end else begin
        V_Out_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_887_p0 = V_In_load_reg_1217;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_887_p0 = V_In_q0;
    end else begin
        grp_fu_887_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_893_p0 = V_In_load_1_reg_1222;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_893_p0 = V_In_q1;
    end else begin
        grp_fu_893_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_12_fu_1078_p2 = (add_ln11_11_reg_1341 + grp_fu_967_p2);

assign add_ln11_13_fu_1083_p2 = (add_ln11_12_fu_1078_p2 + add_ln11_9_fu_1073_p2);

assign add_ln11_1_fu_1021_p2 = (mul_ln11_2_fu_1011_p2 + mul_ln11_3_fu_1016_p2);

assign add_ln11_2_fu_1063_p2 = (add_ln11_1_reg_1272 + add_ln11_reg_1237);

assign add_ln11_3_fu_1045_p2 = (mul_ln11_4_fu_1027_p2 + mul_ln11_5_fu_1031_p2);

assign add_ln11_4_fu_1051_p2 = (mul_ln11_6_fu_1035_p2 + mul_ln11_7_fu_1040_p2);

assign add_ln11_52_fu_1100_p2 = (mul_ln11_60_reg_1576 + mul_ln11_61_reg_1581);

assign add_ln11_54_fu_1104_p2 = (reg_953 + add_ln11_52_fu_1100_p2);

assign add_ln11_55_fu_1110_p2 = (add_ln11_54_fu_1104_p2 + grp_fu_973_p2);

assign add_ln11_5_fu_1057_p2 = (add_ln11_4_fu_1051_p2 + add_ln11_3_fu_1045_p2);

assign add_ln11_6_fu_1067_p2 = (add_ln11_5_reg_1336 + add_ln11_2_fu_1063_p2);

assign add_ln11_9_fu_1073_p2 = (add_ln11_8_reg_1277 + reg_945);

assign add_ln11_fu_1005_p2 = (mul_ln11_fu_993_p2 + mul_ln11_1_fu_999_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_887_p1 = M_q0;

assign grp_fu_887_p2 = ($signed(grp_fu_887_p0) * $signed(grp_fu_887_p1));

assign grp_fu_893_p1 = M_q1;

assign grp_fu_893_p2 = ($signed(grp_fu_893_p0) * $signed(grp_fu_893_p1));

assign grp_fu_899_p2 = (grp_fu_887_p2 + grp_fu_893_p2);

assign grp_fu_905_p1 = M_q0;

assign grp_fu_905_p2 = ($signed(V_In_load_2_reg_1252) * $signed(grp_fu_905_p1));

assign grp_fu_910_p1 = M_q1;

assign grp_fu_910_p2 = ($signed(V_In_load_3_reg_1257) * $signed(grp_fu_910_p1));

assign grp_fu_915_p2 = (grp_fu_905_p2 + grp_fu_910_p2);

assign grp_fu_921_p1 = M_q0;

assign grp_fu_921_p2 = ($signed(V_In_load_6_reg_1326) * $signed(grp_fu_921_p1));

assign grp_fu_926_p1 = M_q1;

assign grp_fu_926_p2 = ($signed(V_In_load_7_reg_1331) * $signed(grp_fu_926_p1));

assign grp_fu_931_p2 = (grp_fu_921_p2 + grp_fu_926_p2);

assign grp_fu_957_p2 = ($signed(V_In_load_4_reg_1292) * $signed(reg_937));

assign grp_fu_962_p2 = ($signed(V_In_load_5_reg_1299) * $signed(reg_941));

assign grp_fu_967_p2 = (grp_fu_957_p2 + grp_fu_962_p2);

assign grp_fu_973_p2 = (reg_949 + reg_945);

assign grp_fu_979_p2 = (reg_953 + grp_fu_967_p2);

assign grp_fu_985_p2 = (grp_fu_979_p2 + grp_fu_973_p2);

assign mul_ln11_1_fu_999_p0 = V_In_q1;

assign mul_ln11_1_fu_999_p2 = ($signed(mul_ln11_1_fu_999_p0) * $signed(reg_941));

assign mul_ln11_2_fu_1011_p0 = V_In_q0;

assign mul_ln11_2_fu_1011_p2 = ($signed(mul_ln11_2_fu_1011_p0) * $signed(M_load_2_reg_1147));

assign mul_ln11_3_fu_1016_p0 = V_In_q1;

assign mul_ln11_3_fu_1016_p2 = ($signed(mul_ln11_3_fu_1016_p0) * $signed(M_load_3_reg_1152));

assign mul_ln11_4_fu_1027_p2 = ($signed(V_In_load_4_reg_1292) * $signed(M_load_4_reg_1167));

assign mul_ln11_5_fu_1031_p2 = ($signed(V_In_load_5_reg_1299) * $signed(M_load_5_reg_1172));

assign mul_ln11_60_fu_1090_p1 = M_q0;

assign mul_ln11_60_fu_1090_p2 = ($signed(V_In_load_4_reg_1292) * $signed(mul_ln11_60_fu_1090_p1));

assign mul_ln11_61_fu_1095_p1 = M_q1;

assign mul_ln11_61_fu_1095_p2 = ($signed(V_In_load_5_reg_1299) * $signed(mul_ln11_61_fu_1095_p1));

assign mul_ln11_6_fu_1035_p0 = V_In_q0;

assign mul_ln11_6_fu_1035_p2 = ($signed(mul_ln11_6_fu_1035_p0) * $signed(M_load_6_reg_1197));

assign mul_ln11_7_fu_1040_p0 = V_In_q1;

assign mul_ln11_7_fu_1040_p2 = ($signed(mul_ln11_7_fu_1040_p0) * $signed(M_load_7_reg_1202));

assign mul_ln11_fu_993_p0 = V_In_q0;

assign mul_ln11_fu_993_p2 = ($signed(mul_ln11_fu_993_p0) * $signed(reg_937));

endmodule //matrix_vector
