// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=136,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=337,HLS_SYN_LUT=975,HLS_VERSION=2020_1}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_address0,
        M_ce0,
        M_q0,
        V_In_address0,
        V_In_ce0,
        V_In_q0,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] M_address0;
output   M_ce0;
input  [31:0] M_q0;
output  [2:0] V_In_address0;
output   V_In_ce0;
input  [31:0] V_In_q0;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] M_address0;
reg M_ce0;
reg[2:0] V_In_address0;
reg V_In_ce0;
reg[2:0] V_Out_address0;
reg V_Out_ce0;
reg V_Out_we0;
reg[31:0] V_Out_d0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln10_fu_485_p2;
reg   [3:0] add_ln10_reg_750;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln10_fu_479_p2;
wire   [31:0] add_ln11_fu_497_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] add_ln10_1_fu_509_p2;
reg   [3:0] add_ln10_1_reg_773;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln10_1_fu_503_p2;
wire   [31:0] add_ln11_1_fu_531_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] add_ln10_2_fu_543_p2;
reg   [3:0] add_ln10_2_reg_796;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln10_2_fu_537_p2;
wire   [31:0] add_ln11_2_fu_563_p2;
wire    ap_CS_fsm_state7;
wire   [3:0] add_ln10_3_fu_575_p2;
reg   [3:0] add_ln10_3_reg_819;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln10_3_fu_569_p2;
wire   [31:0] add_ln11_3_fu_601_p2;
wire    ap_CS_fsm_state9;
wire   [3:0] add_ln10_4_fu_613_p2;
reg   [3:0] add_ln10_4_reg_842;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln10_4_fu_607_p2;
wire   [31:0] add_ln11_4_fu_633_p2;
wire    ap_CS_fsm_state11;
wire   [3:0] add_ln10_5_fu_645_p2;
reg   [3:0] add_ln10_5_reg_865;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln10_5_fu_639_p2;
wire   [31:0] add_ln11_5_fu_671_p2;
wire    ap_CS_fsm_state13;
wire   [3:0] add_ln10_6_fu_683_p2;
reg   [3:0] add_ln10_6_reg_888;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln10_6_fu_677_p2;
wire   [31:0] add_ln11_6_fu_703_p2;
wire    ap_CS_fsm_state15;
wire   [3:0] add_ln10_7_fu_715_p2;
reg   [3:0] add_ln10_7_reg_911;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln10_7_fu_709_p2;
wire   [31:0] add_ln11_7_fu_741_p2;
wire    ap_CS_fsm_state17;
reg   [3:0] j_0_0_reg_275;
reg   [31:0] sum_0_0_reg_286;
reg   [3:0] j_0_1_reg_299;
reg   [31:0] sum_0_1_reg_310;
reg   [3:0] j_0_2_reg_323;
reg   [31:0] sum_0_2_reg_334;
reg   [3:0] j_0_3_reg_347;
reg   [31:0] sum_0_3_reg_358;
reg   [3:0] j_0_4_reg_371;
reg   [31:0] sum_0_4_reg_382;
reg   [3:0] j_0_5_reg_395;
reg   [31:0] sum_0_5_reg_406;
reg   [3:0] j_0_6_reg_419;
reg   [31:0] sum_0_6_reg_430;
reg   [3:0] j_0_7_reg_443;
reg   [31:0] sum_0_7_reg_454;
wire   [63:0] zext_ln11_fu_491_p1;
wire   [63:0] zext_ln11_8_fu_526_p1;
wire   [63:0] zext_ln11_1_fu_515_p1;
wire   [63:0] tmp_8_fu_554_p3;
wire   [63:0] zext_ln11_2_fu_549_p1;
wire   [63:0] zext_ln11_9_fu_596_p1;
wire   [63:0] zext_ln11_3_fu_581_p1;
wire   [63:0] tmp_9_fu_624_p3;
wire   [63:0] zext_ln11_4_fu_619_p1;
wire   [63:0] zext_ln11_11_fu_666_p1;
wire   [63:0] zext_ln11_5_fu_651_p1;
wire   [63:0] tmp_s_fu_694_p3;
wire   [63:0] zext_ln11_6_fu_689_p1;
wire   [63:0] zext_ln11_12_fu_736_p1;
wire   [63:0] zext_ln11_7_fu_721_p1;
wire  signed [31:0] grp_fu_467_p0;
wire  signed [31:0] grp_fu_467_p1;
wire  signed [31:0] grp_fu_473_p0;
wire  signed [31:0] grp_fu_473_p1;
wire   [31:0] grp_fu_467_p2;
wire   [3:0] xor_ln11_fu_520_p2;
wire   [31:0] grp_fu_473_p2;
wire   [3:0] xor_ln11_1_fu_586_p2;
wire  signed [4:0] sext_ln11_fu_592_p1;
wire   [5:0] zext_ln11_10_fu_656_p1;
wire   [5:0] add_ln11_8_fu_660_p2;
wire   [3:0] xor_ln11_2_fu_726_p2;
wire  signed [5:0] sext_ln11_1_fu_732_p1;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_0_reg_275 <= add_ln10_reg_750;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_275 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_1_reg_299 <= add_ln10_1_reg_773;
    end else if (((icmp_ln10_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_1_reg_299 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_2_reg_323 <= add_ln10_2_reg_796;
    end else if (((icmp_ln10_1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_2_reg_323 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_3_reg_347 <= add_ln10_3_reg_819;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln10_2_fu_537_p2 == 1'd1))) begin
        j_0_3_reg_347 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_0_4_reg_371 <= add_ln10_4_reg_842;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln10_3_fu_569_p2 == 1'd1))) begin
        j_0_4_reg_371 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_5_reg_395 <= add_ln10_5_reg_865;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln10_4_fu_607_p2 == 1'd1))) begin
        j_0_5_reg_395 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_6_reg_419 <= add_ln10_6_reg_888;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln10_5_fu_639_p2 == 1'd1))) begin
        j_0_6_reg_419 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_0_7_reg_443 <= add_ln10_7_reg_911;
    end else if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln10_6_fu_677_p2 == 1'd1))) begin
        j_0_7_reg_443 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_0_0_reg_286 <= add_ln11_fu_497_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_0_0_reg_286 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sum_0_1_reg_310 <= add_ln11_1_fu_531_p2;
    end else if (((icmp_ln10_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_1_reg_310 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_0_2_reg_334 <= add_ln11_2_fu_563_p2;
    end else if (((icmp_ln10_1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_0_2_reg_334 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_0_3_reg_358 <= add_ln11_3_fu_601_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln10_2_fu_537_p2 == 1'd1))) begin
        sum_0_3_reg_358 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_0_4_reg_382 <= add_ln11_4_fu_633_p2;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln10_3_fu_569_p2 == 1'd1))) begin
        sum_0_4_reg_382 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_0_5_reg_406 <= add_ln11_5_fu_671_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln10_4_fu_607_p2 == 1'd1))) begin
        sum_0_5_reg_406 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sum_0_6_reg_430 <= add_ln11_6_fu_703_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln10_5_fu_639_p2 == 1'd1))) begin
        sum_0_6_reg_430 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_0_7_reg_454 <= add_ln11_7_fu_741_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln10_6_fu_677_p2 == 1'd1))) begin
        sum_0_7_reg_454 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln10_1_reg_773 <= add_ln10_1_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln10_2_reg_796 <= add_ln10_2_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln10_3_reg_819 <= add_ln10_3_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln10_4_reg_842 <= add_ln10_4_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln10_5_reg_865 <= add_ln10_5_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln10_6_reg_888 <= add_ln10_6_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln10_7_reg_911 <= add_ln10_7_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_750 <= add_ln10_fu_485_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        M_address0 = zext_ln11_12_fu_736_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        M_address0 = tmp_s_fu_694_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        M_address0 = zext_ln11_11_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        M_address0 = tmp_9_fu_624_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        M_address0 = zext_ln11_9_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        M_address0 = tmp_8_fu_554_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        M_address0 = zext_ln11_8_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        M_address0 = zext_ln11_fu_491_p1;
    end else begin
        M_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        V_In_address0 = zext_ln11_7_fu_721_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        V_In_address0 = zext_ln11_6_fu_689_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        V_In_address0 = zext_ln11_5_fu_651_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_In_address0 = zext_ln11_4_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_In_address0 = zext_ln11_3_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        V_In_address0 = zext_ln11_2_fu_549_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        V_In_address0 = zext_ln11_1_fu_515_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        V_In_address0 = zext_ln11_fu_491_p1;
    end else begin
        V_In_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        V_In_ce0 = 1'b1;
    end else begin
        V_In_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        V_Out_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        V_Out_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        V_Out_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_Out_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_Out_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        V_Out_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        V_Out_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        V_Out_address0 = 64'd0;
    end else begin
        V_Out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        V_Out_d0 = sum_0_7_reg_454;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        V_Out_d0 = sum_0_6_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        V_Out_d0 = sum_0_5_reg_406;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_Out_d0 = sum_0_4_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_Out_d0 = sum_0_3_reg_358;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        V_Out_d0 = sum_0_2_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        V_Out_d0 = sum_0_1_reg_310;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        V_Out_d0 = sum_0_0_reg_286;
    end else begin
        V_Out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln10_1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln10_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln10_7_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_CS_fsm_state14) & (icmp_ln10_6_fu_677_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln10_5_fu_639_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln10_4_fu_607_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln10_3_fu_569_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln10_2_fu_537_p2 == 1'd1)))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_7_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_7_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln10_1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln10_2_fu_537_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln10_3_fu_569_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln10_4_fu_607_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln10_5_fu_639_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln10_6_fu_677_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln10_7_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_509_p2 = (j_0_1_reg_299 + 4'd1);

assign add_ln10_2_fu_543_p2 = (j_0_2_reg_323 + 4'd1);

assign add_ln10_3_fu_575_p2 = (j_0_3_reg_347 + 4'd1);

assign add_ln10_4_fu_613_p2 = (j_0_4_reg_371 + 4'd1);

assign add_ln10_5_fu_645_p2 = (j_0_5_reg_395 + 4'd1);

assign add_ln10_6_fu_683_p2 = (j_0_6_reg_419 + 4'd1);

assign add_ln10_7_fu_715_p2 = (j_0_7_reg_443 + 4'd1);

assign add_ln10_fu_485_p2 = (j_0_0_reg_275 + 4'd1);

assign add_ln11_1_fu_531_p2 = (sum_0_1_reg_310 + grp_fu_473_p2);

assign add_ln11_2_fu_563_p2 = (grp_fu_467_p2 + sum_0_2_reg_334);

assign add_ln11_3_fu_601_p2 = (grp_fu_467_p2 + sum_0_3_reg_358);

assign add_ln11_4_fu_633_p2 = (grp_fu_467_p2 + sum_0_4_reg_382);

assign add_ln11_5_fu_671_p2 = (sum_0_5_reg_406 + grp_fu_473_p2);

assign add_ln11_6_fu_703_p2 = (grp_fu_467_p2 + sum_0_6_reg_430);

assign add_ln11_7_fu_741_p2 = (grp_fu_467_p2 + sum_0_7_reg_454);

assign add_ln11_8_fu_660_p2 = ($signed(zext_ln11_10_fu_656_p1) + $signed(6'd40));

assign add_ln11_fu_497_p2 = (grp_fu_467_p2 + sum_0_0_reg_286);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_467_p0 = V_In_q0;

assign grp_fu_467_p1 = M_q0;

assign grp_fu_467_p2 = ($signed(grp_fu_467_p0) * $signed(grp_fu_467_p1));

assign grp_fu_473_p0 = M_q0;

assign grp_fu_473_p1 = V_In_q0;

assign grp_fu_473_p2 = ($signed(grp_fu_473_p0) * $signed(grp_fu_473_p1));

assign icmp_ln10_1_fu_503_p2 = ((j_0_1_reg_299 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln10_2_fu_537_p2 = ((j_0_2_reg_323 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln10_3_fu_569_p2 = ((j_0_3_reg_347 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln10_4_fu_607_p2 = ((j_0_4_reg_371 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln10_5_fu_639_p2 = ((j_0_5_reg_395 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln10_6_fu_677_p2 = ((j_0_6_reg_419 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln10_7_fu_709_p2 = ((j_0_7_reg_443 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_479_p2 = ((j_0_0_reg_275 == 4'd8) ? 1'b1 : 1'b0);

assign sext_ln11_1_fu_732_p1 = $signed(xor_ln11_2_fu_726_p2);

assign sext_ln11_fu_592_p1 = $signed(xor_ln11_1_fu_586_p2);

assign tmp_8_fu_554_p3 = {{60'd1}, {j_0_2_reg_323}};

assign tmp_9_fu_624_p3 = {{60'd2}, {j_0_4_reg_371}};

assign tmp_s_fu_694_p3 = {{60'd3}, {j_0_6_reg_419}};

assign xor_ln11_1_fu_586_p2 = (j_0_3_reg_347 ^ 4'd8);

assign xor_ln11_2_fu_726_p2 = (j_0_7_reg_443 ^ 4'd8);

assign xor_ln11_fu_520_p2 = (j_0_1_reg_299 ^ 4'd8);

assign zext_ln11_10_fu_656_p1 = j_0_5_reg_395;

assign zext_ln11_11_fu_666_p1 = add_ln11_8_fu_660_p2;

assign zext_ln11_12_fu_736_p1 = $unsigned(sext_ln11_1_fu_732_p1);

assign zext_ln11_1_fu_515_p1 = j_0_1_reg_299;

assign zext_ln11_2_fu_549_p1 = j_0_2_reg_323;

assign zext_ln11_3_fu_581_p1 = j_0_3_reg_347;

assign zext_ln11_4_fu_619_p1 = j_0_4_reg_371;

assign zext_ln11_5_fu_651_p1 = j_0_5_reg_395;

assign zext_ln11_6_fu_689_p1 = j_0_6_reg_419;

assign zext_ln11_7_fu_721_p1 = j_0_7_reg_443;

assign zext_ln11_8_fu_526_p1 = xor_ln11_fu_520_p2;

assign zext_ln11_9_fu_596_p1 = $unsigned(sext_ln11_fu_592_p1);

assign zext_ln11_fu_491_p1 = j_0_0_reg_275;

endmodule //matrix_vector
