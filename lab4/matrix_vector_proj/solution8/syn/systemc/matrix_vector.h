// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix_vector_HH_
#define _matrix_vector_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct matrix_vector : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > M_0_address0;
    sc_out< sc_logic > M_0_ce0;
    sc_in< sc_lv<32> > M_0_q0;
    sc_out< sc_lv<5> > M_0_address1;
    sc_out< sc_logic > M_0_ce1;
    sc_in< sc_lv<32> > M_0_q1;
    sc_out< sc_lv<5> > M_1_address0;
    sc_out< sc_logic > M_1_ce0;
    sc_in< sc_lv<32> > M_1_q0;
    sc_out< sc_lv<5> > M_1_address1;
    sc_out< sc_logic > M_1_ce1;
    sc_in< sc_lv<32> > M_1_q1;
    sc_out< sc_lv<2> > V_In_0_address0;
    sc_out< sc_logic > V_In_0_ce0;
    sc_in< sc_lv<32> > V_In_0_q0;
    sc_out< sc_lv<2> > V_In_0_address1;
    sc_out< sc_logic > V_In_0_ce1;
    sc_in< sc_lv<32> > V_In_0_q1;
    sc_out< sc_lv<2> > V_In_1_address0;
    sc_out< sc_logic > V_In_1_ce0;
    sc_in< sc_lv<32> > V_In_1_q0;
    sc_out< sc_lv<2> > V_In_1_address1;
    sc_out< sc_logic > V_In_1_ce1;
    sc_in< sc_lv<32> > V_In_1_q1;
    sc_out< sc_lv<3> > V_Out_address0;
    sc_out< sc_logic > V_Out_ce0;
    sc_out< sc_logic > V_Out_we0;
    sc_out< sc_lv<32> > V_Out_d0;


    // Module declarations
    matrix_vector(sc_module_name name);
    SC_HAS_PROCESS(matrix_vector);

    ~matrix_vector();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_0_reg_243;
    sc_signal< sc_lv<4> > i_0_reg_243_pp0_iter1_reg;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln7_fu_285_p2;
    sc_signal< sc_lv<1> > icmp_ln7_reg_429;
    sc_signal< sc_lv<1> > icmp_ln7_reg_429_pp0_iter1_reg;
    sc_signal< sc_lv<4> > i_fu_291_p2;
    sc_signal< sc_lv<4> > i_reg_433;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > tmp_1_fu_297_p3;
    sc_signal< sc_lv<6> > tmp_1_reg_438;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > add_ln11_fu_357_p2;
    sc_signal< sc_lv<32> > add_ln11_reg_484;
    sc_signal< sc_lv<32> > grp_fu_279_p2;
    sc_signal< sc_lv<32> > add_ln11_3_reg_489;
    sc_signal< sc_lv<32> > add_ln11_2_fu_369_p2;
    sc_signal< sc_lv<32> > add_ln11_2_reg_494;
    sc_signal< sc_lv<32> > add_ln11_4_reg_499;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<4> > ap_phi_mux_i_0_phi_fu_247_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln11_1_fu_305_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_317_p3;
    sc_signal< sc_lv<64> > tmp_3_fu_332_p3;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_4_fu_347_p3;
    sc_signal< sc_lv<64> > zext_ln11_fu_374_p1;
    sc_signal< sc_lv<32> > grp_fu_255_p0;
    sc_signal< sc_lv<32> > grp_fu_255_p1;
    sc_signal< sc_lv<32> > grp_fu_261_p0;
    sc_signal< sc_lv<32> > grp_fu_261_p1;
    sc_signal< sc_lv<32> > grp_fu_267_p0;
    sc_signal< sc_lv<32> > grp_fu_267_p1;
    sc_signal< sc_lv<32> > grp_fu_273_p0;
    sc_signal< sc_lv<32> > grp_fu_273_p1;
    sc_signal< sc_lv<32> > grp_fu_273_p2;
    sc_signal< sc_lv<32> > grp_fu_267_p2;
    sc_signal< sc_lv<6> > or_ln11_fu_311_p2;
    sc_signal< sc_lv<6> > or_ln11_1_fu_327_p2;
    sc_signal< sc_lv<6> > or_ln11_2_fu_342_p2;
    sc_signal< sc_lv<32> > grp_fu_261_p2;
    sc_signal< sc_lv<32> > grp_fu_255_p2;
    sc_signal< sc_lv<32> > add_ln11_1_fu_363_p2;
    sc_signal< sc_lv<32> > add_ln11_5_fu_379_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<58> ap_const_lv58_0;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<6> ap_const_lv6_3;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_M_0_address0();
    void thread_M_0_address1();
    void thread_M_0_ce0();
    void thread_M_0_ce1();
    void thread_M_1_address0();
    void thread_M_1_address1();
    void thread_M_1_ce0();
    void thread_M_1_ce1();
    void thread_V_In_0_address0();
    void thread_V_In_0_address1();
    void thread_V_In_0_ce0();
    void thread_V_In_0_ce1();
    void thread_V_In_1_address0();
    void thread_V_In_1_address1();
    void thread_V_In_1_ce0();
    void thread_V_In_1_ce1();
    void thread_V_Out_address0();
    void thread_V_Out_ce0();
    void thread_V_Out_d0();
    void thread_V_Out_we0();
    void thread_add_ln11_1_fu_363_p2();
    void thread_add_ln11_2_fu_369_p2();
    void thread_add_ln11_5_fu_379_p2();
    void thread_add_ln11_fu_357_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_247_p4();
    void thread_ap_ready();
    void thread_grp_fu_255_p0();
    void thread_grp_fu_255_p1();
    void thread_grp_fu_255_p2();
    void thread_grp_fu_261_p0();
    void thread_grp_fu_261_p1();
    void thread_grp_fu_261_p2();
    void thread_grp_fu_267_p0();
    void thread_grp_fu_267_p1();
    void thread_grp_fu_267_p2();
    void thread_grp_fu_273_p0();
    void thread_grp_fu_273_p1();
    void thread_grp_fu_273_p2();
    void thread_grp_fu_279_p2();
    void thread_i_fu_291_p2();
    void thread_icmp_ln7_fu_285_p2();
    void thread_or_ln11_1_fu_327_p2();
    void thread_or_ln11_2_fu_342_p2();
    void thread_or_ln11_fu_311_p2();
    void thread_tmp_1_fu_297_p3();
    void thread_tmp_2_fu_317_p3();
    void thread_tmp_3_fu_332_p3();
    void thread_tmp_4_fu_347_p3();
    void thread_zext_ln11_1_fu_305_p1();
    void thread_zext_ln11_fu_374_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
