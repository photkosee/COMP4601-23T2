// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=145,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=60,HLS_SYN_LUT=174,HLS_VERSION=2020_1}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_address0,
        M_ce0,
        M_q0,
        V_In_address0,
        V_In_ce0,
        V_In_q0,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] M_address0;
output   M_ce0;
input  [31:0] M_q0;
output  [2:0] V_In_address0;
output   V_In_ce0;
input  [31:0] V_In_q0;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg M_ce0;
reg V_In_ce0;
reg V_Out_ce0;
reg V_Out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_120_p2;
reg   [3:0] i_reg_188;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln11_fu_126_p1;
reg   [63:0] zext_ln11_reg_193;
wire   [0:0] icmp_ln7_fu_114_p2;
wire   [7:0] zext_ln10_fu_138_p1;
reg   [7:0] zext_ln10_reg_198;
wire   [3:0] j_fu_148_p2;
reg   [3:0] j_reg_206;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln10_fu_142_p2;
wire   [31:0] sum_fu_179_p2;
wire    ap_CS_fsm_state4;
reg   [3:0] i_0_reg_79;
reg   [3:0] j_0_reg_90;
reg   [31:0] sum_0_reg_101;
wire   [63:0] zext_ln11_3_fu_168_p1;
wire   [63:0] zext_ln11_1_fu_154_p1;
wire   [6:0] tmp_1_fu_130_p3;
wire   [7:0] zext_ln11_2_fu_159_p1;
wire   [7:0] add_ln11_fu_163_p2;
wire  signed [31:0] mul_ln11_fu_173_p0;
wire  signed [31:0] mul_ln11_fu_173_p1;
wire   [31:0] mul_ln11_fu_173_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_79 <= i_reg_188;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_79 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_90 <= j_reg_206;
    end else if (((icmp_ln7_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_90 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sum_0_reg_101 <= sum_fu_179_p2;
    end else if (((icmp_ln7_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_101 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_188 <= i_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_206 <= j_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln10_reg_198[6 : 3] <= zext_ln10_fu_138_p1[6 : 3];
        zext_ln11_reg_193[3 : 0] <= zext_ln11_fu_126_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_In_ce0 = 1'b1;
    end else begin
        V_In_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_address0 = zext_ln11_3_fu_168_p1;

assign V_In_address0 = zext_ln11_1_fu_154_p1;

assign V_Out_address0 = zext_ln11_reg_193;

assign V_Out_d0 = sum_0_reg_101;

assign add_ln11_fu_163_p2 = (zext_ln10_reg_198 + zext_ln11_2_fu_159_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_120_p2 = (i_0_reg_79 + 4'd1);

assign icmp_ln10_fu_142_p2 = ((j_0_reg_90 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_114_p2 = ((i_0_reg_79 == 4'd8) ? 1'b1 : 1'b0);

assign j_fu_148_p2 = (j_0_reg_90 + 4'd1);

assign mul_ln11_fu_173_p0 = M_q0;

assign mul_ln11_fu_173_p1 = V_In_q0;

assign mul_ln11_fu_173_p2 = ($signed(mul_ln11_fu_173_p0) * $signed(mul_ln11_fu_173_p1));

assign sum_fu_179_p2 = (sum_0_reg_101 + mul_ln11_fu_173_p2);

assign tmp_1_fu_130_p3 = {{i_0_reg_79}, {3'd0}};

assign zext_ln10_fu_138_p1 = tmp_1_fu_130_p3;

assign zext_ln11_1_fu_154_p1 = j_0_reg_90;

assign zext_ln11_2_fu_159_p1 = j_0_reg_90;

assign zext_ln11_3_fu_168_p1 = add_ln11_fu_163_p2;

assign zext_ln11_fu_126_p1 = i_0_reg_79;

always @ (posedge ap_clk) begin
    zext_ln11_reg_193[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_198[2:0] <= 3'b000;
    zext_ln10_reg_198[7] <= 1'b0;
end

endmodule //matrix_vector
