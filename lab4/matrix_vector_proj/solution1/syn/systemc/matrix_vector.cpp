// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_vector.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_vector::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_vector::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> matrix_vector::ap_ST_fsm_state1 = "1";
const sc_lv<4> matrix_vector::ap_ST_fsm_state2 = "10";
const sc_lv<4> matrix_vector::ap_ST_fsm_state3 = "100";
const sc_lv<4> matrix_vector::ap_ST_fsm_state4 = "1000";
const sc_lv<32> matrix_vector::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> matrix_vector::ap_const_lv32_1 = "1";
const sc_lv<1> matrix_vector::ap_const_lv1_0 = "0";
const sc_lv<32> matrix_vector::ap_const_lv32_2 = "10";
const sc_lv<32> matrix_vector::ap_const_lv32_3 = "11";
const sc_lv<4> matrix_vector::ap_const_lv4_0 = "0000";
const sc_lv<1> matrix_vector::ap_const_lv1_1 = "1";
const sc_lv<4> matrix_vector::ap_const_lv4_8 = "1000";
const sc_lv<4> matrix_vector::ap_const_lv4_1 = "1";
const sc_lv<3> matrix_vector::ap_const_lv3_0 = "000";
const bool matrix_vector::ap_const_boolean_1 = true;

matrix_vector::matrix_vector(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_M_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln11_3_fu_168_p1 );

    SC_METHOD(thread_M_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_V_In_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln11_1_fu_154_p1 );

    SC_METHOD(thread_V_In_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_V_Out_address0);
    sensitive << ( zext_ln11_reg_193 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_V_Out_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_V_Out_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sum_0_reg_101 );

    SC_METHOD(thread_V_Out_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln10_fu_142_p2 );

    SC_METHOD(thread_add_ln11_fu_163_p2);
    sensitive << ( zext_ln10_reg_198 );
    sensitive << ( zext_ln11_2_fu_159_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_114_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_114_p2 );

    SC_METHOD(thread_i_fu_120_p2);
    sensitive << ( i_0_reg_79 );

    SC_METHOD(thread_icmp_ln10_fu_142_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_90 );

    SC_METHOD(thread_icmp_ln7_fu_114_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_79 );

    SC_METHOD(thread_j_fu_148_p2);
    sensitive << ( j_0_reg_90 );

    SC_METHOD(thread_mul_ln11_fu_173_p0);
    sensitive << ( M_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln11_fu_173_p1);
    sensitive << ( V_In_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln11_fu_173_p2);
    sensitive << ( mul_ln11_fu_173_p0 );
    sensitive << ( mul_ln11_fu_173_p1 );

    SC_METHOD(thread_sum_fu_179_p2);
    sensitive << ( sum_0_reg_101 );
    sensitive << ( mul_ln11_fu_173_p2 );

    SC_METHOD(thread_tmp_1_fu_130_p3);
    sensitive << ( i_0_reg_79 );

    SC_METHOD(thread_zext_ln10_fu_138_p1);
    sensitive << ( tmp_1_fu_130_p3 );

    SC_METHOD(thread_zext_ln11_1_fu_154_p1);
    sensitive << ( j_0_reg_90 );

    SC_METHOD(thread_zext_ln11_2_fu_159_p1);
    sensitive << ( j_0_reg_90 );

    SC_METHOD(thread_zext_ln11_3_fu_168_p1);
    sensitive << ( add_ln11_fu_163_p2 );

    SC_METHOD(thread_zext_ln11_fu_126_p1);
    sensitive << ( i_0_reg_79 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_114_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln10_fu_142_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_vector_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, M_address0, "(port)M_address0");
    sc_trace(mVcdFile, M_ce0, "(port)M_ce0");
    sc_trace(mVcdFile, M_q0, "(port)M_q0");
    sc_trace(mVcdFile, V_In_address0, "(port)V_In_address0");
    sc_trace(mVcdFile, V_In_ce0, "(port)V_In_ce0");
    sc_trace(mVcdFile, V_In_q0, "(port)V_In_q0");
    sc_trace(mVcdFile, V_Out_address0, "(port)V_Out_address0");
    sc_trace(mVcdFile, V_Out_ce0, "(port)V_Out_ce0");
    sc_trace(mVcdFile, V_Out_we0, "(port)V_Out_we0");
    sc_trace(mVcdFile, V_Out_d0, "(port)V_Out_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_120_p2, "i_fu_120_p2");
    sc_trace(mVcdFile, i_reg_188, "i_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln11_fu_126_p1, "zext_ln11_fu_126_p1");
    sc_trace(mVcdFile, zext_ln11_reg_193, "zext_ln11_reg_193");
    sc_trace(mVcdFile, icmp_ln7_fu_114_p2, "icmp_ln7_fu_114_p2");
    sc_trace(mVcdFile, zext_ln10_fu_138_p1, "zext_ln10_fu_138_p1");
    sc_trace(mVcdFile, zext_ln10_reg_198, "zext_ln10_reg_198");
    sc_trace(mVcdFile, j_fu_148_p2, "j_fu_148_p2");
    sc_trace(mVcdFile, j_reg_206, "j_reg_206");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln10_fu_142_p2, "icmp_ln10_fu_142_p2");
    sc_trace(mVcdFile, sum_fu_179_p2, "sum_fu_179_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_0_reg_79, "i_0_reg_79");
    sc_trace(mVcdFile, j_0_reg_90, "j_0_reg_90");
    sc_trace(mVcdFile, sum_0_reg_101, "sum_0_reg_101");
    sc_trace(mVcdFile, zext_ln11_3_fu_168_p1, "zext_ln11_3_fu_168_p1");
    sc_trace(mVcdFile, zext_ln11_1_fu_154_p1, "zext_ln11_1_fu_154_p1");
    sc_trace(mVcdFile, tmp_1_fu_130_p3, "tmp_1_fu_130_p3");
    sc_trace(mVcdFile, zext_ln11_2_fu_159_p1, "zext_ln11_2_fu_159_p1");
    sc_trace(mVcdFile, add_ln11_fu_163_p2, "add_ln11_fu_163_p2");
    sc_trace(mVcdFile, mul_ln11_fu_173_p0, "mul_ln11_fu_173_p0");
    sc_trace(mVcdFile, mul_ln11_fu_173_p1, "mul_ln11_fu_173_p1");
    sc_trace(mVcdFile, mul_ln11_fu_173_p2, "mul_ln11_fu_173_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("matrix_vector.hdltvin.dat");
    mHdltvoutHandle.open("matrix_vector.hdltvout.dat");
}

matrix_vector::~matrix_vector() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void matrix_vector::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_142_p2.read(), ap_const_lv1_1))) {
        i_0_reg_79 = i_reg_188.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_79 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_90 = j_reg_206.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln7_fu_114_p2.read(), ap_const_lv1_0))) {
        j_0_reg_90 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sum_0_reg_101 = sum_fu_179_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln7_fu_114_p2.read(), ap_const_lv1_0))) {
        sum_0_reg_101 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_188 = i_fu_120_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_206 = j_fu_148_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln7_fu_114_p2.read(), ap_const_lv1_0))) {
        zext_ln10_reg_198 = zext_ln10_fu_138_p1.read();
        zext_ln11_reg_193 = zext_ln11_fu_126_p1.read();
    }
}

void matrix_vector::thread_M_address0() {
    M_address0 =  (sc_lv<6>) (zext_ln11_3_fu_168_p1.read());
}

void matrix_vector::thread_M_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        M_ce0 = ap_const_logic_1;
    } else {
        M_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_V_In_address0() {
    V_In_address0 =  (sc_lv<3>) (zext_ln11_1_fu_154_p1.read());
}

void matrix_vector::thread_V_In_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        V_In_ce0 = ap_const_logic_1;
    } else {
        V_In_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_V_Out_address0() {
    V_Out_address0 =  (sc_lv<3>) (zext_ln11_reg_193.read());
}

void matrix_vector::thread_V_Out_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        V_Out_ce0 = ap_const_logic_1;
    } else {
        V_Out_ce0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_V_Out_d0() {
    V_Out_d0 = sum_0_reg_101.read();
}

void matrix_vector::thread_V_Out_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_142_p2.read(), ap_const_lv1_1))) {
        V_Out_we0 = ap_const_logic_1;
    } else {
        V_Out_we0 = ap_const_logic_0;
    }
}

void matrix_vector::thread_add_ln11_fu_163_p2() {
    add_ln11_fu_163_p2 = (!zext_ln10_reg_198.read().is_01() || !zext_ln11_2_fu_159_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln10_reg_198.read()) + sc_biguint<8>(zext_ln11_2_fu_159_p1.read()));
}

void matrix_vector::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_vector::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrix_vector::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrix_vector::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrix_vector::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln7_fu_114_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_vector::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_vector::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln7_fu_114_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_vector::thread_i_fu_120_p2() {
    i_fu_120_p2 = (!i_0_reg_79.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_79.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrix_vector::thread_icmp_ln10_fu_142_p2() {
    icmp_ln10_fu_142_p2 = (!j_0_reg_90.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_90.read() == ap_const_lv4_8);
}

void matrix_vector::thread_icmp_ln7_fu_114_p2() {
    icmp_ln7_fu_114_p2 = (!i_0_reg_79.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_79.read() == ap_const_lv4_8);
}

void matrix_vector::thread_j_fu_148_p2() {
    j_fu_148_p2 = (!j_0_reg_90.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_90.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrix_vector::thread_mul_ln11_fu_173_p0() {
    mul_ln11_fu_173_p0 = M_q0.read();
}

void matrix_vector::thread_mul_ln11_fu_173_p1() {
    mul_ln11_fu_173_p1 = V_In_q0.read();
}

void matrix_vector::thread_mul_ln11_fu_173_p2() {
    mul_ln11_fu_173_p2 = (!mul_ln11_fu_173_p0.read().is_01() || !mul_ln11_fu_173_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln11_fu_173_p0.read()) * sc_bigint<32>(mul_ln11_fu_173_p1.read());
}

void matrix_vector::thread_sum_fu_179_p2() {
    sum_fu_179_p2 = (!sum_0_reg_101.read().is_01() || !mul_ln11_fu_173_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_0_reg_101.read()) + sc_biguint<32>(mul_ln11_fu_173_p2.read()));
}

void matrix_vector::thread_tmp_1_fu_130_p3() {
    tmp_1_fu_130_p3 = esl_concat<4,3>(i_0_reg_79.read(), ap_const_lv3_0);
}

void matrix_vector::thread_zext_ln10_fu_138_p1() {
    zext_ln10_fu_138_p1 = esl_zext<8,7>(tmp_1_fu_130_p3.read());
}

void matrix_vector::thread_zext_ln11_1_fu_154_p1() {
    zext_ln11_1_fu_154_p1 = esl_zext<64,4>(j_0_reg_90.read());
}

void matrix_vector::thread_zext_ln11_2_fu_159_p1() {
    zext_ln11_2_fu_159_p1 = esl_zext<8,4>(j_0_reg_90.read());
}

void matrix_vector::thread_zext_ln11_3_fu_168_p1() {
    zext_ln11_3_fu_168_p1 = esl_zext<64,8>(add_ln11_fu_163_p2.read());
}

void matrix_vector::thread_zext_ln11_fu_126_p1() {
    zext_ln11_fu_126_p1 = esl_zext<64,4>(i_0_reg_79.read());
}

void matrix_vector::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln7_fu_114_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_142_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void matrix_vector::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_address0\" :  \"" << M_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"M_ce0\" :  \"" << M_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M_q0\" :  \"" << M_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_In_address0\" :  \"" << V_In_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_In_ce0\" :  \"" << V_In_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"V_In_q0\" :  \"" << V_In_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_address0\" :  \"" << V_Out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_ce0\" :  \"" << V_Out_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_we0\" :  \"" << V_Out_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"V_Out_d0\" :  \"" << V_Out_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

