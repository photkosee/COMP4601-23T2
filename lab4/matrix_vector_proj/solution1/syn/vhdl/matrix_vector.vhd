-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_vector is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    M_ce0 : OUT STD_LOGIC;
    M_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_In_ce0 : OUT STD_LOGIC;
    V_In_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_Out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_Out_ce0 : OUT STD_LOGIC;
    V_Out_we0 : OUT STD_LOGIC;
    V_Out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_vector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=145,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=60,HLS_SYN_LUT=174,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_120_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_188 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_reg_193 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln7_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln10_fu_138_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln10_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_148_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_206 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln10_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_reg_79 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_0_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_3_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_1_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_130_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_2_fu_159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_fu_163_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln11_fu_173_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln11_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln11_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_79 <= i_reg_188;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_79 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_90 <= j_reg_206;
            elsif (((icmp_ln7_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_90 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                sum_0_reg_101 <= sum_fu_179_p2;
            elsif (((icmp_ln7_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_0_reg_101 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_188 <= i_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_206 <= j_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln10_reg_198(6 downto 3) <= zext_ln10_fu_138_p1(6 downto 3);
                    zext_ln11_reg_193(3 downto 0) <= zext_ln11_fu_126_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln11_reg_193(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln10_reg_198(2 downto 0) <= "000";
    zext_ln10_reg_198(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_114_p2, ap_CS_fsm_state3, icmp_ln10_fu_142_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln10_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    M_address0 <= zext_ln11_3_fu_168_p1(6 - 1 downto 0);

    M_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            M_ce0 <= ap_const_logic_1;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_In_address0 <= zext_ln11_1_fu_154_p1(3 - 1 downto 0);

    V_In_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_In_ce0 <= ap_const_logic_1;
        else 
            V_In_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_address0 <= zext_ln11_reg_193(3 - 1 downto 0);

    V_Out_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_Out_ce0 <= ap_const_logic_1;
        else 
            V_Out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_d0 <= sum_0_reg_101;

    V_Out_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln10_fu_142_p2)
    begin
        if (((icmp_ln10_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            V_Out_we0 <= ap_const_logic_1;
        else 
            V_Out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_163_p2 <= std_logic_vector(unsigned(zext_ln10_reg_198) + unsigned(zext_ln11_2_fu_159_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_114_p2)
    begin
        if (((icmp_ln7_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_114_p2)
    begin
        if (((icmp_ln7_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_120_p2 <= std_logic_vector(unsigned(i_0_reg_79) + unsigned(ap_const_lv4_1));
    icmp_ln10_fu_142_p2 <= "1" when (j_0_reg_90 = ap_const_lv4_8) else "0";
    icmp_ln7_fu_114_p2 <= "1" when (i_0_reg_79 = ap_const_lv4_8) else "0";
    j_fu_148_p2 <= std_logic_vector(unsigned(j_0_reg_90) + unsigned(ap_const_lv4_1));
    mul_ln11_fu_173_p0 <= M_q0;
    mul_ln11_fu_173_p1 <= V_In_q0;
    mul_ln11_fu_173_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_fu_173_p0) * signed(mul_ln11_fu_173_p1))), 32));
    sum_fu_179_p2 <= std_logic_vector(unsigned(sum_0_reg_101) + unsigned(mul_ln11_fu_173_p2));
    tmp_1_fu_130_p3 <= (i_0_reg_79 & ap_const_lv3_0);
    zext_ln10_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_130_p3),8));
    zext_ln11_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_90),64));
    zext_ln11_2_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_90),8));
    zext_ln11_3_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_163_p2),64));
    zext_ln11_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_79),64));
end behav;
