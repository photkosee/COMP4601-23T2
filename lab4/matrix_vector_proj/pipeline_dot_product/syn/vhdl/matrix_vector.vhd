-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_vector is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    M_ce0 : OUT STD_LOGIC;
    M_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_In_ce0 : OUT STD_LOGIC;
    V_In_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_Out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_Out_ce0 : OUT STD_LOGIC;
    V_Out_we0 : OUT STD_LOGIC;
    V_Out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_vector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_vector,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqzu5ev-ffrb900-1-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.663000,HLS_SYN_LAT=67,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=106,HLS_SYN_LUT=283,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_93 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_0_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln7_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln7_reg_243_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln7_fu_144_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln10_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_252_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_162_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_reg_257 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_2_fu_170_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_2_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_2_reg_262_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_273 : STD_LOGIC_VECTOR (3 downto 0);
    signal M_load_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln10_1_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_108_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_119_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln11_3_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_1_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_150_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_2_fu_190_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln10_fu_186_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_fu_194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln11_fu_231_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln11_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln11_1_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_104 <= select_ln11_2_reg_262;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_104 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_93 <= add_ln7_fu_144_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_93 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_115 <= j_reg_273;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_115 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_reg_243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                sum_0_reg_126 <= sum_fu_236_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_0_reg_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_reg_243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                M_load_reg_284 <= M_q0;
                icmp_ln10_1_reg_289 <= icmp_ln10_1_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_252 <= icmp_ln10_fu_156_p2;
                select_ln11_reg_257 <= select_ln11_fu_162_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_252_pp0_iter1_reg <= icmp_ln10_reg_252;
                icmp_ln7_reg_243 <= icmp_ln7_fu_138_p2;
                icmp_ln7_reg_243_pp0_iter1_reg <= icmp_ln7_reg_243;
                select_ln11_2_reg_262_pp0_iter1_reg <= select_ln11_2_reg_262;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln7_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_reg_273 <= j_fu_205_p2;
                select_ln11_2_reg_262 <= select_ln11_2_fu_170_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln7_fu_138_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln7_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln7_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    M_address0 <= zext_ln11_3_fu_200_p1(6 - 1 downto 0);

    M_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_ce0 <= ap_const_logic_1;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_In_address0 <= zext_ln11_1_fu_211_p1(3 - 1 downto 0);

    V_In_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            V_In_ce0 <= ap_const_logic_1;
        else 
            V_In_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_address0 <= zext_ln11_fu_227_p1(3 - 1 downto 0);

    V_Out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_Out_ce0 <= ap_const_logic_1;
        else 
            V_Out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_d0 <= std_logic_vector(unsigned(mul_ln11_fu_231_p2) + unsigned(select_ln11_1_fu_220_p3));

    V_Out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_1_reg_289, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln10_1_reg_289 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_Out_we0 <= ap_const_logic_1;
        else 
            V_Out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_194_p2 <= std_logic_vector(unsigned(zext_ln11_2_fu_190_p1) + unsigned(zext_ln10_fu_186_p1));
    add_ln7_fu_144_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_93) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln7_fu_138_p2)
    begin
        if ((icmp_ln7_fu_138_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_108_p4_assign_proc : process(i_0_reg_104, icmp_ln7_reg_243, ap_CS_fsm_pp0_stage0, select_ln11_2_reg_262, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln7_reg_243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_108_p4 <= select_ln11_2_reg_262;
        else 
            ap_phi_mux_i_0_phi_fu_108_p4 <= i_0_reg_104;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_119_p4_assign_proc : process(j_0_reg_115, icmp_ln7_reg_243, ap_CS_fsm_pp0_stage0, j_reg_273, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln7_reg_243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_119_p4 <= j_reg_273;
        else 
            ap_phi_mux_j_0_phi_fu_119_p4 <= j_0_reg_115;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_150_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_108_p4) + unsigned(ap_const_lv4_1));
    icmp_ln10_1_fu_215_p2 <= "1" when (j_reg_273 = ap_const_lv4_8) else "0";
    icmp_ln10_fu_156_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_119_p4 = ap_const_lv4_8) else "0";
    icmp_ln7_fu_138_p2 <= "1" when (indvar_flatten_reg_93 = ap_const_lv7_40) else "0";
    j_fu_205_p2 <= std_logic_vector(unsigned(select_ln11_fu_162_p3) + unsigned(ap_const_lv4_1));
    mul_ln11_fu_231_p0 <= V_In_q0;
    mul_ln11_fu_231_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_fu_231_p0) * signed(M_load_reg_284))), 32));
    select_ln11_1_fu_220_p3 <= 
        ap_const_lv32_0 when (icmp_ln10_reg_252_pp0_iter1_reg(0) = '1') else 
        sum_0_reg_126;
    select_ln11_2_fu_170_p3 <= 
        i_fu_150_p2 when (icmp_ln10_fu_156_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_108_p4;
    select_ln11_fu_162_p3 <= 
        ap_const_lv4_0 when (icmp_ln10_fu_156_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_119_p4;
    sum_fu_236_p2 <= std_logic_vector(unsigned(mul_ln11_fu_231_p2) + unsigned(select_ln11_1_fu_220_p3));
    tmp_fu_178_p3 <= (select_ln11_2_fu_170_p3 & ap_const_lv3_0);
    zext_ln10_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_178_p3),8));
    zext_ln11_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_reg_257),64));
    zext_ln11_2_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_fu_162_p3),8));
    zext_ln11_3_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_194_p2),64));
    zext_ln11_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_2_reg_262_pp0_iter1_reg),64));
end behav;
